/*
Deployment script for Release1.1

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Release1.1"
:setvar DefaultFilePrefix "Release1.1"
:setvar DefaultDataPath "D:\MSSQL\MSSQL12.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "D:\MSSQL\MSSQL12.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Dropping [dbo].[vwMarket_LO].[MS_DiagramPane1]...';


GO
EXECUTE sp_dropextendedproperty @name = N'MS_DiagramPane1', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'vwMarket_LO';


GO
PRINT N'Dropping [dbo].[vwMarket_LO].[MS_DiagramPaneCount]...';


GO
EXECUTE sp_dropextendedproperty @name = N'MS_DiagramPaneCount', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'vwMarket_LO';


GO
PRINT N'Dropping [dbo].[vwTerritories_LO].[MS_DiagramPane1]...';


GO
EXECUTE sp_dropextendedproperty @name = N'MS_DiagramPane1', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'vwTerritories_LO';


GO
PRINT N'Dropping [dbo].[vwTerritories_LO].[MS_DiagramPane2]...';


GO
EXECUTE sp_dropextendedproperty @name = N'MS_DiagramPane2', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'vwTerritories_LO';


GO
PRINT N'Dropping [dbo].[vwTerritories_LO].[MS_DiagramPane3]...';


GO
EXECUTE sp_dropextendedproperty @name = N'MS_DiagramPane3', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'vwTerritories_LO';


GO
PRINT N'Dropping [dbo].[vwTerritories_LO].[MS_DiagramPaneCount]...';


GO
EXECUTE sp_dropextendedproperty @name = N'MS_DiagramPaneCount', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'vwTerritories_LO';


GO
PRINT N'Dropping [dbo].[DF_TerritoryId]...';


GO
ALTER TABLE [dbo].[Groups] DROP CONSTRAINT [DF_TerritoryId];


GO
PRINT N'Dropping [dbo].[DF_LogMarketDataRefresh_StepFailed]...';


GO
ALTER TABLE [dbo].[LogMarketDataRefresh] DROP CONSTRAINT [DF_LogMarketDataRefresh_StepFailed];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Role]...';


GO
ALTER TABLE [dbo].[Role] DROP CONSTRAINT [DF__Role__IsExternal__1BC821DD];


GO
PRINT N'Dropping [dbo].[FK__RoleActio__Acces__634EBE90]...';


GO
ALTER TABLE [dbo].[RoleAction] DROP CONSTRAINT [FK__RoleActio__Acces__634EBE90];


GO
PRINT N'Dropping [dbo].[FK__Action__ModuleID__43D61337]...';


GO
ALTER TABLE [dbo].[Action] DROP CONSTRAINT [FK__Action__ModuleID__43D61337];


GO
PRINT N'Dropping [dbo].[FK__RoleActio__Actio__6442E2C9]...';


GO
ALTER TABLE [dbo].[RoleAction] DROP CONSTRAINT [FK__RoleActio__Actio__6442E2C9];


GO
PRINT N'Dropping [dbo].[FK_dbo.AdditionalFilters_dbo.MarketDefinitionBaseMaps_MarketDefinitionBaseMapId]...';


GO
ALTER TABLE [dbo].[AdditionalFilters] DROP CONSTRAINT [FK_dbo.AdditionalFilters_dbo.MarketDefinitionBaseMaps_MarketDefinitionBaseMapId];


GO
PRINT N'Dropping [dbo].[FK__Subscript__Clien__662B2B3B]...';


GO
ALTER TABLE [dbo].[Subscription] DROP CONSTRAINT [FK__Subscript__Clien__662B2B3B];


GO
PRINT N'Dropping [dbo].[FK__ClientMFR__Clien__46B27FE2]...';


GO
ALTER TABLE [dbo].[ClientMFR] DROP CONSTRAINT [FK__ClientMFR__Clien__46B27FE2];


GO
PRINT N'Dropping [dbo].[FK__ClientPac__Clien__47A6A41B]...';


GO
ALTER TABLE [dbo].[ClientPackException] DROP CONSTRAINT [FK__ClientPac__Clien__47A6A41B];


GO
PRINT N'Dropping [dbo].[FK__ClientRel__Clien__489AC854]...';


GO
ALTER TABLE [dbo].[ClientRelease] DROP CONSTRAINT [FK__ClientRel__Clien__489AC854];


GO
PRINT N'Dropping [dbo].[FK__UserClien__Clien__719CDDE7]...';


GO
ALTER TABLE [dbo].[UserClient] DROP CONSTRAINT [FK__UserClien__Clien__719CDDE7];


GO
PRINT N'Dropping [dbo].[FK__DeliveryC__Clien__4E53A1AA]...';


GO
ALTER TABLE [dbo].[DeliveryClient] DROP CONSTRAINT [FK__DeliveryC__Clien__4E53A1AA];


GO
PRINT N'Dropping [dbo].[FK_dbo.MarketDefinitions_dbo.Clients_ClientId]...';


GO
ALTER TABLE [dbo].[MarketDefinitions] DROP CONSTRAINT [FK_dbo.MarketDefinitions_dbo.Clients_ClientId];


GO
PRINT N'Dropping [dbo].[FK__Subscript__Count__671F4F74]...';


GO
ALTER TABLE [dbo].[Subscription] DROP CONSTRAINT [FK__Subscript__Count__671F4F74];


GO
PRINT N'Dropping [dbo].[FK__Subscript__DataT__681373AD]...';


GO
ALTER TABLE [dbo].[Subscription] DROP CONSTRAINT [FK__Subscript__DataT__681373AD];


GO
PRINT N'Dropping [dbo].[FK__ReportWri__Deliv__607251E5]...';


GO
ALTER TABLE [dbo].[ReportWriter] DROP CONSTRAINT [FK__ReportWri__Deliv__607251E5];


GO
PRINT N'Dropping [dbo].[FK__Deliverab__Deliv__498EEC8D]...';


GO
ALTER TABLE [dbo].[Deliverables] DROP CONSTRAINT [FK__Deliverab__Deliv__498EEC8D];


GO
PRINT N'Dropping [dbo].[FK__ReportWri__FileI__6166761E]...';


GO
ALTER TABLE [dbo].[ReportWriter] DROP CONSTRAINT [FK__ReportWri__FileI__6166761E];


GO
PRINT N'Dropping [dbo].[FK__ReportWri__FileT__625A9A57]...';


GO
ALTER TABLE [dbo].[ReportWriter] DROP CONSTRAINT [FK__ReportWri__FileT__625A9A57];


GO
PRINT N'Dropping [dbo].[FK__Frequency__Frequ__55F4C372]...';


GO
ALTER TABLE [dbo].[Frequency] DROP CONSTRAINT [FK__Frequency__Frequ__55F4C372];


GO
PRINT N'Dropping [dbo].[FK__Deliverab__Frequ__4A8310C6]...';


GO
ALTER TABLE [dbo].[Deliverables] DROP CONSTRAINT [FK__Deliverab__Frequ__4A8310C6];


GO
PRINT N'Dropping [dbo].[FK_dbo.Territories_dbo.Groups_RootGroup_id]...';


GO
ALTER TABLE [dbo].[Territories] DROP CONSTRAINT [FK_dbo.Territories_dbo.Groups_RootGroup_id];


GO
PRINT N'Dropping [dbo].[FK_dbo.Groups_dbo.Groups_Parent_Id]...';


GO
ALTER TABLE [dbo].[Groups] DROP CONSTRAINT [FK_dbo.Groups_dbo.Groups_Parent_Id];


GO
PRINT N'Dropping [dbo].[FK_dbo.Levels_dbo.Territories_TerritoryId]...';


GO
ALTER TABLE [dbo].[Levels] DROP CONSTRAINT [FK_dbo.Levels_dbo.Territories_TerritoryId];


GO
PRINT N'Dropping [dbo].[FK_dbo.Territories_dbo.Levels_RootLevel_Id]...';


GO
ALTER TABLE [dbo].[Territories] DROP CONSTRAINT [FK_dbo.Territories_dbo.Levels_RootLevel_Id];


GO
PRINT N'Dropping [dbo].[FK__PackMarke__Marke__5F7E2DAC]...';


GO
ALTER TABLE [dbo].[PackMarketBases] DROP CONSTRAINT [FK__PackMarke__Marke__5F7E2DAC];


GO
PRINT N'Dropping [dbo].[FK__Subscript__Marke__6BE40491]...';


GO
ALTER TABLE [dbo].[SubscriptionMarket] DROP CONSTRAINT [FK__Subscript__Marke__6BE40491];


GO
PRINT N'Dropping [copy].[FK__Subscript__Marke__6BE40491]...';


GO
ALTER TABLE [copy].[SubscriptionMarket] DROP CONSTRAINT [FK__Subscript__Marke__6BE40491];


GO
PRINT N'Dropping [dbo].[FK_dbo.MarketDefinitionBaseMaps_dbo.MarketBases_MarketBaseId]...';


GO
ALTER TABLE [dbo].[MarketDefinitionBaseMaps] DROP CONSTRAINT [FK_dbo.MarketDefinitionBaseMaps_dbo.MarketBases_MarketBaseId];


GO
PRINT N'Dropping [dbo].[FK_dbo.MarketDefinitionBaseMaps_dbo.MarketDefinitions_MarketDefinitionId]...';


GO
ALTER TABLE [dbo].[MarketDefinitionBaseMaps] DROP CONSTRAINT [FK_dbo.MarketDefinitionBaseMaps_dbo.MarketDefinitions_MarketDefinitionId];


GO
PRINT N'Dropping [dbo].[FK_dbo.MarketDefinitionPacks_dbo.MarketDefinitions_MarketDefinitionId]...';


GO
ALTER TABLE [dbo].[MarketDefinitionPacks] DROP CONSTRAINT [FK_dbo.MarketDefinitionPacks_dbo.MarketDefinitions_MarketDefinitionId];


GO
PRINT N'Dropping [dbo].[FK__DeliveryM__Marke__51300E55]...';


GO
ALTER TABLE [dbo].[DeliveryMarket] DROP CONSTRAINT [FK__DeliveryM__Marke__51300E55];


GO
PRINT N'Dropping [dbo].[FK_ReportSection_UserType]...';


GO
ALTER TABLE [dbo].[ReportSection] DROP CONSTRAINT [FK_ReportSection_UserType];


GO
PRINT N'Dropping [dbo].[FK__RoleActio__RoleI__65370702]...';


GO
ALTER TABLE [dbo].[RoleAction] DROP CONSTRAINT [FK__RoleActio__RoleI__65370702];


GO
PRINT N'Dropping [dbo].[FK__UserRole__RoleId__73852659]...';


GO
ALTER TABLE [dbo].[UserRole] DROP CONSTRAINT [FK__UserRole__RoleId__73852659];


GO
PRINT N'Dropping [dbo].[fk_section_module]...';


GO
ALTER TABLE [dbo].[Module] DROP CONSTRAINT [fk_section_module];


GO
PRINT N'Dropping [dbo].[FK__Subscript__Servi__690797E6]...';


GO
ALTER TABLE [dbo].[Subscription] DROP CONSTRAINT [FK__Subscript__Servi__690797E6];


GO
PRINT N'Dropping [dbo].[FK__Subscript__Servi__69FBBC1F]...';


GO
ALTER TABLE [dbo].[Subscription] DROP CONSTRAINT [FK__Subscript__Servi__69FBBC1F];


GO
PRINT N'Dropping [dbo].[FK__Subscript__Sourc__6AEFE058]...';


GO
ALTER TABLE [dbo].[Subscription] DROP CONSTRAINT [FK__Subscript__Sourc__6AEFE058];


GO
PRINT N'Dropping [dbo].[FK__Subscript__Subsc__6CD828CA]...';


GO
ALTER TABLE [dbo].[SubscriptionMarket] DROP CONSTRAINT [FK__Subscript__Subsc__6CD828CA];


GO
PRINT N'Dropping [dbo].[FK__Deliverab__Subsc__4D5F7D71]...';


GO
ALTER TABLE [dbo].[Deliverables] DROP CONSTRAINT [FK__Deliverab__Subsc__4D5F7D71];


GO
PRINT N'Dropping [dbo].[FK_dbo.OutletBrickAllocations_dbo.Territories_TerritoryId]...';


GO
ALTER TABLE [dbo].[OutletBrickAllocations_old] DROP CONSTRAINT [FK_dbo.OutletBrickAllocations_dbo.Territories_TerritoryId];


GO
PRINT N'Dropping [dbo].[FK_Territories_Territories]...';


GO
ALTER TABLE [dbo].[Territories] DROP CONSTRAINT [FK_Territories_Territories];


GO
PRINT N'Dropping [dbo].[FK__DeliveryT__Terri__45BE5BA9]...';


GO
ALTER TABLE [dbo].[DeliveryTerritory] DROP CONSTRAINT [FK__DeliveryT__Terri__45BE5BA9];


GO
PRINT N'Dropping [dbo].[FK_dbo.OutletBrickAllocations1_dbo.Territories_TerritoryId]...';


GO
ALTER TABLE [dbo].[OutletBrickAllocations] DROP CONSTRAINT [FK_dbo.OutletBrickAllocations1_dbo.Territories_TerritoryId];


GO
PRINT N'Dropping [copy].[FK__Subscript__Subsc__6CD828CA]...';


GO
ALTER TABLE [copy].[SubscriptionMarket] DROP CONSTRAINT [FK__Subscript__Subsc__6CD828CA];


GO
PRINT N'Dropping [dbo].[QCDataRefresh]...';


GO
DROP TABLE [dbo].[QCDataRefresh];


GO
PRINT N'Dropping [ECPUser_Read]...';


GO
DROP USER [ECPUser_Read];


GO
PRINT N'Creating [ECPUser_Read]...';


GO
CREATE USER [ECPUser_Read] WITHOUT LOGIN;


GO
REVOKE CONNECT TO [ECPUser_Read];


GO
PRINT N'Creating [ECPUser]...';


GO
CREATE USER [ECPUser] WITHOUT LOGIN;


GO
REVOKE CONNECT TO [ECPUser];


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_datareader', @membername = N'ECPUser_Read';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_owner', @membername = N'ECPUser';


GO
PRINT N'Creating [group]...';


GO
CREATE SCHEMA [group]
    AUTHORIZATION [ECPUser];


GO
PRINT N'Creating [dbo].[TYP_MarketDefinitionPacks]...';


GO
CREATE TYPE [dbo].[TYP_MarketDefinitionPacks] AS TABLE (
    [Pack]               NVARCHAR (500) NULL,
    [MarketBase]         NVARCHAR (500) NULL,
    [MarketBaseId]       NVARCHAR (500) NULL,
    [GroupNumber]        NVARCHAR (500) NULL,
    [GroupName]          NVARCHAR (500) NULL,
    [Factor]             NVARCHAR (500) NULL,
    [PFC]                NVARCHAR (500) NULL,
    [Manufacturer]       NVARCHAR (500) NULL,
    [ATC4]               NVARCHAR (500) NULL,
    [NEC4]               NVARCHAR (500) NULL,
    [DataRefreshType]    NVARCHAR (500) NULL,
    [StateStatus]        NVARCHAR (500) NULL,
    [MarketDefinitionId] INT            NOT NULL,
    [Alignment]          NVARCHAR (500) NULL,
    [Product]            NVARCHAR (500) NULL,
    [ChangeFlag]         NCHAR (1)      NULL,
    [Molecule]           NVARCHAR (MAX) NULL);


GO
PRINT N'Creating [dbo].[TYP_OutletBrickAllocations]...';


GO
CREATE TYPE [dbo].[TYP_OutletBrickAllocations] AS TABLE (
    [NodeCode]               NVARCHAR (50)  NULL,
    [NodeName]               NVARCHAR (300) NULL,
    [Address]                NVARCHAR (500) NULL,
    [BrickOutletCode]        NVARCHAR (50)  NULL,
    [BrickOutletName]        NVARCHAR (500) NULL,
    [LevelName]              NVARCHAR (500) NULL,
    [CustomGroupNumberSpace] NVARCHAR (500) NULL,
    [Type]                   NVARCHAR (50)  NULL,
    [BannerGroup]            VARCHAR (500)  NULL,
    [State]                  VARCHAR (40)   NULL,
    [Panel]                  CHAR (1)       NULL,
    [BrickOutletLocation]    CHAR (30)      NULL,
    [TerritoryId]            INT            NOT NULL);


GO
PRINT N'Creating [dbo].[TYPDimensionBaseMap]...';


GO
CREATE TYPE [dbo].[TYPDimensionBaseMap] AS TABLE (
    [DimensionId]  INT NULL,
    [MarketbaseId] INT NULL);


GO
PRINT N'Creating [dbo].[typGroupView]...';


GO
CREATE TYPE [dbo].[typGroupView] AS TABLE (
    [Id]                 INT           NULL,
    [AttributeId]        INT           NULL,
    [ParentId]           INT           NULL,
    [GroupId]            INT           NULL,
    [IsAttribute]        BIT           NULL,
    [GroupName]          NVARCHAR (50) NULL,
    [AttributeName]      NVARCHAR (50) NULL,
    [OrderNo]            INT           NULL,
    [MarketDefinitionId] INT           NULL);


GO
PRINT N'Creating [dbo].[typMarketGroupFilter]...';


GO
CREATE TYPE [dbo].[typMarketGroupFilter] AS TABLE (
    [Id]                 INT            NULL,
    [Name]               NVARCHAR (100) NULL,
    [Criteria]           NVARCHAR (80)  NULL,
    [Values]             NVARCHAR (200) NULL,
    [IsEnabled]          BIT            NULL,
    [IsAttribute]        BIT            NULL,
    [GroupId]            INT            NULL,
    [AttributeId]        INT            NULL,
    [MarketDefinitionId] INT            NULL);


GO
PRINT N'Creating [dbo].[typMarketGroupPack]...';


GO
CREATE TYPE [dbo].[typMarketGroupPack] AS TABLE (
    [Id]                 INT           NULL,
    [PFC]                NVARCHAR (50) NULL,
    [GroupId]            INT           NULL,
    [MarketDefinitionId] INT           NULL);


GO
PRINT N'Starting rebuilding table [dbo].[AccessPrivilege]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_AccessPrivilege] (
    [AccessPrivilegeID]   INT           IDENTITY (1, 1) NOT NULL,
    [AccessPrivilegeName] NVARCHAR (50) NULL,
    [IsActive]            BIT           NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK__AccessPr__6ABF7571256908031] PRIMARY KEY CLUSTERED ([AccessPrivilegeID] ASC) WITH (FILLFACTOR = 1)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[AccessPrivilege])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_AccessPrivilege] ON;
        INSERT INTO [dbo].[tmp_ms_xx_AccessPrivilege] ([AccessPrivilegeID], [AccessPrivilegeName], [IsActive])
        SELECT   [AccessPrivilegeID],
                 [AccessPrivilegeName],
                 [IsActive]
        FROM     [dbo].[AccessPrivilege]
        ORDER BY [AccessPrivilegeID] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_AccessPrivilege] OFF;
    END

DROP TABLE [dbo].[AccessPrivilege];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_AccessPrivilege]', N'AccessPrivilege';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK__AccessPr__6ABF7571256908031]', N'PK__AccessPr__6ABF757125690803', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Action]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Action] (
    [ActionID]   INT            IDENTITY (1, 1) NOT NULL,
    [ActionName] NVARCHAR (300) NULL,
    [IsActive]   BIT            NOT NULL,
    [ModuleID]   INT            NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK__Action__FFE3F4B969D4400A1] PRIMARY KEY CLUSTERED ([ActionID] ASC) WITH (FILLFACTOR = 1)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Action])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Action] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Action] ([ActionID], [ActionName], [IsActive], [ModuleID])
        SELECT   [ActionID],
                 [ActionName],
                 [IsActive],
                 [ModuleID]
        FROM     [dbo].[Action]
        ORDER BY [ActionID] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Action] OFF;
    END

DROP TABLE [dbo].[Action];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Action]', N'Action';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK__Action__FFE3F4B969D4400A1]', N'PK__Action__FFE3F4B969D4400A', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[AdditionalFilters]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_AdditionalFilters] (
    [Id]                        INT            IDENTITY (1, 1) NOT NULL,
    [Name]                      NVARCHAR (100) NULL,
    [Criteria]                  NVARCHAR (80)  NULL,
    [Values]                    NVARCHAR (200) NULL,
    [IsEnabled]                 BIT            NOT NULL,
    [MarketDefinitionBaseMapId] INT            NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_dbo.AdditionalFilters1] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (FILLFACTOR = 1)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[AdditionalFilters])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_AdditionalFilters] ON;
        INSERT INTO [dbo].[tmp_ms_xx_AdditionalFilters] ([Id], [Name], [Criteria], [Values], [IsEnabled], [MarketDefinitionBaseMapId])
        SELECT   [Id],
                 [Name],
                 [Criteria],
                 [Values],
                 [IsEnabled],
                 [MarketDefinitionBaseMapId]
        FROM     [dbo].[AdditionalFilters]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_AdditionalFilters] OFF;
    END

DROP TABLE [dbo].[AdditionalFilters];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_AdditionalFilters]', N'AdditionalFilters';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_dbo.AdditionalFilters1]', N'PK_dbo.AdditionalFilters', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[BaseFilters]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_BaseFilters] (
    [Id]               INT            IDENTITY (1, 1) NOT NULL,
    [Name]             NVARCHAR (100) NULL,
    [Criteria]         NVARCHAR (100) NULL,
    [Values]           NVARCHAR (800) NULL,
    [IsEnabled]        BIT            NOT NULL,
    [MarketBaseId]     INT            NOT NULL,
    [IsRestricted]     BIT            NULL,
    [IsBaseFilterType] BIT            NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_BaseFilters1] PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[BaseFilters])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_BaseFilters] ON;
        INSERT INTO [dbo].[tmp_ms_xx_BaseFilters] ([Id], [Name], [Criteria], [Values], [IsEnabled], [MarketBaseId], [IsRestricted], [IsBaseFilterType])
        SELECT   [Id],
                 [Name],
                 [Criteria],
                 [Values],
                 [IsEnabled],
                 [MarketBaseId],
                 [IsRestricted],
                 [IsBaseFilterType]
        FROM     [dbo].[BaseFilters]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_BaseFilters] OFF;
    END

DROP TABLE [dbo].[BaseFilters];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_BaseFilters]', N'BaseFilters';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_BaseFilters1]', N'PK_BaseFilters', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[CADPages]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_CADPages] (
    [cadPageId]              INT             IDENTITY (1, 1) NOT NULL,
    [cadPageTitle]           NVARCHAR (300)  NULL,
    [cadPageDescription]     NVARCHAR (1000) NULL,
    [cadPagePharmacyFileUrl] NVARCHAR (300)  NULL,
    [cadPageHospitalFileUrl] NVARCHAR (300)  NULL,
    [cadPageCreatedOn]       DATETIME        NULL,
    [cadPageCreatedBy]       NVARCHAR (50)   NULL,
    [cadPageModifiedOn]      DATETIME        NULL,
    [cadPageModifiedBy]      NVARCHAR (50)   NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_dbo.CADPages1] PRIMARY KEY CLUSTERED ([cadPageId] ASC) WITH (FILLFACTOR = 1)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[CADPages])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_CADPages] ON;
        INSERT INTO [dbo].[tmp_ms_xx_CADPages] ([cadPageId], [cadPageTitle], [cadPageDescription], [cadPagePharmacyFileUrl], [cadPageHospitalFileUrl], [cadPageCreatedOn], [cadPageCreatedBy], [cadPageModifiedOn], [cadPageModifiedBy])
        SELECT   [cadPageId],
                 [cadPageTitle],
                 [cadPageDescription],
                 [cadPagePharmacyFileUrl],
                 [cadPageHospitalFileUrl],
                 [cadPageCreatedOn],
                 [cadPageCreatedBy],
                 [cadPageModifiedOn],
                 [cadPageModifiedBy]
        FROM     [dbo].[CADPages]
        ORDER BY [cadPageId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_CADPages] OFF;
    END

DROP TABLE [dbo].[CADPages];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_CADPages]', N'CADPages';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_dbo.CADPages1]', N'PK_dbo.CADPages', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Clients]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Clients] (
    [Id]          INT            IDENTITY (1, 1) NOT NULL,
    [Name]        NVARCHAR (300) NULL,
    [IsMyClient]  BIT            NOT NULL,
    [DivisionOf]  INT            NULL,
    [IRPClientId] INT            NULL,
    [IRPClientNo] INT            NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_dbo.Clients1] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (FILLFACTOR = 1)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Clients])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Clients] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Clients] ([Id], [Name], [IsMyClient], [DivisionOf], [IRPClientId], [IRPClientNo])
        SELECT   [Id],
                 [Name],
                 [IsMyClient],
                 [DivisionOf],
                 [IRPClientId],
                 [IRPClientNo]
        FROM     [dbo].[Clients]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Clients] OFF;
    END

DROP TABLE [dbo].[Clients];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Clients]', N'Clients';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_dbo.Clients1]', N'PK_dbo.Clients', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Country]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Country] (
    [CountryId] INT           IDENTITY (1, 1) NOT NULL,
    [Name]      NVARCHAR (80) NULL,
    [ISOCode]   NVARCHAR (30) NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK__Country__10D1609FA77BC0AD1] PRIMARY KEY CLUSTERED ([CountryId] ASC) WITH (FILLFACTOR = 1)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Country])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Country] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Country] ([CountryId], [Name], [ISOCode])
        SELECT   [CountryId],
                 [Name],
                 [ISOCode]
        FROM     [dbo].[Country]
        ORDER BY [CountryId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Country] OFF;
    END

DROP TABLE [dbo].[Country];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Country]', N'Country';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK__Country__10D1609FA77BC0AD1]', N'PK__Country__10D1609FA77BC0AD', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[DataType]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_DataType] (
    [DataTypeId] INT           IDENTITY (1, 1) NOT NULL,
    [Name]       NVARCHAR (80) NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK__DataType__4382081F57CB4A5F1] PRIMARY KEY CLUSTERED ([DataTypeId] ASC) WITH (FILLFACTOR = 1)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[DataType])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_DataType] ON;
        INSERT INTO [dbo].[tmp_ms_xx_DataType] ([DataTypeId], [Name])
        SELECT   [DataTypeId],
                 [Name]
        FROM     [dbo].[DataType]
        ORDER BY [DataTypeId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_DataType] OFF;
    END

DROP TABLE [dbo].[DataType];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_DataType]', N'DataType';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK__DataType__4382081F57CB4A5F1]', N'PK__DataType__4382081F57CB4A5F', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Altering [dbo].[DeliveryReport]...';


GO
ALTER TABLE [dbo].[DeliveryReport]
    ADD [ReportNo]         INT            NULL,
        [ReportwriterCode] NVARCHAR (20)  NULL,
        [ReportName]       NVARCHAR (100) NULL;


GO
PRINT N'Altering [dbo].[DeliveryReportName]...';


GO
ALTER TABLE [dbo].[DeliveryReportName] ALTER COLUMN [ReportName] VARCHAR (100) NULL;


GO
PRINT N'Starting rebuilding table [dbo].[DeliveryType]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_DeliveryType] (
    [DeliveryTypeId] INT           IDENTITY (1, 1) NOT NULL,
    [Name]           NVARCHAR (80) NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK__Delivery__6B117964B1284DF21] PRIMARY KEY CLUSTERED ([DeliveryTypeId] ASC) WITH (FILLFACTOR = 1)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[DeliveryType])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_DeliveryType] ON;
        INSERT INTO [dbo].[tmp_ms_xx_DeliveryType] ([DeliveryTypeId], [Name])
        SELECT   [DeliveryTypeId],
                 [Name]
        FROM     [dbo].[DeliveryType]
        ORDER BY [DeliveryTypeId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_DeliveryType] OFF;
    END

DROP TABLE [dbo].[DeliveryType];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_DeliveryType]', N'DeliveryType';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK__Delivery__6B117964B1284DF21]', N'PK__Delivery__6B117964B1284DF2', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[File]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_File] (
    [FileId] INT           IDENTITY (1, 1) NOT NULL,
    [Name]   NVARCHAR (80) NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK__File__6F0F98BFC907FC981] PRIMARY KEY CLUSTERED ([FileId] ASC) WITH (FILLFACTOR = 1)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[File])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_File] ON;
        INSERT INTO [dbo].[tmp_ms_xx_File] ([FileId], [Name])
        SELECT   [FileId],
                 [Name]
        FROM     [dbo].[File]
        ORDER BY [FileId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_File] OFF;
    END

DROP TABLE [dbo].[File];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_File]', N'File';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK__File__6F0F98BFC907FC981]', N'PK__File__6F0F98BFC907FC98', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[FileType]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_FileType] (
    [FileTypeId] INT           IDENTITY (1, 1) NOT NULL,
    [Name]       NVARCHAR (20) NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK__FileType__0896759E80A8BCE31] PRIMARY KEY CLUSTERED ([FileTypeId] ASC) WITH (FILLFACTOR = 1)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[FileType])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_FileType] ON;
        INSERT INTO [dbo].[tmp_ms_xx_FileType] ([FileTypeId], [Name])
        SELECT   [FileTypeId],
                 [Name]
        FROM     [dbo].[FileType]
        ORDER BY [FileTypeId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_FileType] OFF;
    END

DROP TABLE [dbo].[FileType];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_FileType]', N'FileType';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK__FileType__0896759E80A8BCE31]', N'PK__FileType__0896759E80A8BCE3', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Frequency]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Frequency] (
    [FrequencyId]     INT            IDENTITY (1, 1) NOT NULL,
    [Name]            NVARCHAR (300) NULL,
    [FrequencyTypeId] INT            NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK__Frequenc__59247498942305101] PRIMARY KEY CLUSTERED ([FrequencyId] ASC) WITH (FILLFACTOR = 1)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Frequency])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Frequency] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Frequency] ([FrequencyId], [Name], [FrequencyTypeId])
        SELECT   [FrequencyId],
                 [Name],
                 [FrequencyTypeId]
        FROM     [dbo].[Frequency]
        ORDER BY [FrequencyId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Frequency] OFF;
    END

DROP TABLE [dbo].[Frequency];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Frequency]', N'Frequency';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK__Frequenc__59247498942305101]', N'PK__Frequenc__5924749894230510', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[FrequencyType]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_FrequencyType] (
    [FrequencyTypeId] INT           IDENTITY (1, 1) NOT NULL,
    [Name]            NVARCHAR (50) NULL,
    [DefaultYears]    NVARCHAR (10) NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK__Frequenc__829BB4BC818021691] PRIMARY KEY CLUSTERED ([FrequencyTypeId] ASC) WITH (FILLFACTOR = 1)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[FrequencyType])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_FrequencyType] ON;
        INSERT INTO [dbo].[tmp_ms_xx_FrequencyType] ([FrequencyTypeId], [Name], [DefaultYears])
        SELECT   [FrequencyTypeId],
                 [Name],
                 [DefaultYears]
        FROM     [dbo].[FrequencyType]
        ORDER BY [FrequencyTypeId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_FrequencyType] OFF;
    END

DROP TABLE [dbo].[FrequencyType];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_FrequencyType]', N'FrequencyType';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK__Frequenc__829BB4BC818021691]', N'PK__Frequenc__829BB4BC81802169', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Groups]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Groups] (
    [Id]                     INT            IDENTITY (1, 1) NOT NULL,
    [Name]                   NVARCHAR (200) NULL,
    [ParentId]               INT            NULL,
    [GroupNumber]            NVARCHAR (20)  NULL,
    [CustomGroupNumber]      NVARCHAR (20)  NULL,
    [IsOrphan]               BIT            NOT NULL,
    [PaddingLeft]            INT            NOT NULL,
    [ParentGroupNumber]      NVARCHAR (20)  NULL,
    [CustomGroupNumberSpace] NVARCHAR (20)  NULL,
    [TerritoryId]            INT            CONSTRAINT [DF_TerritoryId] DEFAULT ((0)) NULL,
    [NewCGN]                 NVARCHAR (50)  NULL,
    [LevelNo]                INT            NULL,
    [IRPItemID]              INT            NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_dbo.Groups1] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (FILLFACTOR = 1)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Groups])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Groups] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Groups] ([Id], [Name], [ParentId], [GroupNumber], [CustomGroupNumber], [IsOrphan], [PaddingLeft], [ParentGroupNumber], [CustomGroupNumberSpace], [TerritoryId], [NewCGN], [LevelNo], [IRPItemID])
        SELECT   [Id],
                 [Name],
                 [ParentId],
                 [GroupNumber],
                 [CustomGroupNumber],
                 [IsOrphan],
                 [PaddingLeft],
                 [ParentGroupNumber],
                 [CustomGroupNumberSpace],
                 [TerritoryId],
                 [NewCGN],
                 [LevelNo],
                 [IRPItemID]
        FROM     [dbo].[Groups]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Groups] OFF;
    END

DROP TABLE [dbo].[Groups];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Groups]', N'Groups';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_dbo.Groups1]', N'PK_dbo.Groups', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[groups2]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_groups2] (
    [id]                INT            IDENTITY (1, 1) NOT NULL,
    [Name]              NVARCHAR (200) NULL,
    [ParentId]          INT            NULL,
    [GroupNumber]       NVARCHAR (20)  NULL,
    [CustomGroupNumber] NVARCHAR (20)  NULL,
    [IsLineHide]        BIT            NOT NULL,
    [PaddingLeft]       INT            NOT NULL,
    [ParentGroupNumber] INT            NULL
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[groups2])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_groups2] ON;
        INSERT INTO [dbo].[tmp_ms_xx_groups2] ([id], [Name], [ParentId], [GroupNumber], [CustomGroupNumber], [IsLineHide], [PaddingLeft], [ParentGroupNumber])
        SELECT [id],
               [Name],
               [ParentId],
               [GroupNumber],
               [CustomGroupNumber],
               [IsLineHide],
               [PaddingLeft],
               [ParentGroupNumber]
        FROM   [dbo].[groups2];
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_groups2] OFF;
    END

DROP TABLE [dbo].[groups2];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_groups2]', N'groups2';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Altering [dbo].[IRPQCMarketExcludedPacks]...';


GO
ALTER TABLE [dbo].[IRPQCMarketExcludedPacks]
    ADD [Pack_Description] NVARCHAR (255) NULL;


GO
PRINT N'Starting rebuilding table [dbo].[Levels]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Levels] (
    [Id]              INT            IDENTITY (1, 1) NOT NULL,
    [Name]            NVARCHAR (200) NULL,
    [LevelNumber]     INT            NOT NULL,
    [LevelIDLength]   INT            NOT NULL,
    [LevelColor]      NVARCHAR (20)  NULL,
    [BackgroundColor] NVARCHAR (20)  NULL,
    [TerritoryId]     INT            NOT NULL,
    [IRPLevelID]      INT            NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_dbo.Levels1] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (FILLFACTOR = 1)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Levels])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Levels] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Levels] ([Id], [Name], [LevelNumber], [LevelIDLength], [LevelColor], [BackgroundColor], [TerritoryId], [IRPLevelID])
        SELECT   [Id],
                 [Name],
                 [LevelNumber],
                 [LevelIDLength],
                 [LevelColor],
                 [BackgroundColor],
                 [TerritoryId],
                 [IRPLevelID]
        FROM     [dbo].[Levels]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Levels] OFF;
    END

DROP TABLE [dbo].[Levels];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Levels]', N'Levels';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_dbo.Levels1]', N'PK_dbo.Levels', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Listings]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Listings] (
    [listingId]              INT             IDENTITY (1, 1) NOT NULL,
    [listingTitle]           NVARCHAR (300)  NULL,
    [listingDescription]     NVARCHAR (1000) NULL,
    [listingPharmacyFileUrl] NVARCHAR (300)  NULL,
    [listingHospitalFileUrl] NVARCHAR (50)   NULL,
    [listingCreatedOn]       DATETIME        NULL,
    [listingCreatedBy]       NVARCHAR (50)   NULL,
    [listingModifiedOn]      DATETIME        NULL,
    [listingModifiedBy]      NVARCHAR (50)   NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_dbo.Listings1] PRIMARY KEY CLUSTERED ([listingId] ASC) WITH (FILLFACTOR = 1)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Listings])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Listings] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Listings] ([listingId], [listingTitle], [listingDescription], [listingPharmacyFileUrl], [listingHospitalFileUrl], [listingCreatedOn], [listingCreatedBy], [listingModifiedOn], [listingModifiedBy])
        SELECT   [listingId],
                 [listingTitle],
                 [listingDescription],
                 [listingPharmacyFileUrl],
                 [listingHospitalFileUrl],
                 [listingCreatedOn],
                 [listingCreatedBy],
                 [listingModifiedOn],
                 [listingModifiedBy]
        FROM     [dbo].[Listings]
        ORDER BY [listingId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Listings] OFF;
    END

DROP TABLE [dbo].[Listings];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Listings]', N'Listings';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_dbo.Listings1]', N'PK_dbo.Listings', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Altering [dbo].[LogMarketDataRefresh]...';


GO
ALTER TABLE [dbo].[LogMarketDataRefresh] ALTER COLUMN [StepFailed] NVARCHAR (MAX) NULL;


GO
PRINT N'Altering [dbo].[Maintenance_Calendar_Staging]...';


GO
ALTER TABLE [dbo].[Maintenance_Calendar_Staging] DROP COLUMN [FileDate], COLUMN [FromFile];


GO
PRINT N'Starting rebuilding table [dbo].[MarketBases]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_MarketBases] (
    [Id]           INT            IDENTITY (1, 1) NOT NULL,
    [Name]         NVARCHAR (200) NULL,
    [Description]  NVARCHAR (200) NULL,
    [Suffix]       NVARCHAR (30)  NULL,
    [DurationTo]   NVARCHAR (20)  NULL,
    [DurationFrom] NVARCHAR (20)  NULL,
    [GuiId]        NVARCHAR (80)  NULL,
    [BaseType]     NVARCHAR (50)  NULL,
    [LastSaved]    DATETIME       NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_dbo.MarketBases1] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (FILLFACTOR = 1)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[MarketBases])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_MarketBases] ON;
        INSERT INTO [dbo].[tmp_ms_xx_MarketBases] ([Id], [Name], [Description], [Suffix], [DurationTo], [DurationFrom], [GuiId], [BaseType])
        SELECT   [Id],
                 [Name],
                 [Description],
                 [Suffix],
                 [DurationTo],
                 [DurationFrom],
                 [GuiId],
                 [BaseType]
        FROM     [dbo].[MarketBases]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_MarketBases] OFF;
    END

DROP TABLE [dbo].[MarketBases];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_MarketBases]', N'MarketBases';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_dbo.MarketBases1]', N'PK_dbo.MarketBases', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[MarketDefinitionBaseMaps]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_MarketDefinitionBaseMaps] (
    [Id]                 INT            IDENTITY (1, 1) NOT NULL,
    [Name]               NVARCHAR (200) NULL,
    [MarketBaseId]       INT            NOT NULL,
    [DataRefreshType]    NVARCHAR (20)  NULL,
    [MarketDefinitionId] INT            NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_dbo.MarketDefinitionBaseMaps1] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (FILLFACTOR = 1)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[MarketDefinitionBaseMaps])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_MarketDefinitionBaseMaps] ON;
        INSERT INTO [dbo].[tmp_ms_xx_MarketDefinitionBaseMaps] ([Id], [Name], [MarketBaseId], [DataRefreshType], [MarketDefinitionId])
        SELECT   [Id],
                 [Name],
                 [MarketBaseId],
                 [DataRefreshType],
                 [MarketDefinitionId]
        FROM     [dbo].[MarketDefinitionBaseMaps]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_MarketDefinitionBaseMaps] OFF;
    END

DROP TABLE [dbo].[MarketDefinitionBaseMaps];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_MarketDefinitionBaseMaps]', N'MarketDefinitionBaseMaps';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_dbo.MarketDefinitionBaseMaps1]', N'PK_dbo.MarketDefinitionBaseMaps', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[MarketDefinitionPacks]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_MarketDefinitionPacks] (
    [Id]                 INT             IDENTITY (1, 1) NOT NULL,
    [Pack]               NVARCHAR (500)  NULL,
    [MarketBase]         NVARCHAR (MAX)  NULL,
    [MarketBaseId]       NVARCHAR (MAX)  NULL,
    [GroupNumber]        NVARCHAR (50)   NULL,
    [GroupName]          NVARCHAR (200)  NULL,
    [Factor]             NVARCHAR (20)   NULL,
    [PFC]                NVARCHAR (20)   NULL,
    [Manufacturer]       NVARCHAR (200)  NULL,
    [ATC4]               NVARCHAR (10)   NULL,
    [NEC4]               NVARCHAR (10)   NULL,
    [DataRefreshType]    NVARCHAR (20)   NULL,
    [StateStatus]        NVARCHAR (20)   NULL,
    [MarketDefinitionId] INT             NOT NULL,
    [Alignment]          NVARCHAR (20)   NULL,
    [Product]            NVARCHAR (200)  NULL,
    [ChangeFlag]         NCHAR (1)       NULL,
    [Molecule]           NVARCHAR (3000) NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_dbo.MarketDefinitionPacks1] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (FILLFACTOR = 1)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[MarketDefinitionPacks])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_MarketDefinitionPacks] ON;
        INSERT INTO [dbo].[tmp_ms_xx_MarketDefinitionPacks] ([Id], [Pack], [MarketBase], [MarketBaseId], [GroupNumber], [GroupName], [Factor], [PFC], [Manufacturer], [ATC4], [NEC4], [DataRefreshType], [StateStatus], [MarketDefinitionId], [Alignment], [Product], [ChangeFlag], [Molecule])
        SELECT   [Id],
                 [Pack],
                 [MarketBase],
                 [MarketBaseId],
                 [GroupNumber],
                 [GroupName],
                 [Factor],
                 [PFC],
                 [Manufacturer],
                 [ATC4],
                 [NEC4],
                 [DataRefreshType],
                 [StateStatus],
                 [MarketDefinitionId],
                 [Alignment],
                 [Product],
                 [ChangeFlag],
                 [Molecule]
        FROM     [dbo].[MarketDefinitionPacks]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_MarketDefinitionPacks] OFF;
    END

DROP TABLE [dbo].[MarketDefinitionPacks];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_MarketDefinitionPacks]', N'MarketDefinitionPacks';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_dbo.MarketDefinitionPacks1]', N'PK_dbo.MarketDefinitionPacks', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[MarketDefinitionPacks].[MktDefnpacksIndx]...';


GO
CREATE NONCLUSTERED INDEX [MktDefnpacksIndx]
    ON [dbo].[MarketDefinitionPacks]([MarketDefinitionId] ASC)
    INCLUDE([GroupNumber], [GroupName], [Factor], [PFC]);


GO
PRINT N'Starting rebuilding table [dbo].[MarketDefinitions]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_MarketDefinitions] (
    [Id]          INT            IDENTITY (1, 1) NOT NULL,
    [Name]        NVARCHAR (500) NULL,
    [Description] NVARCHAR (800) NULL,
    [ClientId]    INT            NOT NULL,
    [GuiId]       NVARCHAR (80)  NULL,
    [DimensionId] INT            NULL,
    [LastSaved]   DATETIME       NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_dbo.MarketDefinitions1] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (FILLFACTOR = 1)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[MarketDefinitions])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_MarketDefinitions] ON;
        INSERT INTO [dbo].[tmp_ms_xx_MarketDefinitions] ([Id], [Name], [Description], [ClientId], [GuiId], [DimensionId])
        SELECT   [Id],
                 [Name],
                 [Description],
                 [ClientId],
                 [GuiId],
                 [DimensionId]
        FROM     [dbo].[MarketDefinitions]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_MarketDefinitions] OFF;
    END

DROP TABLE [dbo].[MarketDefinitions];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_MarketDefinitions]', N'MarketDefinitions';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_dbo.MarketDefinitions1]', N'PK_dbo.MarketDefinitions', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[MonthlyDataSummaries]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_MonthlyDataSummaries] (
    [monthlyDataSummaryId]          INT             IDENTITY (1, 1) NOT NULL,
    [monthlyDataSummaryTitle]       NVARCHAR (300)  NULL,
    [monthlyDataSummaryDescription] NVARCHAR (1000) NULL,
    [monthlyDataSummaryFileUrl]     NVARCHAR (300)  NULL,
    [monthlyDataSummaryCreatedOn]   DATETIME        NULL,
    [monthlyDataSummaryCreatedBy]   NVARCHAR (50)   NULL,
    [monthlyDataSummaryModifiedOn]  DATETIME        NULL,
    [monthlyDataSummaryModifiedBy]  NVARCHAR (50)   NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_dbo.MonthlyDataSummaries1] PRIMARY KEY CLUSTERED ([monthlyDataSummaryId] ASC) WITH (FILLFACTOR = 1)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[MonthlyDataSummaries])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_MonthlyDataSummaries] ON;
        INSERT INTO [dbo].[tmp_ms_xx_MonthlyDataSummaries] ([monthlyDataSummaryId], [monthlyDataSummaryTitle], [monthlyDataSummaryDescription], [monthlyDataSummaryFileUrl], [monthlyDataSummaryCreatedOn], [monthlyDataSummaryCreatedBy], [monthlyDataSummaryModifiedOn], [monthlyDataSummaryModifiedBy])
        SELECT   [monthlyDataSummaryId],
                 [monthlyDataSummaryTitle],
                 [monthlyDataSummaryDescription],
                 [monthlyDataSummaryFileUrl],
                 [monthlyDataSummaryCreatedOn],
                 [monthlyDataSummaryCreatedBy],
                 [monthlyDataSummaryModifiedOn],
                 [monthlyDataSummaryModifiedBy]
        FROM     [dbo].[MonthlyDataSummaries]
        ORDER BY [monthlyDataSummaryId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_MonthlyDataSummaries] OFF;
    END

DROP TABLE [dbo].[MonthlyDataSummaries];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_MonthlyDataSummaries]', N'MonthlyDataSummaries';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_dbo.MonthlyDataSummaries1]', N'PK_dbo.MonthlyDataSummaries', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[MonthlyNewproducts]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_MonthlyNewproducts] (
    [monthlyNewProductId]          INT             IDENTITY (1, 1) NOT NULL,
    [monthlyNewProductTitle]       NVARCHAR (300)  NULL,
    [monthlyNewProductDescription] NVARCHAR (1000) NULL,
    [monthlyNewProductFileUrl]     NVARCHAR (300)  NULL,
    [monthlyNewProductCreatedOn]   DATETIME        NULL,
    [monthlyNewProductCreatedBy]   NVARCHAR (50)   NULL,
    [monthlyNewProductModifiedOn]  DATETIME        NULL,
    [monthlyNewProductModifiedBy]  NVARCHAR (50)   NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_dbo.MonthlyNewproducts1] PRIMARY KEY CLUSTERED ([monthlyNewProductId] ASC) WITH (FILLFACTOR = 1)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[MonthlyNewproducts])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_MonthlyNewproducts] ON;
        INSERT INTO [dbo].[tmp_ms_xx_MonthlyNewproducts] ([monthlyNewProductId], [monthlyNewProductTitle], [monthlyNewProductDescription], [monthlyNewProductFileUrl], [monthlyNewProductCreatedOn], [monthlyNewProductCreatedBy], [monthlyNewProductModifiedOn], [monthlyNewProductModifiedBy])
        SELECT   [monthlyNewProductId],
                 [monthlyNewProductTitle],
                 [monthlyNewProductDescription],
                 [monthlyNewProductFileUrl],
                 [monthlyNewProductCreatedOn],
                 [monthlyNewProductCreatedBy],
                 [monthlyNewProductModifiedOn],
                 [monthlyNewProductModifiedBy]
        FROM     [dbo].[MonthlyNewproducts]
        ORDER BY [monthlyNewProductId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_MonthlyNewproducts] OFF;
    END

DROP TABLE [dbo].[MonthlyNewproducts];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_MonthlyNewproducts]', N'MonthlyNewproducts';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_dbo.MonthlyNewproducts1]', N'PK_dbo.MonthlyNewproducts', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[NewsAlerts]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_NewsAlerts] (
    [newsAlertId]          INT             IDENTITY (1, 1) NOT NULL,
    [newsAlertTitle]       NVARCHAR (300)  NULL,
    [newsAlertDescription] NVARCHAR (1000) NULL,
    [newsAlertImageUrl]    NVARCHAR (300)  NULL,
    [newsAlertAltImage]    NVARCHAR (MAX)  NULL,
    [newsAlertCreatedOn]   DATETIME        NULL,
    [newsAlertCreatedBy]   NVARCHAR (50)   NULL,
    [newsAlertModifiedOn]  DATETIME        NULL,
    [newsAlertModifiedBy]  NVARCHAR (50)   NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_dbo.NewsAlerts1] PRIMARY KEY CLUSTERED ([newsAlertId] ASC) WITH (FILLFACTOR = 1)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[NewsAlerts])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_NewsAlerts] ON;
        INSERT INTO [dbo].[tmp_ms_xx_NewsAlerts] ([newsAlertId], [newsAlertTitle], [newsAlertDescription], [newsAlertImageUrl], [newsAlertAltImage], [newsAlertCreatedOn], [newsAlertCreatedBy], [newsAlertModifiedOn], [newsAlertModifiedBy])
        SELECT   [newsAlertId],
                 [newsAlertTitle],
                 [newsAlertDescription],
                 [newsAlertImageUrl],
                 [newsAlertAltImage],
                 [newsAlertCreatedOn],
                 [newsAlertCreatedBy],
                 [newsAlertModifiedOn],
                 [newsAlertModifiedBy]
        FROM     [dbo].[NewsAlerts]
        ORDER BY [newsAlertId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_NewsAlerts] OFF;
    END

DROP TABLE [dbo].[NewsAlerts];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_NewsAlerts]', N'NewsAlerts';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_dbo.NewsAlerts1]', N'PK_dbo.NewsAlerts', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[PopularLinks]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_PopularLinks] (
    [popularLinkId]           INT             IDENTITY (1, 1) NOT NULL,
    [popularLinkTitle]        NVARCHAR (300)  NULL,
    [popularLinkDescription]  NVARCHAR (1000) NULL,
    [popularLinkDisplayOrder] SMALLINT        NOT NULL,
    [popularLinkCreatedOn]    SMALLDATETIME   NULL,
    [popularLinkCreatedBy]    NVARCHAR (50)   NULL,
    [popularLinkModifiedOn]   SMALLDATETIME   NULL,
    [popularLinkModifiedBy]   NVARCHAR (50)   NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_PopularLinks1] PRIMARY KEY CLUSTERED ([popularLinkId] ASC) WITH (FILLFACTOR = 1)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[PopularLinks])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_PopularLinks] ON;
        INSERT INTO [dbo].[tmp_ms_xx_PopularLinks] ([popularLinkId], [popularLinkTitle], [popularLinkDescription], [popularLinkDisplayOrder], [popularLinkCreatedOn], [popularLinkCreatedBy], [popularLinkModifiedOn], [popularLinkModifiedBy])
        SELECT   [popularLinkId],
                 [popularLinkTitle],
                 [popularLinkDescription],
                 [popularLinkDisplayOrder],
                 [popularLinkCreatedOn],
                 [popularLinkCreatedBy],
                 [popularLinkModifiedOn],
                 [popularLinkModifiedBy]
        FROM     [dbo].[PopularLinks]
        ORDER BY [popularLinkId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_PopularLinks] OFF;
    END

DROP TABLE [dbo].[PopularLinks];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_PopularLinks]', N'PopularLinks';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_PopularLinks1]', N'PK_PopularLinks', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[QCDataRefresh]...';


GO
CREATE TABLE [dbo].[QCDataRefresh] (
    [change_flag] VARCHAR (1) NULL,
    [Count]       INT         NULL,
    [Time]        DATETIME    NOT NULL
);


GO
PRINT N'Altering [dbo].[ReportFieldList]...';


GO
ALTER TABLE [dbo].[ReportFieldList]
    ADD [FieldType] VARCHAR (30) NULL;


GO
PRINT N'Starting rebuilding table [dbo].[ReportSection]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_ReportSection] (
    [ReportSectionID]   INT          NOT NULL,
    [ReportSectionName] VARCHAR (50) NOT NULL,
    [UserTypeID]        INT          NULL
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[ReportSection])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_ReportSection] ([ReportSectionID], [ReportSectionName], [UserTypeID])
        SELECT [ReportSectionID],
               [ReportSectionName],
               [UserTypeID]
        FROM   [dbo].[ReportSection];
    END

DROP TABLE [dbo].[ReportSection];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_ReportSection]', N'ReportSection';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Restriction]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Restriction] (
    [RestrictionId] INT            IDENTITY (1, 1) NOT NULL,
    [Name]          NVARCHAR (200) NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK__Restrict__529D86BA812467851] PRIMARY KEY CLUSTERED ([RestrictionId] ASC) WITH (FILLFACTOR = 1)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Restriction])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Restriction] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Restriction] ([RestrictionId], [Name])
        SELECT   [RestrictionId],
                 [Name]
        FROM     [dbo].[Restriction]
        ORDER BY [RestrictionId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Restriction] OFF;
    END

DROP TABLE [dbo].[Restriction];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Restriction]', N'Restriction';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK__Restrict__529D86BA812467851]', N'PK__Restrict__529D86BA81246785', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Role]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Role] (
    [RoleID]     INT           IDENTITY (1, 1) NOT NULL,
    [RoleName]   NVARCHAR (80) NULL,
    [IsActive]   BIT           NOT NULL,
    [IsExternal] BIT           DEFAULT ((0)) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK__Role__8AFACE3AA7B59CCE1] PRIMARY KEY CLUSTERED ([RoleID] ASC) WITH (FILLFACTOR = 1)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Role])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Role] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Role] ([RoleID], [RoleName], [IsActive], [IsExternal])
        SELECT   [RoleID],
                 [RoleName],
                 [IsActive],
                 [IsExternal]
        FROM     [dbo].[Role]
        ORDER BY [RoleID] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Role] OFF;
    END

DROP TABLE [dbo].[Role];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Role]', N'Role';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK__Role__8AFACE3AA7B59CCE1]', N'PK__Role__8AFACE3AA7B59CCE', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Section]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Section] (
    [SectionID]   INT            IDENTITY (1, 1) NOT NULL,
    [SectionName] NVARCHAR (150) NULL,
    [IsActive]    BIT            NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK__Section__80EF0892FAE93E661] PRIMARY KEY CLUSTERED ([SectionID] ASC) WITH (FILLFACTOR = 1)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Section])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Section] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Section] ([SectionID], [SectionName], [IsActive])
        SELECT   [SectionID],
                 [SectionName],
                 [IsActive]
        FROM     [dbo].[Section]
        ORDER BY [SectionID] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Section] OFF;
    END

DROP TABLE [dbo].[Section];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Section]', N'Section';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK__Section__80EF0892FAE93E661]', N'PK__Section__80EF0892FAE93E66', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Service]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Service] (
    [ServiceId] INT            IDENTITY (1, 1) NOT NULL,
    [Name]      NVARCHAR (150) NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK__Service__C51BB00A0ABDBAF61] PRIMARY KEY CLUSTERED ([ServiceId] ASC) WITH (FILLFACTOR = 1)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Service])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Service] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Service] ([ServiceId], [Name])
        SELECT   [ServiceId],
                 [Name]
        FROM     [dbo].[Service]
        ORDER BY [ServiceId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Service] OFF;
    END

DROP TABLE [dbo].[Service];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Service]', N'Service';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK__Service__C51BB00A0ABDBAF61]', N'PK__Service__C51BB00A0ABDBAF6', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[ServiceTerritory]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_ServiceTerritory] (
    [ServiceTerritoryId] INT            IDENTITY (1, 1) NOT NULL,
    [TerritoryBase]      NVARCHAR (150) NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK__ServiceT__9E26E799A417F6861] PRIMARY KEY CLUSTERED ([ServiceTerritoryId] ASC) WITH (FILLFACTOR = 1)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[ServiceTerritory])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_ServiceTerritory] ON;
        INSERT INTO [dbo].[tmp_ms_xx_ServiceTerritory] ([ServiceTerritoryId], [TerritoryBase])
        SELECT   [ServiceTerritoryId],
                 [TerritoryBase]
        FROM     [dbo].[ServiceTerritory]
        ORDER BY [ServiceTerritoryId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_ServiceTerritory] OFF;
    END

DROP TABLE [dbo].[ServiceTerritory];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_ServiceTerritory]', N'ServiceTerritory';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK__ServiceT__9E26E799A417F6861]', N'PK__ServiceT__9E26E799A417F686', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Source]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Source] (
    [SourceId] INT           IDENTITY (1, 1) NOT NULL,
    [Name]     NVARCHAR (60) NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK__Source__16E019194AAC17821] PRIMARY KEY CLUSTERED ([SourceId] ASC) WITH (FILLFACTOR = 1)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Source])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Source] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Source] ([SourceId], [Name])
        SELECT   [SourceId],
                 [Name]
        FROM     [dbo].[Source]
        ORDER BY [SourceId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Source] OFF;
    END

DROP TABLE [dbo].[Source];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Source]', N'Source';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK__Source__16E019194AAC17821]', N'PK__Source__16E019194AAC1782', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Subscription]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Subscription] (
    [SubscriptionId]     INT            IDENTITY (1, 1) NOT NULL,
    [Name]               NVARCHAR (200) NULL,
    [ClientId]           INT            NULL,
    [Country]            NVARCHAR (80)  NULL,
    [Service]            NVARCHAR (60)  NULL,
    [Data]               NVARCHAR (80)  NULL,
    [Source]             NVARCHAR (80)  NULL,
    [StartDate]          DATETIME       NULL,
    [EndDate]            DATETIME       NULL,
    [ServiceTerritoryId] INT            NULL,
    [Active]             BIT            NULL,
    [LastModified]       DATETIME       NULL,
    [ModifiedBy]         INT            NULL,
    [CountryId]          INT            NULL,
    [ServiceId]          INT            NULL,
    [DataTypeId]         INT            NULL,
    [SourceId]           INT            NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK__Subscrip__9A2B249DACFF9B1C1] PRIMARY KEY CLUSTERED ([SubscriptionId] ASC) WITH (FILLFACTOR = 1)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Subscription])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Subscription] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Subscription] ([SubscriptionId], [Name], [ClientId], [Country], [Service], [Data], [Source], [StartDate], [EndDate], [ServiceTerritoryId], [Active], [LastModified], [ModifiedBy], [CountryId], [ServiceId], [DataTypeId], [SourceId])
        SELECT   [SubscriptionId],
                 [Name],
                 [ClientId],
                 [Country],
                 [Service],
                 [Data],
                 [Source],
                 [StartDate],
                 [EndDate],
                 [ServiceTerritoryId],
                 [Active],
                 [LastModified],
                 [ModifiedBy],
                 [CountryId],
                 [ServiceId],
                 [DataTypeId],
                 [SourceId]
        FROM     [dbo].[Subscription]
        ORDER BY [SubscriptionId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Subscription] OFF;
    END

DROP TABLE [dbo].[Subscription];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Subscription]', N'Subscription';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK__Subscrip__9A2B249DACFF9B1C1]', N'PK__Subscrip__9A2B249DACFF9B1C', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Altering [dbo].[tblOutlet]...';


GO
ALTER TABLE [dbo].[tblOutlet] ALTER COLUMN [Address] NVARCHAR (500) NULL;


GO
PRINT N'Starting rebuilding table [dbo].[Territories]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Territories] (
    [Id]           INT            IDENTITY (1, 1) NOT NULL,
    [Name]         NVARCHAR (200) NULL,
    [RootGroup_id] INT            NULL,
    [RootLevel_Id] INT            NULL,
    [Client_id]    INT            NULL,
    [IsBrickBased] BIT            NULL,
    [IsUsed]       BIT            NULL,
    [GuiId]        NVARCHAR (60)  NULL,
    [SRA_Client]   NVARCHAR (100) NULL,
    [SRA_Suffix]   NVARCHAR (100) NULL,
    [AD]           NVARCHAR (100) NULL,
    [LD]           NVARCHAR (100) NULL,
    [DimensionID]  INT            NULL,
    [LastSaved]    DATETIME       NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_dbo.Territories1] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (FILLFACTOR = 1)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Territories])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Territories] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Territories] ([Id], [Name], [RootGroup_id], [RootLevel_Id], [Client_id], [IsBrickBased], [IsUsed], [GuiId], [SRA_Client], [SRA_Suffix], [AD], [LD], [DimensionID])
        SELECT   [Id],
                 [Name],
                 [RootGroup_id],
                 [RootLevel_Id],
                 [Client_id],
                 [IsBrickBased],
                 [IsUsed],
                 [GuiId],
                 [SRA_Client],
                 [SRA_Suffix],
                 [AD],
                 [LD],
                 [DimensionID]
        FROM     [dbo].[Territories]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Territories] OFF;
    END

DROP TABLE [dbo].[Territories];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Territories]', N'Territories';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_dbo.Territories1]', N'PK_dbo.Territories', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Altering [IRP].[DimensionBaseMap]...';


GO
ALTER TABLE [IRP].[DimensionBaseMap]
    ADD [Id] INT IDENTITY (1, 1) NOT NULL;


GO
PRINT N'Creating [IRP].[PK_DimensionBaseMap]...';


GO
ALTER TABLE [IRP].[DimensionBaseMap]
    ADD CONSTRAINT [PK_DimensionBaseMap] PRIMARY KEY CLUSTERED ([Id] ASC);


GO
PRINT N'Altering [IRP].[OutletType]...';


GO
ALTER TABLE [IRP].[OutletType] ALTER COLUMN [CompetitorDataLevel] VARCHAR (10) NOT NULL;

ALTER TABLE [IRP].[OutletType] ALTER COLUMN [GroupDescription] VARCHAR (50) NOT NULL;

ALTER TABLE [IRP].[OutletType] ALTER COLUMN [IsBrick] TINYINT NOT NULL;

ALTER TABLE [IRP].[OutletType] ALTER COLUMN [IsVisible] TINYINT NOT NULL;

ALTER TABLE [IRP].[OutletType] ALTER COLUMN [OutletType] VARCHAR (2) NOT NULL;

ALTER TABLE [IRP].[OutletType] ALTER COLUMN [OwnDataLevel] VARCHAR (10) NOT NULL;

ALTER TABLE [IRP].[OutletType] ALTER COLUMN [UniqueDescription] VARCHAR (50) NOT NULL;


GO
PRINT N'Creating [dbo].[AdditionalFilter_History]...';


GO
CREATE TABLE [dbo].[AdditionalFilter_History] (
    [Id]                         INT            IDENTITY (1, 1) NOT NULL,
    [MarketDefBaseMap_HistoryId] INT            NOT NULL,
    [MarketDefVersion]           INT            NOT NULL,
    [Name]                       NVARCHAR (MAX) NULL,
    [Criteria]                   NVARCHAR (MAX) NULL,
    [Values]                     NVARCHAR (MAX) NULL,
    [IsEnabled]                  BIT            NOT NULL,
    CONSTRAINT [PK_AdditionalFilter_History] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[AU9_CLIENT_TERR_TEMP]...';


GO
CREATE TABLE [dbo].[AU9_CLIENT_TERR_TEMP] (
    [CLIENT_TERR_ID]       BIGINT       NULL,
    [CLIENT_TERR_VERS_NBR] INT          NULL,
    [OTLT_CD]              VARCHAR (30) NULL,
    [LVL_1_TERR_CD]        VARCHAR (30) NULL,
    [LVL_1_TERR_NM]        VARCHAR (50) NULL,
    [LVL_2_TERR_CD]        VARCHAR (30) NULL,
    [LVL_2_TERR_NM]        VARCHAR (50) NULL,
    [LVL_3_TERR_CD]        VARCHAR (30) NULL,
    [LVL_3_TERR_NM]        VARCHAR (50) NULL,
    [LVL_4_TERR_CD]        VARCHAR (30) NULL,
    [LVL_4_TERR_NM]        VARCHAR (50) NULL,
    [LVL_5_TERR_CD]        VARCHAR (30) NULL,
    [LVL_5_TERR_NM]        VARCHAR (50) NULL,
    [LVL_6_TERR_CD]        VARCHAR (30) NULL,
    [LVL_6_TERR_NM]        VARCHAR (50) NULL,
    [LVL_7_TERR_CD]        VARCHAR (30) NULL,
    [LVL_7_TERR_NM]        VARCHAR (50) NULL,
    [LVL_8_TERR_CD]        VARCHAR (30) NULL,
    [LVL_8_TERR_NM]        VARCHAR (50) NULL
);


GO
PRINT N'Creating [dbo].[BaseFilter_History]...';


GO
CREATE TABLE [dbo].[BaseFilter_History] (
    [Id]                INT            IDENTITY (1, 1) NOT NULL,
    [Name]              NVARCHAR (MAX) NULL,
    [Criteria]          NVARCHAR (MAX) NULL,
    [Values]            NVARCHAR (MAX) NULL,
    [IsEnabled]         BIT            NOT NULL,
    [MarketBaseMBId]    INT            NOT NULL,
    [MarketBaseVersion] INT            NOT NULL,
    [IsRestricted]      BIT            NULL,
    [IsBaseFilterType]  BIT            NULL,
    CONSTRAINT [PK_BaseFilter_History] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[basefilters_BK]...';


GO
CREATE TABLE [dbo].[basefilters_BK] (
    [Id]               INT            IDENTITY (1, 1) NOT NULL,
    [Name]             NVARCHAR (MAX) NULL,
    [Criteria]         NVARCHAR (MAX) NULL,
    [Values]           NVARCHAR (MAX) NULL,
    [IsEnabled]        BIT            NOT NULL,
    [MarketBaseId]     INT            NOT NULL,
    [IsRestricted]     BIT            NULL,
    [IsBaseFilterType] BIT            NULL
);


GO
PRINT N'Creating [dbo].[BrickIncorrectLookup_additional]...';


GO
CREATE TABLE [dbo].[BrickIncorrectLookup_additional] (
    [Sbrick]        CHAR (5) NOT NULL,
    [Retail_Sbrick] CHAR (5) NOT NULL
);


GO
PRINT N'Creating [dbo].[ClientList_GoLive_1.0]...';


GO
CREATE TABLE [dbo].[ClientList_GoLive_1.0] (
    [ClientNo]      INT            NULL,
    [ClientID]      INT            NULL,
    [ClientName]    NVARCHAR (255) NULL,
    [Comment]       NVARCHAR (255) NULL,
    [addtoclientno] NVARCHAR (255) NULL,
    [reflectname]   NVARCHAR (255) NULL
);


GO
PRINT N'Creating [dbo].[clientmarketbases_BK]...';


GO
CREATE TABLE [dbo].[clientmarketbases_BK] (
    [Id]           INT IDENTITY (1, 1) NOT NULL,
    [ClientId]     INT NOT NULL,
    [MarketBaseId] INT NOT NULL
);


GO
PRINT N'Creating [dbo].[Deliverables_History]...';


GO
CREATE TABLE [dbo].[Deliverables_History] (
    [DeliverableId]   INT           NOT NULL,
    [Version]         INT           NOT NULL,
    [SubscriptionId]  INT           NULL,
    [ReportWriterId]  INT           NULL,
    [FrequencyTypeId] INT           NULL,
    [RestrictionId]   INT           NULL,
    [PeriodId]        INT           NULL,
    [Frequencyid]     INT           NULL,
    [StartDate]       DATETIME      NULL,
    [EndDate]         DATETIME      NULL,
    [probe]           BIT           NULL,
    [PackException]   BIT           NULL,
    [Census]          BIT           NULL,
    [OneKey]          BIT           NULL,
    [LastModified]    DATETIME      NULL,
    [ModifiedBy]      INT           NULL,
    [DeliveryTypeId]  INT           NULL,
    [ModifiedDate]    DATETIME      NULL,
    [UserId]          INT           NULL,
    [IsSentToTDW]     BIT           NULL,
    [TDWTransferDate] DATETIME      NULL,
    [TDWUserId]       INT           NULL,
    [LastSaved]       DATETIME2 (7) NULL,
    CONSTRAINT [PK_Deliverables_History] PRIMARY KEY CLUSTERED ([DeliverableId] ASC, [Version] ASC) WITH (FILLFACTOR = 1)
);


GO
PRINT N'Creating [dbo].[deliverablesTemp]...';


GO
CREATE TABLE [dbo].[deliverablesTemp] (
    [DeliverableId]   INT      IDENTITY (1, 1) NOT NULL,
    [SubscriptionId]  INT      NULL,
    [ReportWriterId]  INT      NULL,
    [FrequencyTypeId] INT      NULL,
    [RestrictionId]   INT      NULL,
    [PeriodId]        INT      NULL,
    [Frequencyid]     INT      NULL,
    [StartDate]       DATETIME NULL,
    [EndDate]         DATETIME NULL,
    [probe]           BIT      NULL,
    [PackException]   BIT      NULL,
    [Census]          BIT      NULL,
    [OneKey]          BIT      NULL,
    [LastModified]    DATETIME NULL,
    [ModifiedBy]      INT      NULL,
    [DeliveryTypeId]  INT      NULL
);


GO
PRINT N'Creating [dbo].[DeliveryClient_History]...';


GO
CREATE TABLE [dbo].[DeliveryClient_History] (
    [Id]                 INT IDENTITY (1, 1) NOT NULL,
    [DeliveryClientId]   INT NOT NULL,
    [DeliverableId]      INT NULL,
    [DeliverableVersion] INT NULL,
    [ClientId]           INT NULL,
    CONSTRAINT [PK_DeliveryClient_History] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (FILLFACTOR = 1)
);


GO
PRINT N'Creating [dbo].[deliveryclientTemp]...';


GO
CREATE TABLE [dbo].[deliveryclientTemp] (
    [DeliveryClientId] INT IDENTITY (1, 1) NOT NULL,
    [DeliverableId]    INT NULL,
    [ClientId]         INT NULL
);


GO
PRINT N'Creating [dbo].[DeliveryMarket_History]...';


GO
CREATE TABLE [dbo].[DeliveryMarket_History] (
    [Id]                 INT IDENTITY (1, 1) NOT NULL,
    [DeliveryMarketId]   INT NOT NULL,
    [DeliverableId]      INT NULL,
    [DeliverableVersion] INT NULL,
    [MarketDefId]        INT NULL,
    [MarketDefVersion]   INT NULL,
    CONSTRAINT [PK_DeliveryMarket_History] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (FILLFACTOR = 1)
);


GO
PRINT N'Creating [dbo].[deliveryterritory_Backup]...';


GO
CREATE TABLE [dbo].[deliveryterritory_Backup] (
    [DeliveryTerritoryId] INT IDENTITY (1, 1) NOT NULL,
    [DeliverableId]       INT NULL,
    [TerritoryId]         INT NULL
);


GO
PRINT N'Creating [dbo].[DeliveryTerritory_History]...';


GO
CREATE TABLE [dbo].[DeliveryTerritory_History] (
    [Id]                  INT IDENTITY (1, 1) NOT NULL,
    [DeliveryTerritoryId] INT NOT NULL,
    [DeliverableId]       INT NULL,
    [DeliverableVersion]  INT NULL,
    [TerritoryId]         INT NULL,
    [TerritoryVersion]    INT NULL,
    CONSTRAINT [PK_DeliveryTerritory_History_1] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[DeliveryThirdParty_History]...';


GO
CREATE TABLE [dbo].[DeliveryThirdParty_History] (
    [Id]                   INT IDENTITY (1, 1) NOT NULL,
    [DeliveryThirdPartyId] INT NOT NULL,
    [DeliverableId]        INT NOT NULL,
    [DeliverableVersion]   INT NULL,
    [ThirdPartyId]         INT NOT NULL,
    CONSTRAINT [PK__DeliveryThirdParty_History] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (FILLFACTOR = 1)
);


GO
PRINT N'Creating [dbo].[Dimension_12Dec]...';


GO
CREATE TABLE [dbo].[Dimension_12Dec] (
    [DimensionID]    SMALLINT       NOT NULL,
    [RefDimensionID] SMALLINT       NULL,
    [ClientID]       SMALLINT       NOT NULL,
    [DimensionType]  TINYINT        NOT NULL,
    [DimensionName]  NVARCHAR (100) NOT NULL,
    [Levels]         TINYINT        NOT NULL,
    [BaseID]         SMALLINT       NOT NULL,
    [Valid]          BIT            NOT NULL,
    [VersionFrom]    SMALLINT       NOT NULL,
    [VersionTo]      SMALLINT       NOT NULL
);


GO
PRINT N'Creating [dbo].[excluded_dimproduct_expanded_19012018]...';


GO
CREATE TABLE [dbo].[excluded_dimproduct_expanded_19012018] (
    [Fcc]               INT           NULL,
    [Pack_cd]           SMALLINT      NULL,
    [PFC]               VARCHAR (15)  NULL,
    [NEC1_Code]         VARCHAR (30)  NULL,
    [NEC2_Code]         VARCHAR (30)  NULL,
    [NEC3_Code]         VARCHAR (30)  NULL,
    [NEC4_Code]         VARCHAR (30)  NULL,
    [Pack_Description]  VARCHAR (80)  NULL,
    [Stdy_Ind1_Code]    CHAR (1)      NULL,
    [Study_Indicators1] VARCHAR (30)  NULL,
    [Stdy_Ind2_Code]    CHAR (1)      NULL,
    [Study_Indicators2] VARCHAR (30)  NULL,
    [Stdy_Ind3_Code]    CHAR (1)      NULL,
    [Study_Indicators3] VARCHAR (30)  NULL,
    [Stdy_Ind4_Code]    CHAR (1)      NULL,
    [Study_Indicators4] VARCHAR (30)  NULL,
    [Stdy_Ind5_Code]    CHAR (1)      NULL,
    [Study_Indicators5] VARCHAR (30)  NULL,
    [Stdy_Ind6_Code]    CHAR (1)      NULL,
    [Study_Indicators6] VARCHAR (30)  NULL,
    [out_td_dt]         DATETIME2 (7) NULL,
    [Rule]              NVARCHAR (50) NULL,
    [TIME_STAMP]        DATETIME      NULL,
    [ATC1_CODE]         VARCHAR (30)  NULL,
    [ATC2_CODE]         VARCHAR (30)  NULL,
    [ATC3_CODE]         VARCHAR (30)  NULL,
    [ATC4_CODE]         VARCHAR (30)  NULL,
    [Frm_Flgs3_Desc]    VARCHAR (50)  NULL,
    [Frm_Flgs5_Desc]    VARCHAR (50)  NULL,
    [Org_Long_Name]     VARCHAR (80)  NULL,
    [ProductName]       VARCHAR (18)  NULL
);


GO
PRINT N'Creating [dbo].[Extraction]...';


GO
CREATE TABLE [dbo].[Extraction] (
    [ExtractionId]    INT         IDENTITY (1, 1) NOT NULL,
    [ClientId]        INT         NULL,
    [ClientName]      NCHAR (200) NULL,
    [DeliverableId]   INT         NULL,
    [DeliverableName] NCHAR (200) NULL,
    [CreateAt]        DATETIME    NULL,
    [CompletedAt]     DATETIME    NULL,
    [CreatedById]     INT         NULL,
    [PipelineName]    NCHAR (500) NULL,
    CONSTRAINT [PK_Extraction] PRIMARY KEY CLUSTERED ([ExtractionId] ASC)
);


GO
PRINT N'Creating [dbo].[ExtractionJob]...';


GO
CREATE TABLE [dbo].[ExtractionJob] (
    [ExtractionJobId] INT         IDENTITY (1, 1) NOT NULL,
    [ExtractionId]    INT         NULL,
    [JobId]           NCHAR (200) NULL,
    [StatusId]        INT         NULL,
    [CreatedBy]       NCHAR (200) NULL,
    [CreatedById]     INT         NULL,
    [CreatedAt]       DATETIME    NULL,
    [LastUpdatedAt]   DATETIME    NULL,
    CONSTRAINT [PK_ExtractionJob] PRIMARY KEY CLUSTERED ([ExtractionJobId] ASC)
);


GO
PRINT N'Creating [dbo].[ExtractionJobStatus]...';


GO
CREATE TABLE [dbo].[ExtractionJobStatus] (
    [StatusId] INT        NOT NULL,
    [Status]   NCHAR (50) NULL,
    CONSTRAINT [PK_ExtractionJobStatus] PRIMARY KEY CLUSTERED ([StatusId] ASC)
);


GO
PRINT N'Creating [dbo].[Groups_History]...';


GO
CREATE TABLE [dbo].[Groups_History] (
    [Id]                     INT            IDENTITY (1, 1) NOT NULL,
    [Name]                   NVARCHAR (MAX) NULL,
    [ParentId]               INT            NULL,
    [GroupNumber]            NVARCHAR (MAX) NULL,
    [CustomGroupNumber]      NVARCHAR (MAX) NULL,
    [IsOrphan]               BIT            NOT NULL,
    [PaddingLeft]            INT            NOT NULL,
    [ParentGroupNumber]      NVARCHAR (MAX) NULL,
    [CustomGroupNumberSpace] NVARCHAR (MAX) NULL,
    [TerritoryId]            INT            NOT NULL,
    [TerritoryVersion]       INT            NOT NULL,
    [GroupId]                INT            NOT NULL,
    [NewCGN]                 NVARCHAR (50)  NULL,
    [LevelNo]                INT            NULL,
    [IRPItemID]              INT            NULL,
    CONSTRAINT [PK_Groups_History] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (FILLFACTOR = 1)
);


GO
PRINT N'Creating [dbo].[Levels_History]...';


GO
CREATE TABLE [dbo].[Levels_History] (
    [Id]               INT            IDENTITY (1, 1) NOT NULL,
    [Name]             NVARCHAR (MAX) NULL,
    [LevelNumber]      INT            NOT NULL,
    [LevelIDLength]    INT            NOT NULL,
    [LevelColor]       NVARCHAR (MAX) NULL,
    [BackgroundColor]  NVARCHAR (MAX) NULL,
    [LevelId]          INT            NOT NULL,
    [TerritoryId]      INT            NOT NULL,
    [TerritoryVersion] INT            NOT NULL,
    [IRPLevelID]       INT            NULL,
    CONSTRAINT [PK_Levels_History] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (FILLFACTOR = 1)
);


GO
PRINT N'Creating [dbo].[Market_Base_Dimension_Mapping_Prod_Backup]...';


GO
CREATE TABLE [dbo].[Market_Base_Dimension_Mapping_Prod_Backup] (
    [ClientName]        NVARCHAR (255) NULL,
    [ClientNo]          INT            NULL,
    [DimensionID]       INT            NULL,
    [DimensionName]     NVARCHAR (255) NULL,
    [Market Base]       NVARCHAR (255) NULL,
    [DimensionTypeName] NVARCHAR (255) NULL,
    [BaseName]          NVARCHAR (255) NULL,
    [Contact]           NVARCHAR (255) NULL,
    [Clts]              NVARCHAR (255) NULL,
    [MarketBaseID]      NVARCHAR (255) NULL,
    [ClientID]          NVARCHAR (255) NULL
);


GO
PRINT N'Creating [dbo].[Market_Base_Dimension_Mapping_Prod_U]...';


GO
CREATE TABLE [dbo].[Market_Base_Dimension_Mapping_Prod_U] (
    [ClientName]        NVARCHAR (255) NULL,
    [ClientNo]          FLOAT (53)     NULL,
    [DimensionID]       FLOAT (53)     NULL,
    [DimensionName]     NVARCHAR (255) NULL,
    [Market Base]       NVARCHAR (255) NULL,
    [DimensionTypeName] NVARCHAR (255) NULL,
    [BaseName]          NVARCHAR (255) NULL,
    [Contact]           NVARCHAR (255) NULL,
    [F9]                NVARCHAR (255) NULL
);


GO
PRINT N'Creating [dbo].[Market_Base_Dimension_Mapping_Prod_U2]...';


GO
CREATE TABLE [dbo].[Market_Base_Dimension_Mapping_Prod_U2] (
    [ClientName]        NVARCHAR (255) NULL,
    [ClientNo]          FLOAT (53)     NULL,
    [DimensionID]       FLOAT (53)     NULL,
    [DimensionName]     NVARCHAR (255) NULL,
    [Market Base]       NVARCHAR (255) NULL,
    [DimensionTypeName] NVARCHAR (255) NULL,
    [BaseName]          NVARCHAR (255) NULL,
    [Contact]           NVARCHAR (255) NULL,
    [F9]                NVARCHAR (255) NULL
);


GO
PRINT N'Creating [dbo].[MarketAttributes]...';


GO
CREATE TABLE [dbo].[MarketAttributes] (
    [Id]                 INT           IDENTITY (1, 1) NOT NULL,
    [AttributeId]        INT           NULL,
    [Name]               NVARCHAR (50) NULL,
    [OrderNo]            INT           NULL,
    [MarketDefinitionId] INT           NULL,
    CONSTRAINT [PK_MarketAttributes] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[MarketBase_History]...';


GO
CREATE TABLE [dbo].[MarketBase_History] (
    [MBId]            INT            NOT NULL,
    [Version]         INT            NOT NULL,
    [Name]            NVARCHAR (MAX) NULL,
    [Description]     NVARCHAR (MAX) NULL,
    [Suffix]          NVARCHAR (MAX) NULL,
    [DurationTo]      NVARCHAR (MAX) NULL,
    [DurationFrom]    NVARCHAR (MAX) NULL,
    [GuiId]           NVARCHAR (MAX) NULL,
    [BaseType]        NVARCHAR (MAX) NULL,
    [ModifiedDate]    DATETIME       NULL,
    [UserId]          INT            NULL,
    [IsSentToTDW]     BIT            NULL,
    [TDWTransferDate] DATETIME       NULL,
    [TDWUserId]       INT            NULL,
    [LastSaved]       DATETIME       NULL,
    CONSTRAINT [PK_MarketBase_History] PRIMARY KEY CLUSTERED ([MBId] ASC, [Version] ASC) WITH (FILLFACTOR = 1)
);


GO
PRINT N'Creating [dbo].[MarketBaseQueue]...';


GO
CREATE TABLE [dbo].[MarketBaseQueue] (
    [MarketBaseId] INT NULL
);


GO
PRINT N'Creating [dbo].[marketbases_BK]...';


GO
CREATE TABLE [dbo].[marketbases_BK] (
    [Id]           INT            IDENTITY (1, 1) NOT NULL,
    [Name]         NVARCHAR (MAX) NULL,
    [Description]  NVARCHAR (MAX) NULL,
    [Suffix]       NVARCHAR (MAX) NULL,
    [DurationTo]   NVARCHAR (MAX) NULL,
    [DurationFrom] NVARCHAR (MAX) NULL,
    [GuiId]        NVARCHAR (MAX) NULL,
    [BaseType]     NVARCHAR (MAX) NULL
);


GO
PRINT N'Creating [dbo].[MarketDefBaseMap_History]...';


GO
CREATE TABLE [dbo].[MarketDefBaseMap_History] (
    [Id]                INT            IDENTITY (1, 1) NOT NULL,
    [MarketDefId]       INT            NOT NULL,
    [Version]           INT            NOT NULL,
    [Name]              NVARCHAR (MAX) NULL,
    [MarketBaseId]      INT            NOT NULL,
    [MarketBaseVersion] INT            NOT NULL,
    [DataRefreshType]   NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_MarketDefBaseMap_History] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[MarketDefinitions_History]...';


GO
CREATE TABLE [dbo].[MarketDefinitions_History] (
    [MarketDefId]     INT            NOT NULL,
    [Version]         INT            NOT NULL,
    [Name]            NVARCHAR (MAX) NULL,
    [Description]     NVARCHAR (MAX) NULL,
    [ClientId]        INT            NOT NULL,
    [GuiId]           NVARCHAR (MAX) NULL,
    [DimensionId]     INT            NULL,
    [ModifiedDate]    DATETIME       NULL,
    [UserId]          INT            NULL,
    [IsSentToTDW]     BIT            NULL,
    [TDWTransferDate] DATETIME       NULL,
    [TDWUserId]       INT            NULL,
    [LastSaved]       DATETIME       NULL,
    CONSTRAINT [PK_MarketDefinitions_History] PRIMARY KEY CLUSTERED ([MarketDefId] ASC, [Version] ASC) WITH (FILLFACTOR = 1)
);


GO
PRINT N'Creating [dbo].[MarketDefPack_History]...';


GO
CREATE TABLE [dbo].[MarketDefPack_History] (
    [Id]                 INT            IDENTITY (1, 1) NOT NULL,
    [MarketDefinitionId] INT            NOT NULL,
    [MarketDefVersion]   INT            NOT NULL,
    [Pack]               NVARCHAR (MAX) NULL,
    [MarketBase]         NVARCHAR (MAX) NULL,
    [MarketBaseId]       NVARCHAR (MAX) NULL,
    [GroupNumber]        NVARCHAR (MAX) NULL,
    [GroupName]          NVARCHAR (MAX) NULL,
    [Factor]             NVARCHAR (MAX) NULL,
    [PFC]                NVARCHAR (MAX) NULL,
    [Manufacturer]       NVARCHAR (MAX) NULL,
    [ATC4]               NVARCHAR (MAX) NULL,
    [NEC4]               NVARCHAR (MAX) NULL,
    [DataRefreshType]    NVARCHAR (MAX) NULL,
    [StateStatus]        NVARCHAR (MAX) NULL,
    [Alignment]          NVARCHAR (MAX) NULL,
    [Product]            NVARCHAR (MAX) NULL,
    [ChangeFlag]         NCHAR (1)      NULL,
    [Molecule]           NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_MarketDefPack_History] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[MarketGroupFilters]...';


GO
CREATE TABLE [dbo].[MarketGroupFilters] (
    [Id]                 INT            IDENTITY (1, 1) NOT NULL,
    [Name]               NVARCHAR (100) NULL,
    [Criteria]           NVARCHAR (80)  NULL,
    [Values]             NVARCHAR (200) NULL,
    [IsEnabled]          BIT            NULL,
    [GroupId]            INT            NULL,
    [AttributeId]        INT            NULL,
    [MarketDefinitionId] INT            NULL,
    [IsAttribute]        BIT            NULL,
    CONSTRAINT [PK_group]].[MarketGroupFilters] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[MarketGroupMappings]...';


GO
CREATE TABLE [dbo].[MarketGroupMappings] (
    [Id]          INT IDENTITY (1, 1) NOT NULL,
    [ParentId]    INT NULL,
    [GroupId]     INT NULL,
    [IsAttribute] BIT NULL,
    [AttributeId] INT NULL,
    CONSTRAINT [PK_group]].[GroupAttributeMapping] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[MarketGroupPacks]...';


GO
CREATE TABLE [dbo].[MarketGroupPacks] (
    [Id]                 INT           IDENTITY (1, 1) NOT NULL,
    [PFC]                NVARCHAR (50) NULL,
    [GroupId]            INT           NULL,
    [MarketDefinitionId] INT           NULL,
    CONSTRAINT [PK_group]].[MarketGroupPacks] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[MarketGroups]...';


GO
CREATE TABLE [dbo].[MarketGroups] (
    [Id]                 INT           IDENTITY (1, 1) NOT NULL,
    [GroupId]            INT           NULL,
    [Name]               NVARCHAR (50) NULL,
    [MarketDefinitionId] INT           NULL,
    CONSTRAINT [PK_group]].[MarketGroups] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[OutletBrickAllocations_History]...';


GO
CREATE TABLE [dbo].[OutletBrickAllocations_History] (
    [Id]                     INT            IDENTITY (1, 1) NOT NULL,
    [NodeCode]               NVARCHAR (50)  NULL,
    [NodeName]               NVARCHAR (300) NULL,
    [Address]                NVARCHAR (500) NULL,
    [BrickOutletCode]        NVARCHAR (50)  NULL,
    [BrickOutletName]        NVARCHAR (500) NULL,
    [LevelName]              NVARCHAR (500) NULL,
    [CustomGroupNumberSpace] NVARCHAR (500) NULL,
    [Type]                   NVARCHAR (50)  NULL,
    [BannerGroup]            VARCHAR (500)  NULL,
    [State]                  VARCHAR (40)   NULL,
    [Panel]                  CHAR (1)       NULL,
    [BrickOutletLocation]    CHAR (30)      NULL,
    [TerritoryId]            INT            NOT NULL,
    [TerritoryVersion]       INT            NOT NULL,
    CONSTRAINT [PK_OutletBrickAllocations_History] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (FILLFACTOR = 1)
);


GO
PRINT N'Creating [dbo].[ReportFilters_History]...';


GO
CREATE TABLE [dbo].[ReportFilters_History] (
    [FilterID]          INT           NOT NULL,
    [Version]           INT           NOT NULL,
    [FilterName]        VARCHAR (100) NOT NULL,
    [FilterType]        VARCHAR (20)  NOT NULL,
    [FilterDescription] VARCHAR (200) NULL,
    [SelectedFields]    VARCHAR (MAX) NULL,
    [ModuleID]          INT           NULL,
    [CreatedBy]         INT           NOT NULL,
    [UpdatedBy]         INT           NULL,
    [UserId]            INT           NULL,
    [IsSentToTDW]       BIT           NULL,
    [TDWTransferDate]   DATETIME      NULL,
    [TDWUserId]         INT           NULL,
    [ModifiedDate]      DATETIME      NULL,
    CONSTRAINT [PK_ReportFilters_History] PRIMARY KEY CLUSTERED ([FilterID] ASC, [Version] ASC)
);


GO
PRINT N'Creating [dbo].[Subscription_History]...';


GO
CREATE TABLE [dbo].[Subscription_History] (
    [SubscriptionId]     INT            NOT NULL,
    [Version]            INT            NOT NULL,
    [Name]               NVARCHAR (MAX) NULL,
    [ClientId]           INT            NULL,
    [Country]            NVARCHAR (MAX) NULL,
    [Service]            NVARCHAR (MAX) NULL,
    [Data]               NVARCHAR (MAX) NULL,
    [Source]             NVARCHAR (MAX) NULL,
    [StartDate]          DATETIME       NULL,
    [EndDate]            DATETIME       NULL,
    [ServiceTerritoryId] INT            NULL,
    [Active]             BIT            NULL,
    [LastModified]       DATETIME       NULL,
    [ModifiedBy]         INT            NULL,
    [CountryId]          INT            NULL,
    [ServiceId]          INT            NULL,
    [DataTypeId]         INT            NULL,
    [SourceId]           INT            NULL,
    [ModifiedDate]       DATETIME       NULL,
    [UserId]             INT            NULL,
    [IsSentToTDW]        BIT            NULL,
    [TDWTransferDate]    DATETIME       NULL,
    [TDWUserId]          INT            NULL,
    [LastSaved]          DATETIME       NULL,
    CONSTRAINT [PK__Subscription_History] PRIMARY KEY CLUSTERED ([SubscriptionId] ASC, [Version] ASC) WITH (FILLFACTOR = 1)
);


GO
PRINT N'Creating [dbo].[subscription11dec]...';


GO
CREATE TABLE [dbo].[subscription11dec] (
    [SubscriptionId]     INT            IDENTITY (1, 1) NOT NULL,
    [Name]               NVARCHAR (MAX) NULL,
    [ClientId]           INT            NULL,
    [Country]            NVARCHAR (MAX) NULL,
    [Service]            NVARCHAR (MAX) NULL,
    [Data]               NVARCHAR (MAX) NULL,
    [Source]             NVARCHAR (MAX) NULL,
    [StartDate]          DATETIME       NULL,
    [EndDate]            DATETIME       NULL,
    [ServiceTerritoryId] INT            NULL,
    [Active]             BIT            NULL,
    [LastModified]       DATETIME       NULL,
    [ModifiedBy]         INT            NULL,
    [CountryId]          INT            NULL,
    [ServiceId]          INT            NULL,
    [DataTypeId]         INT            NULL,
    [SourceId]           INT            NULL
);


GO
PRINT N'Creating [dbo].[SubscriptionMarket_History]...';


GO
CREATE TABLE [dbo].[SubscriptionMarket_History] (
    [Id]                   INT IDENTITY (1, 1) NOT NULL,
    [SubscriptionMarketId] INT NOT NULL,
    [SubscriptionId]       INT NULL,
    [SubscriptionVersion]  INT NULL,
    [MarketBaseId]         INT NULL,
    [MarketBaseVersion]    INT NULL,
    CONSTRAINT [PK__SubscriptionMarket_History] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (FILLFACTOR = 1)
);


GO
PRINT N'Creating [dbo].[t2]...';


GO
CREATE TABLE [dbo].[t2] (
    [Name]               VARCHAR (50) NULL,
    [DimensionID]        INT          NULL,
    [DimensionName]      VARCHAR (50) NULL,
    [marketdefinitionid] INT          NULL,
    [MarketBaseName]     VARCHAR (50) NULL,
    [SourceCount]        INT          NULL,
    [TargetCount]        INT          NULL
);


GO
PRINT N'Creating [dbo].[Territories_History]...';


GO
CREATE TABLE [dbo].[Territories_History] (
    [TerritoryId]     INT            NOT NULL,
    [Version]         INT            NOT NULL,
    [Name]            NVARCHAR (MAX) NULL,
    [RootGroup_id]    INT            NULL,
    [RootLevel_Id]    INT            NULL,
    [Client_id]       INT            NULL,
    [IsBrickBased]    BIT            NULL,
    [IsUsed]          BIT            NULL,
    [GuiId]           NVARCHAR (MAX) NULL,
    [SRA_Client]      NVARCHAR (100) NULL,
    [SRA_Suffix]      NVARCHAR (100) NULL,
    [AD]              NVARCHAR (100) NULL,
    [LD]              NVARCHAR (100) NULL,
    [DimensionID]     INT            NULL,
    [ModifiedDate]    DATETIME       NULL,
    [UserId]          INT            NULL,
    [IsSentToTDW]     BIT            NULL,
    [TDWTransferDate] DATETIME       NULL,
    [TDWUserId]       INT            NULL,
    [LastSaved]       DATETIME       NULL,
    CONSTRAINT [PK_Territories_History] PRIMARY KEY CLUSTERED ([TerritoryId] ASC, [Version] ASC) WITH (FILLFACTOR = 1)
);


GO
PRINT N'Creating [dbo].[TxR_305]...';


GO
CREATE TABLE [dbo].[TxR_305] (
    [territoryId]    INT            NULL,
    [STATE]          NVARCHAR (30)  NULL,
    [STATE_Name]     NVARCHAR (30)  NULL,
    [TERRITORY]      NVARCHAR (30)  NULL,
    [TERRITORY_Name] NVARCHAR (30)  NULL,
    [brick]          NVARCHAR (15)  NULL,
    [Brick_Name]     NVARCHAR (100) NULL
);


GO
PRINT N'Creating [dbo].[User_History]...';


GO
CREATE TABLE [dbo].[User_History] (
    [UserID]                 INT           NOT NULL,
    [Version]                INT           NOT NULL,
    [UserName]               VARCHAR (300) NULL,
    [FirstName]              VARCHAR (50)  NULL,
    [LastName]               VARCHAR (50)  NULL,
    [email]                  VARCHAR (300) NULL,
    [UserTypeID]             INT           NULL,
    [IsActive]               BIT           NOT NULL,
    [ReceiveEmail]           BIT           NULL,
    [PwdEncrypted]           INT           NULL,
    [MaintenancePeriodEmail] BIT           NULL,
    [NewsAlertEmail]         BIT           NULL,
    [ModifiedDate]           DATETIME      NULL,
    [ModifiedUserId]         INT           NULL,
    [IsSentToTDW]            BIT           NULL,
    [TDWTransferDate]        DATETIME      NULL,
    [TDWUserId]              INT           NULL,
    CONSTRAINT [PK__User_History] PRIMARY KEY CLUSTERED ([UserID] ASC, [Version] ASC) WITH (FILLFACTOR = 1)
);


GO
PRINT N'Creating [dbo].[UserClient_History]...';


GO
CREATE TABLE [dbo].[UserClient_History] (
    [Id]          INT IDENTITY (1, 1) NOT NULL,
    [UserID]      INT NOT NULL,
    [UserVersion] INT NOT NULL,
    [ClientId]    INT NOT NULL,
    CONSTRAINT [PK_UserClient_History] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (FILLFACTOR = 1)
);


GO
PRINT N'Creating [dbo].[UserLogin_History1]...';


GO
CREATE TABLE [dbo].[UserLogin_History1] (
    [ID]        INT           NOT NULL,
    [UserID]    INT           NULL,
    [UserName]  VARCHAR (500) NULL,
    [UserType]  INT           NULL,
    [RoleID]    INT           NULL,
    [LoginDate] DATETIME      NULL,
    [Comment]   VARCHAR (200) NULL
);


GO
PRINT N'Creating [dbo].[UserRole_History]...';


GO
CREATE TABLE [dbo].[UserRole_History] (
    [Id]          INT IDENTITY (1, 1) NOT NULL,
    [UserID]      INT NOT NULL,
    [UserVersion] INT NOT NULL,
    [RoleId]      INT NOT NULL,
    CONSTRAINT [PK_UserRole_History] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (FILLFACTOR = 1)
);


GO
PRINT N'Creating [dbo].[z_Items]...';


GO
CREATE TABLE [dbo].[z_Items] (
    [ItemID]      INT            NOT NULL,
    [DimensionID] SMALLINT       NULL,
    [RefItemID]   INT            NULL,
    [LevelNo]     INT            NULL,
    [Parent]      INT            NULL,
    [ItemType]    TINYINT        NOT NULL,
    [Number]      NVARCHAR (40)  NOT NULL,
    [ShortName]   NVARCHAR (40)  NULL,
    [Name]        NVARCHAR (100) NOT NULL,
    [Item]        NVARCHAR (20)  NULL,
    [Visible]     BIT            NOT NULL,
    [VersionFrom] SMALLINT       NOT NULL,
    [VersionTo]   SMALLINT       NOT NULL,
    CONSTRAINT [PK_Items] PRIMARY KEY NONCLUSTERED ([ItemID] ASC, [VersionFrom] ASC) WITH (FILLFACTOR = 90)
);


GO
PRINT N'Creating [dbo].[z_UserList]...';


GO
CREATE TABLE [dbo].[z_UserList] (
    [Users]      NVARCHAR (255) NULL,
    [First Name] NVARCHAR (255) NULL,
    [Last Name]  NVARCHAR (255) NULL,
    [Role]       NVARCHAR (255) NULL
);


GO
PRINT N'Creating [IRP].[CLIENTEXCEPTIONS]...';


GO
CREATE TABLE [IRP].[CLIENTEXCEPTIONS] (
    [ClientNo] INT     NOT NULL,
    [Product]  INT     NOT NULL,
    [Pack]     TINYINT NOT NULL,
    [Area]     INT     NOT NULL
);


GO
PRINT N'Creating [IRP].[ClientMFR]...';


GO
CREATE TABLE [IRP].[ClientMFR] (
    [ClientNo] SMALLINT NOT NULL,
    [MfrNo]    SMALLINT NOT NULL
);


GO
PRINT N'Creating [IRP].[dimensionbasemap_backup]...';


GO
CREATE TABLE [IRP].[dimensionbasemap_backup] (
    [DimensionId]  INT NULL,
    [MarketBaseId] INT NULL
);


GO
PRINT N'Creating [IRP].[DimensionBaseMap_BK]...';


GO
CREATE TABLE [IRP].[DimensionBaseMap_BK] (
    [DimensionId]  INT NULL,
    [MarketBaseId] INT NULL
);


GO
PRINT N'Creating [dbo].[DC_Constraint]...';


GO
ALTER TABLE [dbo].[Deliverables_History]
    ADD CONSTRAINT [DC_Constraint] DEFAULT ((0)) FOR [IsSentToTDW];


GO
PRINT N'Creating [dbo].[MB_Constraint]...';


GO
ALTER TABLE [dbo].[MarketBase_History]
    ADD CONSTRAINT [MB_Constraint] DEFAULT ((0)) FOR [IsSentToTDW];


GO
PRINT N'Creating [dbo].[RF_Constraint]...';


GO
ALTER TABLE [dbo].[ReportFilters_History]
    ADD CONSTRAINT [RF_Constraint] DEFAULT ((0)) FOR [IsSentToTDW];


GO
PRINT N'Creating unnamed constraint on [dbo].[Subscription_History]...';


GO
ALTER TABLE [dbo].[Subscription_History]
    ADD DEFAULT ((0)) FOR [IsSentToTDW];


GO
PRINT N'Creating unnamed constraint on [dbo].[Territories_History]...';


GO
ALTER TABLE [dbo].[Territories_History]
    ADD DEFAULT ((0)) FOR [IsSentToTDW];


GO
PRINT N'Creating unnamed constraint on [dbo].[User_History]...';


GO
ALTER TABLE [dbo].[User_History]
    ADD DEFAULT ((0)) FOR [MaintenancePeriodEmail];


GO
PRINT N'Creating unnamed constraint on [dbo].[User_History]...';


GO
ALTER TABLE [dbo].[User_History]
    ADD DEFAULT ((0)) FOR [NewsAlertEmail];


GO
PRINT N'Creating unnamed constraint on [dbo].[User_History]...';


GO
ALTER TABLE [dbo].[User_History]
    ADD DEFAULT ((0)) FOR [IsSentToTDW];


GO
PRINT N'Creating [dbo].[FK__RoleActio__Acces__634EBE90]...';


GO
ALTER TABLE [dbo].[RoleAction] WITH NOCHECK
    ADD CONSTRAINT [FK__RoleActio__Acces__634EBE90] FOREIGN KEY ([AccessPrivilegeID]) REFERENCES [dbo].[AccessPrivilege] ([AccessPrivilegeID]);


GO
PRINT N'Creating [dbo].[FK__Action__ModuleID__43D61337]...';


GO
ALTER TABLE [dbo].[Action] WITH NOCHECK
    ADD CONSTRAINT [FK__Action__ModuleID__43D61337] FOREIGN KEY ([ModuleID]) REFERENCES [dbo].[Module] ([ModuleID]);


GO
PRINT N'Creating [dbo].[FK__RoleActio__Actio__6442E2C9]...';


GO
ALTER TABLE [dbo].[RoleAction] WITH NOCHECK
    ADD CONSTRAINT [FK__RoleActio__Actio__6442E2C9] FOREIGN KEY ([ActionID]) REFERENCES [dbo].[Action] ([ActionID]);


GO
PRINT N'Creating [dbo].[FK_dbo.AdditionalFilters_dbo.MarketDefinitionBaseMaps_MarketDefinitionBaseMapId]...';


GO
ALTER TABLE [dbo].[AdditionalFilters] WITH NOCHECK
    ADD CONSTRAINT [FK_dbo.AdditionalFilters_dbo.MarketDefinitionBaseMaps_MarketDefinitionBaseMapId] FOREIGN KEY ([MarketDefinitionBaseMapId]) REFERENCES [dbo].[MarketDefinitionBaseMaps] ([Id]);


GO
PRINT N'Creating [dbo].[FK__Subscript__Clien__662B2B3B]...';


GO
ALTER TABLE [dbo].[Subscription] WITH NOCHECK
    ADD CONSTRAINT [FK__Subscript__Clien__662B2B3B] FOREIGN KEY ([ClientId]) REFERENCES [dbo].[Clients] ([Id]);


GO
PRINT N'Creating [dbo].[FK__ClientMFR__Clien__46B27FE2]...';


GO
ALTER TABLE [dbo].[ClientMFR] WITH NOCHECK
    ADD CONSTRAINT [FK__ClientMFR__Clien__46B27FE2] FOREIGN KEY ([ClientId]) REFERENCES [dbo].[Clients] ([Id]);


GO
PRINT N'Creating [dbo].[FK__ClientPac__Clien__47A6A41B]...';


GO
ALTER TABLE [dbo].[ClientPackException] WITH NOCHECK
    ADD CONSTRAINT [FK__ClientPac__Clien__47A6A41B] FOREIGN KEY ([ClientId]) REFERENCES [dbo].[Clients] ([Id]);


GO
PRINT N'Creating [dbo].[FK__ClientRel__Clien__489AC854]...';


GO
ALTER TABLE [dbo].[ClientRelease] WITH NOCHECK
    ADD CONSTRAINT [FK__ClientRel__Clien__489AC854] FOREIGN KEY ([ClientId]) REFERENCES [dbo].[Clients] ([Id]);


GO
PRINT N'Creating [dbo].[FK__UserClien__Clien__719CDDE7]...';


GO
ALTER TABLE [dbo].[UserClient] WITH NOCHECK
    ADD CONSTRAINT [FK__UserClien__Clien__719CDDE7] FOREIGN KEY ([ClientId]) REFERENCES [dbo].[Clients] ([Id]);


GO
PRINT N'Creating [dbo].[FK__DeliveryC__Clien__4E53A1AA]...';


GO
ALTER TABLE [dbo].[DeliveryClient] WITH NOCHECK
    ADD CONSTRAINT [FK__DeliveryC__Clien__4E53A1AA] FOREIGN KEY ([ClientId]) REFERENCES [dbo].[Clients] ([Id]);


GO
PRINT N'Creating [dbo].[FK_dbo.MarketDefinitions_dbo.Clients_ClientId]...';


GO
ALTER TABLE [dbo].[MarketDefinitions] WITH NOCHECK
    ADD CONSTRAINT [FK_dbo.MarketDefinitions_dbo.Clients_ClientId] FOREIGN KEY ([ClientId]) REFERENCES [dbo].[Clients] ([Id]);


GO
PRINT N'Creating [dbo].[FK__Subscript__Count__671F4F74]...';


GO
ALTER TABLE [dbo].[Subscription] WITH NOCHECK
    ADD CONSTRAINT [FK__Subscript__Count__671F4F74] FOREIGN KEY ([CountryId]) REFERENCES [dbo].[Country] ([CountryId]);


GO
PRINT N'Creating [dbo].[FK__Subscript__DataT__681373AD]...';


GO
ALTER TABLE [dbo].[Subscription] WITH NOCHECK
    ADD CONSTRAINT [FK__Subscript__DataT__681373AD] FOREIGN KEY ([DataTypeId]) REFERENCES [dbo].[DataType] ([DataTypeId]);


GO
PRINT N'Creating [dbo].[FK__ReportWri__Deliv__607251E5]...';


GO
ALTER TABLE [dbo].[ReportWriter] WITH NOCHECK
    ADD CONSTRAINT [FK__ReportWri__Deliv__607251E5] FOREIGN KEY ([DeliveryTypeId]) REFERENCES [dbo].[DeliveryType] ([DeliveryTypeId]);


GO
PRINT N'Creating [dbo].[FK__Deliverab__Deliv__498EEC8D]...';


GO
ALTER TABLE [dbo].[Deliverables] WITH NOCHECK
    ADD CONSTRAINT [FK__Deliverab__Deliv__498EEC8D] FOREIGN KEY ([DeliveryTypeId]) REFERENCES [dbo].[DeliveryType] ([DeliveryTypeId]);


GO
PRINT N'Creating [dbo].[FK__ReportWri__FileI__6166761E]...';


GO
ALTER TABLE [dbo].[ReportWriter] WITH NOCHECK
    ADD CONSTRAINT [FK__ReportWri__FileI__6166761E] FOREIGN KEY ([FileId]) REFERENCES [dbo].[File] ([FileId]);


GO
PRINT N'Creating [dbo].[FK__ReportWri__FileT__625A9A57]...';


GO
ALTER TABLE [dbo].[ReportWriter] WITH NOCHECK
    ADD CONSTRAINT [FK__ReportWri__FileT__625A9A57] FOREIGN KEY ([FileTypeId]) REFERENCES [dbo].[FileType] ([FileTypeId]);


GO
PRINT N'Creating [dbo].[FK__Frequency__Frequ__55F4C372]...';


GO
ALTER TABLE [dbo].[Frequency] WITH NOCHECK
    ADD CONSTRAINT [FK__Frequency__Frequ__55F4C372] FOREIGN KEY ([FrequencyTypeId]) REFERENCES [dbo].[FrequencyType] ([FrequencyTypeId]);


GO
PRINT N'Creating [dbo].[FK__Deliverab__Frequ__4A8310C6]...';


GO
ALTER TABLE [dbo].[Deliverables] WITH NOCHECK
    ADD CONSTRAINT [FK__Deliverab__Frequ__4A8310C6] FOREIGN KEY ([FrequencyTypeId]) REFERENCES [dbo].[FrequencyType] ([FrequencyTypeId]);


GO
PRINT N'Creating [dbo].[FK_dbo.Territories_dbo.Groups_RootGroup_id]...';


GO
ALTER TABLE [dbo].[Territories] WITH NOCHECK
    ADD CONSTRAINT [FK_dbo.Territories_dbo.Groups_RootGroup_id] FOREIGN KEY ([RootGroup_id]) REFERENCES [dbo].[Groups] ([Id]);


GO
PRINT N'Creating [dbo].[FK_dbo.Groups_dbo.Groups_Parent_Id]...';


GO
ALTER TABLE [dbo].[Groups] WITH NOCHECK
    ADD CONSTRAINT [FK_dbo.Groups_dbo.Groups_Parent_Id] FOREIGN KEY ([ParentId]) REFERENCES [dbo].[Groups] ([Id]);


GO
PRINT N'Creating [dbo].[FK_dbo.Levels_dbo.Territories_TerritoryId]...';


GO
ALTER TABLE [dbo].[Levels] WITH NOCHECK
    ADD CONSTRAINT [FK_dbo.Levels_dbo.Territories_TerritoryId] FOREIGN KEY ([TerritoryId]) REFERENCES [dbo].[Territories] ([Id]);


GO
PRINT N'Creating [dbo].[FK_dbo.Territories_dbo.Levels_RootLevel_Id]...';


GO
ALTER TABLE [dbo].[Territories] WITH NOCHECK
    ADD CONSTRAINT [FK_dbo.Territories_dbo.Levels_RootLevel_Id] FOREIGN KEY ([RootLevel_Id]) REFERENCES [dbo].[Levels] ([Id]);


GO
PRINT N'Creating [dbo].[FK__PackMarke__Marke__5F7E2DAC]...';


GO
ALTER TABLE [dbo].[PackMarketBases] WITH NOCHECK
    ADD CONSTRAINT [FK__PackMarke__Marke__5F7E2DAC] FOREIGN KEY ([MarketBaseId]) REFERENCES [dbo].[MarketBases] ([Id]);


GO
PRINT N'Creating [dbo].[FK__Subscript__Marke__6BE40491]...';


GO
ALTER TABLE [dbo].[SubscriptionMarket] WITH NOCHECK
    ADD CONSTRAINT [FK__Subscript__Marke__6BE40491] FOREIGN KEY ([MarketBaseId]) REFERENCES [dbo].[MarketBases] ([Id]);


GO
PRINT N'Creating [dbo].[FK_dbo.MarketDefinitionBaseMaps_dbo.MarketBases_MarketBaseId]...';


GO
ALTER TABLE [dbo].[MarketDefinitionBaseMaps] WITH NOCHECK
    ADD CONSTRAINT [FK_dbo.MarketDefinitionBaseMaps_dbo.MarketBases_MarketBaseId] FOREIGN KEY ([MarketBaseId]) REFERENCES [dbo].[MarketBases] ([Id]);


GO
PRINT N'Creating [dbo].[FK_dbo.MarketDefinitionBaseMaps_dbo.MarketDefinitions_MarketDefinitionId]...';


GO
ALTER TABLE [dbo].[MarketDefinitionBaseMaps] WITH NOCHECK
    ADD CONSTRAINT [FK_dbo.MarketDefinitionBaseMaps_dbo.MarketDefinitions_MarketDefinitionId] FOREIGN KEY ([MarketDefinitionId]) REFERENCES [dbo].[MarketDefinitions] ([Id]);


GO
PRINT N'Creating [dbo].[FK_dbo.MarketDefinitionPacks_dbo.MarketDefinitions_MarketDefinitionId]...';


GO
ALTER TABLE [dbo].[MarketDefinitionPacks] WITH NOCHECK
    ADD CONSTRAINT [FK_dbo.MarketDefinitionPacks_dbo.MarketDefinitions_MarketDefinitionId] FOREIGN KEY ([MarketDefinitionId]) REFERENCES [dbo].[MarketDefinitions] ([Id]);


GO
PRINT N'Creating [dbo].[FK__DeliveryM__Marke__51300E55]...';


GO
ALTER TABLE [dbo].[DeliveryMarket] WITH NOCHECK
    ADD CONSTRAINT [FK__DeliveryM__Marke__51300E55] FOREIGN KEY ([MarketDefId]) REFERENCES [dbo].[MarketDefinitions] ([Id]);


GO
PRINT N'Creating [dbo].[FK_ReportSection_UserType]...';


GO
ALTER TABLE [dbo].[ReportSection] WITH NOCHECK
    ADD CONSTRAINT [FK_ReportSection_UserType] FOREIGN KEY ([UserTypeID]) REFERENCES [dbo].[UserType] ([UserTypeID]);


GO
PRINT N'Creating [dbo].[FK__RoleActio__RoleI__65370702]...';


GO
ALTER TABLE [dbo].[RoleAction] WITH NOCHECK
    ADD CONSTRAINT [FK__RoleActio__RoleI__65370702] FOREIGN KEY ([RoleId]) REFERENCES [dbo].[Role] ([RoleID]);


GO
PRINT N'Creating [dbo].[FK__UserRole__RoleId__73852659]...';


GO
ALTER TABLE [dbo].[UserRole] WITH NOCHECK
    ADD CONSTRAINT [FK__UserRole__RoleId__73852659] FOREIGN KEY ([RoleId]) REFERENCES [dbo].[Role] ([RoleID]);


GO
PRINT N'Creating [dbo].[fk_section_module]...';


GO
ALTER TABLE [dbo].[Module] WITH NOCHECK
    ADD CONSTRAINT [fk_section_module] FOREIGN KEY ([SectionID]) REFERENCES [dbo].[Section] ([SectionID]);


GO
PRINT N'Creating [dbo].[FK__Subscript__Servi__690797E6]...';


GO
ALTER TABLE [dbo].[Subscription] WITH NOCHECK
    ADD CONSTRAINT [FK__Subscript__Servi__690797E6] FOREIGN KEY ([ServiceId]) REFERENCES [dbo].[Service] ([ServiceId]);


GO
PRINT N'Creating [dbo].[FK__Subscript__Servi__69FBBC1F]...';


GO
ALTER TABLE [dbo].[Subscription] WITH NOCHECK
    ADD CONSTRAINT [FK__Subscript__Servi__69FBBC1F] FOREIGN KEY ([ServiceTerritoryId]) REFERENCES [dbo].[ServiceTerritory] ([ServiceTerritoryId]);


GO
PRINT N'Creating [dbo].[FK__Subscript__Sourc__6AEFE058]...';


GO
ALTER TABLE [dbo].[Subscription] WITH NOCHECK
    ADD CONSTRAINT [FK__Subscript__Sourc__6AEFE058] FOREIGN KEY ([SourceId]) REFERENCES [dbo].[Source] ([SourceId]);


GO
PRINT N'Creating [dbo].[FK__Subscript__Subsc__6CD828CA]...';


GO
ALTER TABLE [dbo].[SubscriptionMarket] WITH NOCHECK
    ADD CONSTRAINT [FK__Subscript__Subsc__6CD828CA] FOREIGN KEY ([SubscriptionId]) REFERENCES [dbo].[Subscription] ([SubscriptionId]);


GO
PRINT N'Creating [dbo].[FK__Deliverab__Subsc__4D5F7D71]...';


GO
ALTER TABLE [dbo].[Deliverables] WITH NOCHECK
    ADD CONSTRAINT [FK__Deliverab__Subsc__4D5F7D71] FOREIGN KEY ([SubscriptionId]) REFERENCES [dbo].[Subscription] ([SubscriptionId]);


GO
PRINT N'Creating [dbo].[FK_dbo.OutletBrickAllocations_dbo.Territories_TerritoryId]...';


GO
ALTER TABLE [dbo].[OutletBrickAllocations_old] WITH NOCHECK
    ADD CONSTRAINT [FK_dbo.OutletBrickAllocations_dbo.Territories_TerritoryId] FOREIGN KEY ([TerritoryId]) REFERENCES [dbo].[Territories] ([Id]);


GO
PRINT N'Creating [dbo].[FK_Territories_Territories]...';


GO
ALTER TABLE [dbo].[Territories] WITH NOCHECK
    ADD CONSTRAINT [FK_Territories_Territories] FOREIGN KEY ([Id]) REFERENCES [dbo].[Territories] ([Id]);


GO
PRINT N'Creating [dbo].[FK__DeliveryT__Terri__45BE5BA9]...';


GO
ALTER TABLE [dbo].[DeliveryTerritory] WITH NOCHECK
    ADD CONSTRAINT [FK__DeliveryT__Terri__45BE5BA9] FOREIGN KEY ([TerritoryId]) REFERENCES [dbo].[Territories] ([Id]);


GO
PRINT N'Creating [dbo].[FK_dbo.OutletBrickAllocations1_dbo.Territories_TerritoryId]...';


GO
ALTER TABLE [dbo].[OutletBrickAllocations] WITH NOCHECK
    ADD CONSTRAINT [FK_dbo.OutletBrickAllocations1_dbo.Territories_TerritoryId] FOREIGN KEY ([TerritoryId]) REFERENCES [dbo].[Territories] ([Id]);


GO
PRINT N'Creating [copy].[FK__Subscript__Clien__662B2B3B]...';


GO
ALTER TABLE [copy].[Subscription] WITH NOCHECK
    ADD CONSTRAINT [FK__Subscript__Clien__662B2B3B] FOREIGN KEY ([ClientId]) REFERENCES [copy].[Clients] ([Id]);


GO
PRINT N'Creating [copy].[FK__Subscript__Count__671F4F74]...';


GO
ALTER TABLE [copy].[Subscription] WITH NOCHECK
    ADD CONSTRAINT [FK__Subscript__Count__671F4F74] FOREIGN KEY ([CountryId]) REFERENCES [dbo].[Country] ([CountryId]);


GO
PRINT N'Creating [copy].[FK__Subscript__DataT__681373AD]...';


GO
ALTER TABLE [copy].[Subscription] WITH NOCHECK
    ADD CONSTRAINT [FK__Subscript__DataT__681373AD] FOREIGN KEY ([DataTypeId]) REFERENCES [dbo].[DataType] ([DataTypeId]);


GO
PRINT N'Creating [copy].[FK__Subscript__Servi__690797E6]...';


GO
ALTER TABLE [copy].[Subscription] WITH NOCHECK
    ADD CONSTRAINT [FK__Subscript__Servi__690797E6] FOREIGN KEY ([ServiceId]) REFERENCES [dbo].[Service] ([ServiceId]);


GO
PRINT N'Creating [copy].[FK__Subscript__Servi__69FBBC1F]...';


GO
ALTER TABLE [copy].[Subscription] WITH NOCHECK
    ADD CONSTRAINT [FK__Subscript__Servi__69FBBC1F] FOREIGN KEY ([ServiceTerritoryId]) REFERENCES [dbo].[ServiceTerritory] ([ServiceTerritoryId]);


GO
PRINT N'Creating [copy].[FK__Subscript__Sourc__6AEFE058]...';


GO
ALTER TABLE [copy].[Subscription] WITH NOCHECK
    ADD CONSTRAINT [FK__Subscript__Sourc__6AEFE058] FOREIGN KEY ([SourceId]) REFERENCES [dbo].[Source] ([SourceId]);


GO
PRINT N'Creating [dbo].[FK_Extraction_Job]...';


GO
ALTER TABLE [dbo].[ExtractionJob] WITH NOCHECK
    ADD CONSTRAINT [FK_Extraction_Job] FOREIGN KEY ([ExtractionId]) REFERENCES [dbo].[Extraction] ([ExtractionId]);


GO
PRINT N'Creating [dbo].[FK_ExtractionJob_ExtractionJobStatus]...';


GO
ALTER TABLE [dbo].[ExtractionJob] WITH NOCHECK
    ADD CONSTRAINT [FK_ExtractionJob_ExtractionJobStatus] FOREIGN KEY ([StatusId]) REFERENCES [dbo].[ExtractionJobStatus] ([StatusId]);


GO
PRINT N'Creating [dbo].[FK_MarketDefBaseMap_History_MarketDefinitions_History]...';


GO
ALTER TABLE [dbo].[MarketDefBaseMap_History] WITH NOCHECK
    ADD CONSTRAINT [FK_MarketDefBaseMap_History_MarketDefinitions_History] FOREIGN KEY ([MarketDefId], [Version]) REFERENCES [dbo].[MarketDefinitions_History] ([MarketDefId], [Version]);


GO
PRINT N'Creating [dbo].[FK_MarketDefPack_History_MarketDefinitions_History]...';


GO
ALTER TABLE [dbo].[MarketDefPack_History] WITH NOCHECK
    ADD CONSTRAINT [FK_MarketDefPack_History_MarketDefinitions_History] FOREIGN KEY ([MarketDefinitionId], [MarketDefVersion]) REFERENCES [dbo].[MarketDefinitions_History] ([MarketDefId], [Version]);


GO
PRINT N'Refreshing [dbo].[vwDeliverables]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[vwDeliverables]';


GO
PRINT N'Refreshing [dbo].[vwMarket_LO]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[vwMarket_LO]';


GO
PRINT N'Refreshing [dbo].[vwTerritories_LO]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[vwTerritories_LO]';


GO
PRINT N'Refreshing [dbo].[vw_GroupsLevelWise]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[vw_GroupsLevelWise]';


GO
PRINT N'Refreshing [dbo].[vw_UserRoleMapping]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[vw_UserRoleMapping]';


GO
PRINT N'Altering [dbo].[vwTerritories]...';


GO

ALTER View [dbo].[vwTerritories]
AS
 SELECT Id, CASE WHEN SRA_Client is not null then Name+' ('+SRA_Client +'' + SRA_Suffix+')' ELSE Name END as Name, RootGroup_id, RootLevel_Id, Client_id, IsBrickBased, IsUsed, GuiId, SRA_Client, SRA_Suffix, AD, LD,CASE WHEN DimensionID is null then 0 ELSE DimensionID END as DimensionID,LastSaved
FROM Territories
GO
PRINT N'Creating [dbo].[vwGroupView]...';


GO
CREATE VIEW [dbo].[vwGroupView]
AS
SELECT a.Id, a.AttributeId, a.ParentId, c.GroupId, a.IsAttribute, c.Name AS groupname, b.Name AS attributename, b.OrderNo, b.MarketDefinitionId
FROM     dbo.MarketGroupMappings AS a INNER JOIN
                  dbo.MarketAttributes AS b ON a.AttributeId = b.AttributeId INNER JOIN
                  dbo.MarketGroups AS c ON a.GroupId = c.GroupId AND b.MarketDefinitionId = c.MarketDefinitionId
GO
PRINT N'Creating [dbo].[vwMarketDefinitionPacks]...';


GO
CREATE VIEW [dbo].[vwMarketDefinitionPacks]
AS
SELECT b.ATC1_Code AS ATC1, b.ATC2_Code AS ATC2, b.ATC3_Code AS ATC3, b.NEC1_Code AS NEC1, b.NEC2_Code AS NEC2, b.NEC3_Code AS NEC3, 
                  b.FRM_Flgs5_Desc AS Flagging, b.Frm_Flgs3_Desc AS Branding, b.Poison_Schedule AS PoisonSchedule, b.Form_Desc_Abbr AS Form, a.Id, a.Pack, a.MarketBase, 
                  a.MarketBaseId, a.GroupNumber, a.GroupName, a.Factor, a.PFC, a.Manufacturer, a.ATC4, a.NEC4, a.DataRefreshType, a.StateStatus, a.MarketDefinitionId, a.Alignment, 
                  a.Product, a.ChangeFlag, a.Molecule
FROM     dbo.MarketDefinitionPacks AS a INNER JOIN
                  dbo.DIMProduct_Expanded AS b ON a.PFC = b.PFC
GO
PRINT N'Altering [dbo].[BuildQueryForMarketBaseMap]...';


GO

ALTER PROCEDURE [dbo].[BuildQueryForMarketBaseMap]
 @MarketDefinitionId int, 
 @MarketBaseId int,
 @MarketDefBaseMapId int
AS
BEGIN
	SET NOCOUNT ON;

	declare @basefilterMcount int
	declare @additionalfilterMcount int
	declare @joinClause nvarchar(20)

	declare @trimVal int
	declare @finalClause nvarchar(100)
	set @trimval = 8
	set @finalClause = ' AND CHANGE_FLAG = ''A'''

	----------MARKET BASE : BASE FILTERS CONSTRUCTION IN WHERE CLAUSE-------------
	select B.Id, B.Name, C.ColumnName as Criteria, B.[Values], B.MarketBaseId, C.ColumnName, B.IsRestricted 
	into #baseFilters
	from dbo.BaseFilters B join [dbo].[CONFIG_ECP_MKT_DEF_FILTERS] C on replace(B.criteria, ' ', '' ) = C.FilterValue
	where B.MarketBaseId = @MarketBaseId

	select @basefilterMcount=count(*) from #baseFilters where [Name] = 'Molecule'

	select marketbaseid, Criteria + case when IsRestricted = 0 then ' in ' else ' not in ' end + '(' + [Values] + ') AND ' conditions
	into #columnsToAppend
	from #baseFilters 

	select * from #columnsToAppend

	declare @whereClause nvarchar(max)
	declare @selectSql nvarchar(max)

	select distinct @whereClause = ' where ' + conditions from
		(
			SELECT 
				b.marketbaseid, 
				(SELECT ' ' + a.conditions 
				FROM #columnsToAppend a
				WHERE a.marketbaseid = b.marketbaseid
				FOR XML PATH('')) [conditions]
			FROM #columnsToAppend b
			GROUP BY b.marketbaseid, b.conditions
			--ORDER BY 1
		)c
	
	--set @whereClause = left(@whereClause, len(@whereClause) - 4)
	set @whereClause = replace(@whereClause, '&amp;', '&')
	print('Base Filter: ' + @whereClause)

	

	----------MARKET DEF BASE MAP: ADDITIONAL FILTERS CONSTRUCTION -------------
	--drop table #additionalFilters
	declare @additionalFilterCount int
	declare @additionalFilterConditions nvarchar(max) = ''

	select @additionalFilterCount = count(AF.id) from AdditionalFilters AF join MarketDefinitionBaseMaps MB on AF.MarketDefinitionBaseMapId = MB.Id
	where MB.Id = @MarketDefBaseMapId
	--print(@additionalFilterCount)
	if @additionalFilterCount > 0
	begin
		select B.Id, B.Name, C.ColumnName as Criteria, B.[Values], B.MarketDefinitionBaseMapId, C.ColumnName, B.IsEnabled 
		into #additionalFilters
		from dbo.AdditionalFilters B join [dbo].[CONFIG_ECP_MKT_DEF_FILTERS] C on replace(B.criteria, ' ', '' ) = C.FilterValue
		where B.MarketDefinitionBaseMapId = @MarketDefBaseMapId

		select @additionalfilterMcount=count(*) from #additionalFilters where [Name] = 'Molecule'


		--drop table #columnsToAppend2
		select marketdefinitionbasemapid, Criteria + case when isEnabled = 1 then ' in ' else ' not in ' end + '(' + [Values] + ')' + 
		case when criteria like '%ATC%' OR criteria like '%NEC%' then ' OR ' else 'AND ' end conditions
		into #columnsToAppend2
		from #additionalFilters 

		--select * from #columnsToAppend2

		

		select distinct @additionalFilterConditions = conditions from
			(
				SELECT 
					b.marketdefinitionbasemapid, 
					(SELECT ' ' + a.conditions 
					FROM #columnsToAppend2 a
					WHERE a.marketdefinitionbasemapid = b.marketdefinitionbasemapid
					FOR XML PATH('')) [conditions]
				FROM #columnsToAppend2 b
				GROUP BY b.marketdefinitionbasemapid, b.conditions
				--ORDER BY 1
			)c

		set @additionalFilterConditions = replace(@additionalFilterConditions, '&amp;', '&') 
		print('Additional Filters: ' + @additionalFilterConditions)

		set @trimVal = 6
		set @finalClause = ') AND CHANGE_FLAG = ''A'''
	end
	--------Final SELECT query CONSTRUCTION-----------
	--print('reached inside final query')
	if @basefilterMcount > 0 or @additionalfilterMcount > 0 
	begin
		set @joinClause = 'join' 
	end
	else 
	begin
		set @joinClause = 'left join'
	end 
	set @selectSql = 'select distinct ' + cast(@MarketBaseId as nvarchar) + ' as MarketBaseId, PFC, dimproduct_Expanded.FCC, CHANGE_FLAG from dimproduct_Expanded ' + @joinClause + ' dmmoleculeconcat M on dimproduct_Expanded.fcc = M.fcc' 
					+ @whereClause + '( ' + @additionalFilterConditions + ' )' 

	set @selectSql = left(@selectSql, len(@selectSql) - @trimVal) + @finalClause
	print('Final Query: ' + @selectSql)

	insert into MarketBaseMapQuery VALUES
	(@MarketDefinitionId, @MarketBaseId, @MarketDefBaseMapId, @selectSql)


END
GO
PRINT N'Altering [dbo].[IRPDeleteMarketDefinitionFromDimensionID]...';


GO
ALTER Procedure [dbo].[IRPDeleteMarketDefinitionFromDimensionID]
@DimensionID as int
AS
BEGIN
Declare @MarketDefID int

select id into #tid from marketdefinitions where DimensionID=@DimensionID

while exists(select * from #tid)
	begin
		select @MarketDefID = (select top 1 id
							from #tid
							order by Id asc)

		-------CALL SP TO PROCESS EACH MARKET DEFINITION-------
		print(@MarketDefID)
		Delete from DeliveryMarket Where MarketDefId=@MarketDefID
		Delete from AdditionalFIlters Where MarketDefinitionBaseMapId in (Select Id from MarketDefinitionBaseMaps Where MarketDefinitionID=@MarketDefID)
		Delete From MarketDefinitionBaseMaps Where MarketDefinitionID=@MarketDefID
		Delete From MarketDefinitionPacks Where MarketDefinitionId=@MarketDefID
		Delete From MarketDefinitions Where Id=@MarketDefID

		delete #tid where id = @MarketDefID
	end

	drop table #tid

END
GO
PRINT N'Altering [dbo].[IRPImportMarketDefinition]...';


GO

ALTER PROCEDURE [dbo].[IRPImportMarketDefinition] 
	-- Add the parameters for the stored procedure here
	@pDimensionId int 
AS
BEGIN
	SET NOCOUNT ON;
	-- Delete existing Market Definition if any
	exec [dbo].[IRPDeleteMarketDefinitionFromDimensionID] @pDimensionId

	--## STEP 1: INSERT INTO MarketDefinitions
	insert into MarketDefinitions (Name, Description, ClientId, GUIID, DimensionId)
	--select replace(replace(replace(DimensionName,'/',' '), '&', ' '),',',' '), NULL, C.ClientId, NULL, DimensionId
	select DimensionName, NULL, C.ClientId, NULL, DimensionId
	from IRP.Dimension I join IRP.ClientMap C on I.ClientID = C.IRPClientId
	where DimensionID = @pDimensionId and VersionTo > 0

	--select * from MarketDefinitions

	--## STEP 2: INSERT INTO MarketDefinitionBaseMaps
	declare @marketDefinitionId int
	select @marketDefinitionId = Id from MarketDefinitions where DimensionId = @pDimensionId

	insert into MarketDefinitionBaseMaps (Name, MarketBaseId, DataRefreshType, MarketDefinitionId)
	select M.Name +' ' + M.Suffix, D.MarketBaseId, 'dynamic', @marketDefinitionId
	from IRP.DimensionBaseMap D join MarketBases M on D.MarketBaseId = M.Id
	where DimensionId = @pDimensionId

	--select * from MarketDefinitionBaseMaps

	--## STEP 3: INSERT INTO MarketDefinitionPacks
	declare @marketBaseId int
	declare @marketBaseName nvarchar(200)
	declare @whereClause nvarchar(max)
	declare @unionClause nvarchar(max)
	declare @insertStatement nvarchar(max) 
	set @insertStatement = N'insert into MarketDefinitionPacks (Pack, MarketBase, MarketBaseId, PFC, Manufacturer, ATC4, NEC4, DataRefreshType, MarketDefinitionId, Alignment, Product, Molecule)'

	select a.* into #loopTable from IRP.DimensionBaseMap a join marketbases b on a.marketbaseid = b.id where DimensionId = @pDimensionId

	declare @pMarketBaseId int
	set @unionClause = ''

	while exists(select * from #loopTable)
	begin
		-------PROCESSING OF QUERY CONSTRUCTION USING UNION FOR MULTIPLE MARKET BASES-------
		select @pMarketBaseId = (select top 1 marketBaseId from #loopTable order by marketBaseId asc)			
		select @marketBaseName = Name + ' ' + Suffix from MarketBases M where Id = @pMarketBaseId

		select @whereClause = ' where ' + 
		case when c.FilterValue = 'Molecule' then c.ColumnName + ' like ' + '(' + left([Values], 1) + '%' + substring([Values], 2, len([Values]) -2) + '%' + right([Values], 1) +')'
		else c.ColumnName + ' in ' + '(' + [Values] +')'  end 
		from basefilters b join [dbo].[CONFIG_ECP_MKT_DEF_FILTERS] c on b.Criteria = c.FilterValue
		where MarketBaseId = @pMarketBaseId
		print('where clause :' +@whereClause)

		set @unionClause = @unionClause	+ ' select Pack_Description, '''+ @marketBaseName +''', ' + cast(@pMarketBaseId as varchar) + ', PFC, ORG_LONG_NAME, ATC4_Code, NEC4_Code, ''dynamic'', ' + cast(@marketDefinitionId as varchar) + ', ''dynamic-right'' 
		, ProductName as Product, M.Description as Molecule from DimProduct_Expanded left join DMMoleculeConcat M on M.FCC = DimProduct_Expanded.FCC' + @whereClause + ' UNION '

		print('Union Clause')
		print(@unionClause)
		--EXEC(@insertStatement+@whereClause)

		delete #loopTable
		where MarketBaseId = @pMarketBaseId
	end


	drop table #loopTable
	declare @finalQuery varchar(max)
	print('union clause:' +@unionClause)
	print('in+unclause: ' + @insertStatement+@unionClause)
					
	set @finalQuery = left(@insertStatement+@unionClause, len(@insertStatement+@unionClause)-6)
		
	print('Final Query: ' + @finalQuery)
	EXEC(@finalQuery)
	
	update marketdefinitionpacks
	set groupname=''
	where groupname is null

	update marketdefinitionpacks
	set groupnumber=''
	where groupnumber is null	
	
	--EXEC(@finalQuery)
	
	--select * from MarketDefinitionPacks
END


--[dbo].[IRPImportMarketDefinition2] 2150
--[dbo].[IRPImportMarketDefinition2] 3916
--[dbo].[IRPImportMarketDefinition2] 4280
--[dbo].[IRPImportMarketDefinition2] 2812
GO
PRINT N'Altering [dbo].[GenerateExcludedPacksReport]...';


GO

ALTER PROCEDURE [dbo].[GenerateExcludedPacksReport] 
AS
BEGIN
	SET NOCOUNT ON;

	exec [dbo].[BuildQueryForExclusion]

	declare @query nvarchar(max)
	truncate table ExcludedPacksReport

	select * into #loopTable5 from PackExclusionQuery
		select * from #loopTable5

		declare @pMarketBaseMapId int

		while exists(select * from #loopTable5)
		begin
			select @pMarketBaseMapId = (select top 1 MarketDefBaseMapId
							   from #loopTable5
							   order by MarketDefBaseMapId asc)

			print(@pMarketBaseMapId)
			select @query = query from packexclusionquery where MarketDefBaseMapId = @pMarketBaseMapId
			exec('insert into ExcludedPacksReport ' + @query)
			delete #loopTable5 where MarketDefBaseMapId = @pMarketBaseMapId
		end

		drop table #loopTable5

END
GO
PRINT N'Altering [dbo].[IRPImportMarketDefinition_singleMB]...';


GO


ALTER PROCEDURE [dbo].[IRPImportMarketDefinition_singleMB] 
	-- Add the parameters for the stored procedure here
	@pDimensionId int 
AS
BEGIN
	SET NOCOUNT ON;

	--## STEP 1: INSERT INTO MarketDefinitions
	insert into MarketDefinitions (Name, Description, ClientId, GUIID, DimensionId)
	select DimensionName, NULL, C.ClientId, NULL, DimensionId
	from IRP.Dimension I join IRP.ClientMap C on I.ClientID = C.IRPClientId
	where DimensionID = @pDimensionId and VersionTo > 0

	--select * from MarketDefinitions

	--## STEP 2: INSERT INTO MarketDefinitionBaseMaps
	declare @marketDefinitionId int
	select @marketDefinitionId = Id from MarketDefinitions where DimensionId = @pDimensionId

	insert into MarketDefinitionBaseMaps (Name, MarketBaseId, DataRefreshType, MarketDefinitionId)
	select M.Name, D.MarketBaseId, 'dynamic', @marketDefinitionId
	from IRP.DimensionBaseMap D join MarketBases M on D.MarketBaseId = M.Id
	where DimensionId = @pDimensionId

	--select * from MarketDefinitionBaseMaps

	--## STEP 3: INSERT INTO MarketDefinitionPacks
	declare @marketBaseId int
	declare @marketBaseName nvarchar(200)
	select @marketBaseId=M.Id, @marketBaseName=Name 
	from MarketBases M join IRP.DimensionBaseMap D on M.Id = D.MarketBaseId
	where D.DimensionId = @pDimensionId

	declare @whereClause nvarchar(max)
	select @whereClause = ' where ' + c.ColumnName + ' in ' + '(' + [Values] +')'  
	from basefilters b join [dbo].[CONFIG_ECP_MKT_DEF_FILTERS] c on b.Criteria = c.FilterValue
	where MarketBaseId = (select MarketBaseId from IRP.DimensionBaseMap where DimensionId = @pDimensionId)
	print(@whereClause)

	declare @insertStatement nvarchar(max) 
	set @insertStatement = N'insert into MarketDefinitionPacks (Pack, MarketBase, MarketBaseId, PFC, Manufacturer, ATC4, NEC4, DataRefreshType, MarketDefinitionId, Alignment)
	select Pack_Description, '''+ @marketBaseName +''', ' + cast(@marketBaseId as varchar) + ', PFC, ORG_LONG_NAME, ATC4_Code, NEC4_Code, ''dynamic'', ' + cast(@marketDefinitionId as varchar) + ', ''dynamic-right'' 
	from DimProduct_Expanded'

	print(@insertStatement+@whereClause)
	EXEC(@insertStatement+@whereClause)

	--select * from MarketDefinitionPacks
END



--[dbo].[IRPImportMarketDefinition] 3916
--[dbo].[IRPImportMarketDefinition] 4280
--[dbo].[IRPImportMarketDefinition] 2812
--[dbo].[IRPImportMarketDefinition] 4605
GO
PRINT N'Altering [dbo].[IRPImportPackBaseMarketDefinitionV2]...';


GO




ALTER PROCEDURE [dbo].[IRPImportPackBaseMarketDefinitionV2] 
	-- Add the parameters for the stored procedure here
	@pDimensionId int 
AS
BEGIN
	SET NOCOUNT ON;

	--## STEP 1: INSERT INTO MarketDefinitions
	insert into MarketDefinitions (Name, Description, ClientId, GUIID, DimensionId)
	select replace(replace(replace(DimensionName,'/',' '), '&', ' '),',',' '), NULL, C.ClientId, NULL, DimensionId
	from IRP.Dimension I join IRP.ClientMap C on I.ClientID = C.IRPClientId
	where DimensionID = @pDimensionId and VersionTo > 0

	--select * from MarketDefinitions

	--## STEP 2: INSERT INTO MarketDefinitionBaseMaps
	declare @marketDefinitionId int
	select @marketDefinitionId = Id from MarketDefinitions where DimensionId = @pDimensionId

	insert into MarketDefinitionBaseMaps (Name, MarketBaseId, DataRefreshType, MarketDefinitionId)
	select M.Name + ' ' + M.Suffix , D.MarketBaseId, 'static', @marketDefinitionId
	from IRP.DimensionBaseMap D join MarketBases M on D.MarketBaseId = M.Id
	where DimensionId = @pDimensionId

	--select * from MarketDefinitionBaseMaps

	--## STEP 3: INSERT INTO MarketDefinitionPacks
	declare @marketBaseId int
	declare @marketBaseName nvarchar(200)

	declare @whereClause nvarchar(max)
	declare @unionClause nvarchar(max)
	declare @insertStatement nvarchar(max) 

	select top 1 @marketBaseId=M.Id, @marketBaseName=Name + ' ' + Suffix 
	from MarketBases M join IRP.DimensionBaseMap D on M.Id = D.MarketBaseId
	where D.DimensionId = @pDimensionId

	select  DISTINCT
	CASE WHEN TRY_CONVERT(int, p.item) IS not NULL   
    THEN p.item
    ELSE null  
    END AS FCC
	,p.Name,
	case Charindex(';', g.shortname)
	when 0 then null
	when 1 then null
	else Substring(g.shortname, 1,Charindex(';', g.shortname)-1)
	end as groupname,
	case Charindex(';', g.shortname)
	when 0 then null
	when LEN(g.shortname) then null
	else Substring(g.shortname, Charindex(';', g.shortname)+8, LEN(g.shortname))
	end as factor,
	g.number [groupno]
	into #fcctemp
	from irp.items g
	join irp.items p
	on g.itemid = p.parent
	where g.dimensionid = @pDimensionId
	and p.itemtype = 1
	and p.versionto > 0
	

	--insert into MarketDefinitionPacks (Pack, MarketBase, MarketBaseId, PFC, Manufacturer, ATC4, NEC4, DataRefreshType, MarketDefinitionId, Alignment, GroupNumber, GroupName, Factor, Molecule)
	--select distinct p.Pack_Description, @marketBaseName, cast(@marketBaseId as varchar), p.PFC, p.ORG_LONG_NAME, p.ATC4_Code, p.NEC4_Code, 'static', cast(@marketDefinitionId as varchar), 'dynamic-right', f.groupno, f.groupname, f.factor, M.Description
	--from DimProduct_Expanded p
	--join #fcctemp f	on f.fcc = p.fcc
	--left join DMMoleculeConcat M on M.FCC = p.FCC

	select distinct ATC4 into #ATC4 from MarketDefinitionPacks where Alignment like '%right%' and MarketDefinitionID=@marketDefinitionId


	select count(*) from #fcctemp
	select 'def id:' + cast(@marketDefinitionId as varchar)

	

	-------------FOR STATIC LEFT -----------------
	set @insertStatement = N'insert into MarketDefinitionPacks (Pack, MarketBase, MarketBaseId, PFC, Manufacturer, ATC4, NEC4, DataRefreshType, MarketDefinitionId, Alignment, Molecule)'

	select * into #loopTable from IRP.DimensionBaseMap where DimensionId = @pDimensionId 

	declare @pMarketBaseId int
	set @unionClause = ''

	while exists(select * from #loopTable)
	begin
		-------PROCESSING OF QUERY CONSTRUCTION USING UNION FOR MULTIPLE MARKET BASES-------
		select @pMarketBaseId = (select top 1 marketBaseId from #loopTable order by marketBaseId asc)			
		select @marketBaseName = Name + ' ' + Suffix from MarketBases M where Id = @pMarketBaseId

		select @whereClause = ' where ' + c.ColumnName + ' in ' + '(' + [Values] +')'   
		--select @whereClause = ' where  ATC4_Code in (select * from #ATC4) '
		from basefilters b join [dbo].[CONFIG_ECP_MKT_DEF_FILTERS] c on b.Criteria = c.FilterValue
		where MarketBaseId = @pMarketBaseId
		 
		print(@whereClause)

		set @unionClause = @unionClause	+ ' select Pack_Description, '''+ @marketBaseName +''' MarketBase, ' + cast(@pMarketBaseId as varchar) + ' MarketBaseId, PFC, ORG_LONG_NAME, ATC4_Code, NEC4_Code, ''static''  DataRefreshType, ' + cast(@marketDefinitionId as varchar) + ' MarketDefinitionId, ''static-left'' Alignment 
		, M.Description as Molecule from DimProduct_Expanded left join DMMoleculeConcat M on M.FCC = DimProduct_Expanded.FCC' + @whereClause + ' UNION '

		print('Union Clause')
		print(@unionClause)
		--EXEC(@insertStatement+@whereClause)

		delete #loopTable
		where MarketBaseId = @pMarketBaseId
	end


	drop table #loopTable
	--declare @finalQuery varchar(max)
	--set @unionClause = left(@unionClause, len(@unionClause)-6) 
	--set @finalQuery = @insertStatement + 'select * from (' + @unionClause + ')Z where Z.PFC not in (select distinct PFC from dbo.DIMPRODUCT_EXPANDED where FCC in (select distinct FCC from #fcctemp))'
	----set @finalQuery = left(@insertStatement+@finalQuery, len(@insertStatement+@finalQuery) - 4)
	--print('Final Query: ' + @finalQuery)

	
	--EXEC(@finalQuery)
	--Delete from MarketDefinitionPacks where MarketDefinitionId=@marketDefinitionId and ATC4 not in (select * from #ATC4)
	
	drop table #fcctemp

END
GO
PRINT N'Altering [dbo].[IRPImportPackBaseMarketDefinitionV3]...';


GO



ALTER PROCEDURE [dbo].[IRPImportPackBaseMarketDefinitionV3] 
	-- Add the parameters for the stored procedure here
	@pDimensionId int 
AS
BEGIN
	SET NOCOUNT ON;

	--## STEP 1: INSERT INTO MarketDefinitions
	insert into MarketDefinitions (Name, Description, ClientId, GUIID, DimensionId)
	select replace(replace(replace(DimensionName,'/',' '), '&', ' '),',',' '), NULL, C.ClientId, NULL, DimensionId
	from IRP.Dimension I join IRP.ClientMap C on I.ClientID = C.IRPClientId
	where DimensionID = @pDimensionId and VersionTo > 0

	--select * from MarketDefinitions

	--## STEP 2: INSERT INTO MarketDefinitionBaseMaps
	declare @marketDefinitionId int
	select @marketDefinitionId = Id from MarketDefinitions where DimensionId = @pDimensionId

	insert into MarketDefinitionBaseMaps (Name, MarketBaseId, DataRefreshType, MarketDefinitionId)
	select M.Name + ' ' + M.Suffix , D.MarketBaseId, 'static', @marketDefinitionId
	from IRP.DimensionBaseMap D join MarketBases M on D.MarketBaseId = M.Id
	where DimensionId = @pDimensionId

	--select * from MarketDefinitionBaseMaps

	--## STEP 3: INSERT INTO MarketDefinitionPacks
	declare @marketBaseId int
	declare @marketBaseName nvarchar(200)

	declare @whereClause nvarchar(max)
	declare @unionClause nvarchar(max)
	declare @insertStatement nvarchar(max) 

	select top 1 @marketBaseId=M.Id, @marketBaseName=Name + ' ' + Suffix 
	from MarketBases M join IRP.DimensionBaseMap D on M.Id = D.MarketBaseId
	where D.DimensionId = @pDimensionId

	select  DISTINCT
	CASE WHEN TRY_CONVERT(int, p.item) IS not NULL   
    THEN p.item
    ELSE null  
    END AS FCC
	,p.Name,
	case Charindex(';', g.shortname)
	when 0 then null
	when 1 then null
	else Substring(g.shortname, 1,Charindex(';', g.shortname)-1)
	end as groupname,
	case Charindex(';', g.shortname)
	when 0 then null
	when LEN(g.shortname) then null
	else Substring(g.shortname, Charindex(';', g.shortname)+8, LEN(g.shortname))
	end as factor,
	g.number [groupno]
	into #fcctemp
	from irp.items g
	join irp.items p
	on g.itemid = p.parent
	where g.dimensionid = @pDimensionId
	and p.itemtype = 1
	and p.versionto > 0
	
	insert into MarketDefinitionPacks (Pack, MarketBase, MarketBaseId, PFC, Manufacturer, ATC4, NEC4, DataRefreshType, MarketDefinitionId, Alignment, GroupNumber, GroupName, Factor, Molecule)
	select distinct p.Pack_Description, @marketBaseName, cast(@marketBaseId as varchar), p.PFC, p.ORG_LONG_NAME, p.ATC4_Code, p.NEC4_Code, 'static', cast(@marketDefinitionId as varchar), 'dynamic-right', f.groupno, f.groupname, f.factor, M.Description
	from DimProduct_Expanded p
	join #fcctemp f	on f.fcc = p.fcc
	left join DMMoleculeConcat M on M.FCC = p.FCC

	select count(*) from #fcctemp
	select 'def id:' + cast(@marketDefinitionId as varchar)

	

	-------------FOR STATIC LEFT -----------------
	select distinct ATC4 into #ATC4 from MarketDefinitionPacks where Alignment like '%right%' and MarketDefinitionID=@marketDefinitionId
	print('#ATC4 :')

	set @insertStatement = N'insert into MarketDefinitionPacks (Pack, MarketBase, MarketBaseId, PFC, Manufacturer, ATC4, NEC4, DataRefreshType, MarketDefinitionId, Alignment, Molecule)'

	select * into #loopTable from IRP.DimensionBaseMap where DimensionId = @pDimensionId 

	declare @pMarketBaseId int
	set @unionClause = ''

	while exists(select * from #loopTable)
	begin
		-------PROCESSING OF QUERY CONSTRUCTION USING UNION FOR MULTIPLE MARKET BASES-------
		select @pMarketBaseId = (select top 1 marketBaseId from #loopTable order by marketBaseId asc)			
		select @marketBaseName = Name + ' ' + Suffix from MarketBases M where Id = @pMarketBaseId
			
		IF EXISTS (select distinct Criteria from basefilters where MarketBaseId=@pMarketBaseId and criteria not like 'ATC%')
			BEGIN
				select @whereClause = ' where ATC4_code in (select * from #ATC4) AND  ' + c.ColumnName + ' in ' + '(' + [Values] +')'  
				from basefilters b join [dbo].[CONFIG_ECP_MKT_DEF_FILTERS] c on b.Criteria = c.FilterValue
				where MarketBaseId = @pMarketBaseId
				print('whereClause IF: ' + @whereClause)
			END
		ELSE
			BEGIN
				select @whereClause = ' where ' + c.ColumnName + ' in ' + '(' + [Values] +')'  
				from basefilters b join [dbo].[CONFIG_ECP_MKT_DEF_FILTERS] c on b.Criteria = c.FilterValue
				where MarketBaseId = @pMarketBaseId
				print('whereClause ELSE: ' + @whereClause)
			END 


		set @unionClause = @unionClause	+ ' select Pack_Description, '''+ @marketBaseName +''' MarketBase, ' + cast(@pMarketBaseId as varchar) + ' MarketBaseId, PFC, ORG_LONG_NAME, ATC4_Code, NEC4_Code, ''static''  DataRefreshType, ' + cast(@marketDefinitionId as varchar) + ' MarketDefinitionId, ''static-left'' Alignment 
		, M.Description as Molecule from DimProduct_Expanded left join DMMoleculeConcat M on M.FCC = DimProduct_Expanded.FCC' + @whereClause + ' UNION '

		print('Union Clause')
		print(@unionClause)
		--EXEC(@insertStatement+@whereClause)

		delete #loopTable
		where MarketBaseId = @pMarketBaseId
	end


	drop table #loopTable
	declare @finalQuery varchar(max)
	set @unionClause = left(@unionClause, len(@unionClause)-6) 
	set @finalQuery = @insertStatement + 'select * from (' + @unionClause + ')Z where Z.PFC not in (select distinct PFC from dbo.DIMPRODUCT_EXPANDED where FCC in (select distinct FCC from #fcctemp))'
	--set @finalQuery = left(@insertStatement+@finalQuery, len(@insertStatement+@finalQuery) - 4)
	print('Final Query: ' + @finalQuery)

	
	EXEC(@finalQuery)
	
	drop table #fcctemp

END
GO
PRINT N'Altering [dbo].[IRPImportDeliverablesNonIAM_TEST]...';


GO

ALTER procedure [dbo].[IRPImportDeliverablesNonIAM_TEST]
( @ClientNo int)
As
BEGIN

	DECLARE @RowsToProcess  int,@RP int
	DECLARE @CurrentRow     int,@CR int

	DECLARE @ClientId  int,@ClientName varchar(500),@bkt_Sel varchar(100),@cat_Sel varchar(100),@RptNo int,@RptName varchar(500)
	
	DECLARE @Lvl_total char(8)

	DECLARE @Value int,@writerParamId int,@WriterId int
	DECLARE @FreqType int,@FreqId int, @Period varchar(50), @Service varchar(100),@DataType varchar(100), @Source varchar(100),@DeliveryType varchar(100),@ReportWriterCode varchar(50),
	@XREFClient int

	DECLARE @Deliverables TABLE (RowID int not null primary key identity(1,1), Clientid int,ClientName varchar(100), BKT_SEL varchar(100),CAT_SEL varchar(100),
	FreqType int,Frequency int, Period varchar(100), [Service] varchar(100),DataType varchar(100), Source varchar(100),ReportWriter varchar(50),Country varchar(10),DeliveryType varchar(100),
	 RPT_NO int, XREF_Client int, report_name varchar(500), lvl_total char(8))  
	--Kimberley Clark - 412,AZ - 044,NicePak - 017,P&G - 481

	--set @ClientNo =044
	set @DeliveryType='FlatFile'
	--Get Client Id
	 --Select @ClientId = ClientId, @ClientName = ClientName from IRP.Client where ClientNo=@ClientNo and VersionTo=32767
	   /*  This  below change is done to accomadate the client Merging done in Everest */
		Select  @ClientId =irpclientid, @ClientName =Name from dbo.Clients where id in (
		select clientID from irp.ClientMap where IRPClientNo = @ClientNo )
	 
	DECLARE @table1 TABLE (RowID int not null primary key identity(1,1), clientNo int,rptNo int, bkt_sel varchar(100),cat_sel varchar(100),XREF_Client int,rptSelection varchar(500), report_name varchar(500),lvl_total char(8) )  
	INSERT into @table1 (clientNo,rptNo, bkt_sel, cat_sel, XREF_Client,rptSelection,report_name, lvl_total) 
	select  CLD.CLIENT_NO, CLD.RPT_NO, BKT_SEL, CAT_SEL, XREF_CLIENT,RPT_SELECTION, report_name,lvl_total from IRP.CLD 
	inner join IRP.RD on CLD.CLIENT_NO = RD.CLIENT_NO and CLD.RPT_NO = RD.RPT_NO
	where CLD.CLIENT_NO=@ClientNo and RD.RPT_SELECTION not in ('ID','IA','IB','IW')

	SET @RowsToProcess=@@ROWCOUNT
	--select * from @table1
	SET @CurrentRow=0
	WHILE @CurrentRow<@RowsToProcess
	BEGIN
		SET @CurrentRow=@CurrentRow+1
		SELECT  @RptNo =rptNo,  @RptName=report_name, @bkt_Sel = BKT_SEL,@cat_Sel= cat_sel, @ReportWriterCode = rptSelection, @XREFClient=XREF_Client, @Lvl_total = lvl_total
		FROM @table1 WHERE RowID=@CurrentRow
			
			--Report writer
			--select * from IRP.CLD where CLIENT_NO = 44 and RPT_SELECTION not in ('ID','IA','IB','IW')
			-- Frequency
			set @FreqType=1 -- monthly
			set @FreqId = 1 
			--Source
			Set @source ='Sell In'
			
			
			--Period
			if @bkt_Sel = 'F1M1'  or @bkt_Sel = 'H1M1' or @bkt_Sel = 'OA1Y'
			set @Period = '1 Year'
			else if @bkt_Sel = 'FLT1'  or @bkt_Sel = 'FLT2' or @bkt_Sel = 'H2M1' or @bkt_Sel = 'H2W1' or @bkt_Sel = 'OA2Y' or @bkt_Sel = 'RXF2' or @bkt_Sel = 'T1RA' or @bkt_Sel = 'T5UN'
			set @Period = '2 Years'
			else if @bkt_Sel = 'F3M1'  or @bkt_Sel = 'F3M2' or @bkt_Sel = 'F3M3' or @bkt_Sel = 'H3M1'
			set @Period = '3 Years'
			else if @bkt_Sel = 'F5M1'  or @bkt_Sel = 'F5M2' or @bkt_Sel = 'F5M3' or @bkt_Sel = 'H5M1' or @bkt_Sel = 'H5M3'
			set @Period = '5 Years'
			
			--select * from dbo.CLIENTEXCEPTIONS where ClientNo=44
			--select * from dbo.ClientMfr where ClientNo=44
		
		insert into @Deliverables(clientid,ClientName, cat_sel, FreqType,Frequency, Period, [Service],DataType,Source,ReportWriter,country,deliveryType,RPT_NO, XREF_Client, report_name, lvl_total )
			values (@ClientId,@ClientName, @cat_Sel, @FreqType,@FreqId,@Period,@Service,@DataType,@Source,@ReportWriterCode,'AUS',@DeliveryType,@RptNo,@XREFClient, @rptname, @Lvl_total)
		

	END
--select * from @Deliverables

TRUNCATE TABLE dbo.IRG_Deliverables_NonIAM
insert into dbo.IRG_Deliverables_NonIAM
	select * from @Deliverables
	SELECT * FROM dbo.IRG_Deliverables_NonIAM
-- Insert records into subscription & deliverables from IRG_Deliverables_IAM table
	--execute dbo.IRPProcessDeliverablesNonIAM
	
	--delete from dbo.IRG_Deliverables_NonIAM where Clientid=@ClientId
END

--exec [IRPImportDeliverablesNonIAM_TEST] 330

--select * from clients where irpclientno = 330
GO
PRINT N'Altering [dbo].[IRPImportTerritoryQC]...';


GO


ALTER PROCEDURE [dbo].[IRPImportTerritoryQC] 
		 
AS
BEGIN
	SET NOCOUNT ON;

	--------------Territory check---------------------
	---ECP--------------------------------------------
	select distinct A.territoryid,t.DimensionId,t.name,A.ItemNum,'N' as IsRef into #source
	from (select distinct o.territoryid, count(distinct o.brickOutletcode) as ItemNum from outletbrickallocations o
	group by o.territoryid)A
	join territories t on A.territoryid=t.id
	where t.id=t.dimensionid
	order by dimensionid 

	---IRG---------------------------------------------
	--drop table #t
	select distinct dimensionid,max(levelno) as maxlevel into #t from irp.items
	where dimensionid in (select distinct dimensionid from territories) and versionto>0
	group by dimensionid

	select distinct t.dimensionid, count(i.item)as IRPItems into #dest from irp.items i
	join #t t on i.dimensionid=t.dimensionid and i.levelno=t.maxlevel
	where i.dimensionid in (select distinct dimensionid from territories)
	and i.versionto=32767 
	group by t.dimensionid
	order by t.dimensionid

	---Reference territory---------------------------------------------

	---ECP-----------------------------------
	insert into #source
	select distinct A.territoryid,t.DimensionId,t.name,A.ItemNum, 'Y' as IsRef
	from (select distinct o.territoryid, count(distinct o.brickOutletcode) as ItemNum from outletbrickallocations o
	group by o.territoryid)A
	join territories t on A.territoryid=t.id
	where t.id<>t.dimensionid
	and t.Guiid is null
	order by dimensionid 

	---IRG------------------------------------

	--drop table #p
	select distinct dimensionid,max(levelno) as maxlevel into #p from irp.items
	where dimensionid in (select distinct dimensionid from territories where id=dimensionid) and versionto>0
	group by dimensionid

	insert into #dest
	select D.dimensionid,A.IRPItems from (select distinct t.dimensionid, count(i.item)as IRPItems from irp.items i
	join #p t on i.dimensionid=t.dimensionid and i.levelno=t.maxlevel
	where i.dimensionid in (select distinct dimensionid from territories)
	and i.versionto=32767 
	group by t.dimensionid
	)A join irp.dimension d on A.dimensionid=d.refdimensionid
	where d.dimensionid in (select distinct dimensionid from territories where id<>dimensionid)
	order by d.dimensionid

--Final Report:
select  distinct a.territoryid,b.dimensionid as DimensionID,a.Name,a.IsRef, b.IRPItems as IRPItemCount, a.ItemNum as ECPItemCount, isnull(b.IRPItems,0)-isnull(a.ItemNum,0) as ItemDifference
from #source a left join #dest b on a.dimensionid=b.dimensionid 
order by b.dimensionid


--AD LD SRA Suffix check
--drop table #SRA
select a.id as TerritoryId,a.DimensionId, a.Name,b.SRAClient as IRP_SRA_Client,a.SRA_Client as ECP_SRA_Client,
b.SRASuffix as IRP_SRASuffix,a.SRA_Suffix as ECP_SRASuffix, b.AD as IRP_AD,a.AD as ECP_AD,b.LD as IRP_LD,a.LD as ECP_LD  
into #SRA 
from territories a
join [IRP].[GeographyDimOptions] b
on a.dimensionid=b.dimensionid
where b.versionto>0
and a.guiid is null and a.dimensionid is not null


----Not matched SRA/Suffix/AD/LD Report
select TerritoryId,DimensionId, Name,IRP_SRA_Client,ECP_SRA_Client,IRP_SRASuffix,ECP_SRASuffix,IRP_AD,ECP_AD,IRP_LD,ECP_LD,'Not Matched' as CheckInfo
from #SRA
where 
isnull(IRP_SRA_Client,'')<>isnull(ECP_SRA_Client,'')
OR isnull(IRP_SRASuffix,'')<>isnull(ECP_SRASuffix,'')
OR isnull(IRP_AD,'')<>isnull(ECP_AD,'')
OR isnull(IRP_LD,'')<>isnull(ECP_LD,'')


--select * from [IRP].[GeographyDimOptions]
----count of territory per client-------

select distinct Clientid, count(distinct dimensionid) TerrCount into #t1 from 
irp.dimension where clientid in (select distinct irpclientid from irp.clientmap)
and baseid in (1,2,11,12) and versionto>0
group by clientid

select distinct client_id, count(distinct id) as TerrCount into #t2 from
territories where GuiId is null and dimensionid is not null
group by client_id

--count report
select a.clientid,d.name as ClientName,a.TerrCount as IRPTerrCount,b.TerrCount as ECPTerrCount,a.TerrCount-b.TerrCount as [Difference]
from #t1 a left join irp.clientmap c on a.clientid=c.irpclientid
left join #t2 b on c.clientid=b.client_id
join clients d on d.id=b.client_id
order by a.clientid


END


--exec [dbo].[IRPImportTerritoryQC]

--drop table #source
--drop table #dest
--drop table #exPacks
GO
PRINT N'Altering [dbo].[IRPProcessDeliverablesIAM]...';


GO

ALTER procedure [dbo].[IRPProcessDeliverablesIAM]
As
BEGIN
	declare @Client varchar(100),@service varchar(100),@country varchar(100),@Datatype varchar(100),@source varchar(100),@DeliveryType varchar(100),
	@ReportWriterCode varchar(100),@ReportWriter varchar(100),@FrequencyType varchar(100),@Frequency varchar(500),@DeliverTo varchar(100), @Years varchar(100)

	declare @ClientId int,@countryId int,@serviceId int, @sourceId int,@datatypeId int,@ReportWriterId int, @FrequencyTypeId int, @FrequencyId int,@PeriodId int,@DeliveryTypeId int,
	@deliverToId int
	declare @subscriptionId int,@deliverablesId int
	declare @TerritoryBase varchar(50),@TerritoryBaseId int
	declare @cnt int
	declare @ReportId int
	-----------------declare temp-----------------
	--declare @SubscriptionTemp TABLE(SubscriptionId int not null primary key identity(1,1),name varchar(100),clientId varchar(100),StartDate datetime,EndDate datetime ,active varchar(100),LastModified varchar(100), modifiedby varchar(100), CountryId varchar(100),serviceId varchar(100),SourceId varchar(100),DataTypeId varchar(100),ServiceTerritoryId varchar(100))
	--declare @DeliverablesTemp table(SubscriptionId varchar(100),ReportWriterId varchar(100),FrequencyTypeId varchar(100),FrequencyId varchar(100),Periodid varchar(100),StartDate datetime,EndDate datetime,LastModified varchar(100),ModifiedBy varchar(100),DeliveryTypeId varchar(100))

	------------------------------------------
	set nocount on

	DECLARE subCursor CURSOR FOR
	Select ClientName,[Service],Country,DataType,Source,DeliveryType,ReportWriter,FreqType,Frequency,Period,ReportId from dbo.IRG_Deliverables_IAM
	
	--SELECT  Client,[Service],Country,[DATA type], Source,[Delivery Type],[Report writer],[Report writer name],[frequency type],frequency,
	--[deliver to],[# years]  FROM  dbo.[z_Delivery Details] 


	OPEN subCursor  
	FETCH NEXT FROM subCursor INTO @client,@service,@country,@datatype,@source,@DeliveryType,@ReportWriterCode,@FrequencyType,
	@Frequency,@Years,@ReportId
	set @cnt =1
	WHILE @@Fetch_Status = 0 

	BEGIN

		--select @client,@service,@country,@datatype,@source,@DeliveryType,@ReportWriterCode,@ReportWriter,@FrequencyType,@Frequency,@DeliverTo,@Years
		select  @clientId = 0,@countryId = 0,@serviceId = 0, @sourceId = 0, @datatypeId = 0
		--select top 1 @clientId = id from clients where Name = LTrim(RTrim(@client)) 
		if @Client = 'GlaxoSmithKline Consumer Healthcare'
		set @Client ='GSK Consumer'
		select top 1 @clientId = id from clients where Name = LTrim(RTrim(@client)) -- checking only first 3 characters
		select top 1 @countryId = CountryId from Country where Name = LTrim(RTrim(@country))
		select top 1 @serviceId = ServiceId from service where Name = LTrim(RTrim(@service))
		select top 1 @sourceId = sourceId from [dbo].[Source] where Name = LTrim(RTrim(@source))
		select top 1 @datatypeId = DataTypeId from Datatype where Name = LTrim(RTrim(@datatype)) 
		set @subscriptionId=0

		select @subscriptionId = SubscriptionId from Subscription where ClientId = @Clientid and CountryId = @countryId and ServiceId = @serviceId and SourceId = @sourceId and DataTypeId = @datatypeId
		
		--select @subscriptionId as subscriptionid,@Clientid client,@countryId country,@serviceId [service],@sourceId source,@datatypeId datatype

		if (@subscriptionId is null or @subscriptionId  < 1)
		begin
		
			if LTrim(RTrim(@service))='probe'  or LTrim(RTrim(@service)) = 'PROFITS + PROBE'
			set @TerritoryBase='both'
			else if LTrim(RTrim(@service))='profits' or LTrim(RTrim(@service))='profit' 
			set @TerritoryBase='brick'
			else if LTrim(RTrim(@service))='Audit' or LTrim(RTrim(@service))='IMS Reference' or LTrim(RTrim(@service))='Nielsen feed' or LTrim(RTrim(@service))='Pharma Trend' 
			set @TerritoryBase='NA'
			
						
			select @TerritoryBaseId=ServiceTerritoryid from ServiceTerritory where TerritoryBase=@TerritoryBase
		
		-- insert into subscription table
		   insert into Subscription (name,clientId,StartDate,EndDate,active,LastModified,modifiedby, CountryId,serviceId,SourceId,DataTypeId,ServiceTerritoryId)
		   values (@country +' '+@service + ' ' + @source+ ' ' + @datatype ,@clientId,
		   DATEADD(yy, DATEDIFF(yy, 0, GETDATE()), 0),DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 1, -1),
		   1,CAST(GETDATE() AS DATE),1,
		   @countryId,@serviceId,@sourceId,@datatypeId,@TerritoryBaseId)
		   SELECT @subscriptionId = SCOPE_IDENTITY()
		   Print 'subscription inserted- id=' + cast(@subscriptionId as varchar)
		end
		select @ReportWriterId=0, @FrequencyTypeId= 0, @FrequencyId = 0,@PeriodId =0
		select top 1 @ReportWriterId = ReportWriterId from ReportWriter where code = LTrim(RTrim(@ReportWriterCode))
		--select top 1 @FrequencyTypeId = FrequencyTypeId from FrequencyType where Name = LTrim(RTrim(@FrequencyType))
		--select top 1 @FrequencyId = FrequencyId from Frequency where Name = LTrim(RTrim(@Frequency))
		 Set @FrequencyTypeId = @FrequencyType
		 Set @FrequencyId = @Frequency
		 --select  @Years
		if ISNUMERIC(left(SUBSTRING(@Years, CHARINDEX(' ', @Years)+1,LEN(@Years)),1))=1
		begin
		--select 'num', SUBSTRING(@Years, CHARINDEX(' ', @Years)+2,4), LEFT(@Years, charindex(' ', @Years) - 1)
		if SUBSTRING(@Years, CHARINDEX(' ', @Years)+2,4) = 'Week'
			begin
			 if LEFT(@Years, charindex(' ', @Years) - 1)  = '104'
			 set @Years = '2 Years'
			 else
			 set @Years = LEFT(@Years, charindex(' ', @Years) - 1) + 'Weeks'
			 end
		--else if SUBSTRING(@Years, CHARINDEX(' ', @Years)+2,4) = 'Year'
		--	set @Years = LEFT(@Years, charindex(' ', @Years) - 1) + 'Years'
		end
		
		select top 1 @PeriodId = Periodid from Period where Name = @Years
		select @DeliveryTypeId = DeliveryTypeId from DeliveryType where Name=LTrim(RTrim(@DeliveryType))
	    --select @DeliveryType,@DeliveryTypeId
		if LTrim(RTrim(@service))='Nielsen feed' or LTrim(RTrim(@service))='Pharma Trend' 
		begin
			select @ReportWriterId = null, @FrequencyId = null,@PeriodId =null
			
			if LTrim(RTrim(@service))='Pharma Trend' 
			begin
				select top 1 @PeriodId = Periodid from Period where Number=3
			end
			if LTrim(RTrim(@service))='Nielsen feed' 
			begin
				select top 1 @PeriodId = Periodid from Period where Number=160
			end
			if @PeriodId is null or @PeriodId = 0
			begin
				select top 1 @PeriodId = Periodid from Period where Number=3
			end

			insert into ServiceConfiguration values(@serviceId,'period',@PeriodId)
			insert into ServiceConfiguration values(@serviceId,'frequency',0)
		end
		--select @ReportWriterId,@FrequencyTypeId,@FrequencyId,@PeriodId,@DeliveryTypeId
		  -- insert into  deliverables
		  if @SubscriptionId is not null
		  begin
		   if not exists (select * from Deliverables where SubscriptionId = @SubscriptionId and ReportWriterId = @ReportWriterId and FrequencyTypeId = @FrequencyTypeId
		   and FrequencyId = case when @FrequencyId = 0 then null else @FrequencyId end and Periodid = @PeriodId and DeliveryTypeId = @DeliveryTypeId)
		   begin
			   insert into Deliverables (SubscriptionId,ReportWriterId,FrequencyTypeId,FrequencyId,Periodid,StartDate,EndDate,LastModified,ModifiedBy,DeliveryTypeId)
			   values (@SubscriptionId,@ReportWriterId,@FrequencyTypeId,case when @FrequencyId = 0 then null else @FrequencyId end,@PeriodId,DATEADD(yy, DATEDIFF(yy, 0, GETDATE()), 0),
			   DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 1, -1),CAST(GETDATE() AS DATE),1,@DeliveryTypeId)
			   SELECT @deliverablesId = SCOPE_IDENTITY()
			   --select 'deliverables id=' + cast(@deliverablesId as varchar)
			   Print 'Deliverables inserted- id=' + cast(@deliverablesId as varchar)
			   --select top 1 @deliverToId = id from clients where left(Name,3) = Left(LTrim(RTrim(@DeliverTo)),3)
			   --select top 1 @deliverToId = id from clients where Name =  LTrim(RTrim(@client))
		       
			   
			   insert into DeliveryClient (DeliverableId, ClientId) values(@deliverablesId,@ClientId)

			   ----INSERT INTO DeliveryReport
			   --select distinct DeliverableId, ReportId into #tDeliveryReport from DeliveryReport
			   MERGE [dbo].DeliveryReport AS TARGET
				USING (select @deliverablesId DeliverableId, @ReportId ReportId) AS SOURCE
				ON (TARGET.deliverableid=SOURCE.deliverableid AND TARGET.ReportId=SOURCE.ReportId)

				WHEN NOT MATCHED BY TARGET THEN
				insert(deliverableid, ReportId)
				values(SOURCE.deliverableid, SOURCE.ReportId)
				;
			   --insert into DeliveryReport (DeliverableId, ReportId) values(@deliverablesId,@ReportId)

		   end
		Print 'Row =' + cast(@cnt as varchar)
		end
		set @cnt =@cnt +1
		FETCH NEXT FROM subCursor INTO @client,@service,@country,@datatype,@source,@DeliveryType,@ReportWriterCode,@FrequencyType,@Frequency,@Years,@ReportId
	    

	End 

	Close subCursor
	Deallocate subCursor

	--Select * from @SubscriptionTemp
	--Select * from @DeliverablesTemp
	--Select * from DeliveryReport
	--drop table dbo.IRG_Deliverables_IAM

END

--select * from subscription where clientid = 43
--select * from deliverables where subscriptionid in (select subscriptionid from subscription where clientid = 43)
GO
PRINT N'Altering [dbo].[IRPProcessDeliverablesNonIAM]...';


GO
ALTER procedure [dbo].[IRPProcessDeliverablesNonIAM]
As
BEGIN
	
	declare @Lvl_total char(8)
	declare @RestrictionId int
	declare @rptname varchar(500)

	declare @DeliveryReportName table (DeliverableId int, ReportName varchar(500) )

	declare @Client varchar(100),@service varchar(100),@country varchar(100),@Datatype varchar(100),@source varchar(100),@DeliveryType varchar(100),
	@ReportWriterCode varchar(100),@ReportWriter varchar(100),@FrequencyType varchar(100),@Frequency varchar(500),@DeliverTo varchar(100), @Years varchar(100)
	Declare @CatSel varchar(50)
	declare @ClientId int,@countryId int,@serviceId int, @sourceId int,@datatypeId int,@ReportWriterId int, @FrequencyTypeId int, @FrequencyId int,@PeriodId int,@DeliveryTypeId int,
	@deliverToId int
	declare @subscriptionId int,@deliverablesId int
	declare @TerritoryBase varchar(50),@TerritoryBaseId int
	declare @cnt int
	set nocount on

	--keep the data
	Select ClientName, D.Country, 
	Case C.DataType when 'Other' then case when len([OUTLET DESCRIPTIONS])>0 then 'Other Outlet' else C.DataType end else C.DataType end DataType,
	E.[Service],E.Source,E.Deliverable,ExtType,FreqType,Frequency,Period, report_name, lvl_total 
	into #tt from dbo.IRG_Deliverables_NonIAM D
		inner join IRG_Cat_sel C on D.cat_sel=C.cat 
		inner join IRG_ExtractionType E on substring(D.ReportWriter,1,2) = E.ExtType
		OR substring(D.ReportWriter,3,2) = E.ExtType
		OR substring(D.ReportWriter,5,2) = E.ExtType
		where C.DataType is not null and E.Source is not null and ExtType is not null and E.[Service] is not null
	

	DECLARE subCursor CURSOR FOR
	Select ClientName, D.Country, 
	Case C.DataType when 'Other' then case when len([OUTLET DESCRIPTIONS])>0 then 'Other Outlet' else C.DataType end else C.DataType end,
	E.[Service],E.Source,E.Deliverable,ExtType,FreqType,Frequency,Period, report_name,lvl_total from dbo.IRG_Deliverables_NonIAM D
		inner join IRG_Cat_sel C on D.cat_sel=C.cat 
		inner join IRG_ExtractionType E on substring(D.ReportWriter,1,2) = E.ExtType
		OR substring(D.ReportWriter,3,2) = E.ExtType
		OR substring(D.ReportWriter,5,2) = E.ExtType
		where C.DataType is not null and E.Source is not null and ExtType is not null and E.[Service] is not null
	
	OPEN subCursor  
	FETCH NEXT FROM subCursor INTO @client,@country,@DataType,@Service,@source,@DeliveryType,@ReportWriterCode,@FrequencyType,@Frequency,@Years,@rptname,@Lvl_total
	set @cnt =1
	WHILE @@Fetch_Status = 0 

	BEGIN

		--select @client,@service,@country,@datatype,@source,@DeliveryType,@ReportWriterCode,@ReportWriter,@FrequencyType,@Frequency,@DeliverTo,@Years
		select  @clientId = 0,@countryId = 0,@serviceId = 0, @sourceId = 0, @datatypeId = 0
		set @datatype =  replace(@datatype,'Combined','Retail + Hospital')
		--select top 1 @clientId = id from clients where Name = LTrim(RTrim(@client)) 
		if @Client = 'GlaxoSmithKline Consumer Healthcare'
		set @Client ='GSK Consumer'
		if @service = 'Profits'
			set @service = 'Profit'
	    if @service = 'PROFITS/PROBE'
			set @service = 'PROFITS + PROBE'
			Print ' Client Name = ' + @client
		--select top 1 @clientId = id from clients where left(Name,3)=  left(LTrim(RTrim(@client)),3) -- checking only first 3 characters
		select top 1 @clientId = id from clients where Name=  @client
		select top 1 @countryId = CountryId from Country where Name = LTrim(RTrim(@country))
		select top 1 @serviceId = ServiceId from service where Name = LTrim(RTrim(@service))
		select top 1 @sourceId = sourceId from [dbo].[Source] where Name = LTrim(RTrim(@source))
		select top 1 @datatypeId = DataTypeId from Datatype where Name = LTrim(RTrim(@datatype)) 
		--select @client,@service,@serviceId,@country,@datatype,@source,@DeliveryType,@ReportWriterCode,@ReportWriter,@FrequencyType,@Frequency,@DeliverTo,@Years
		set @subscriptionId=0
		select @subscriptionId = SubscriptionId from Subscription where ClientId = @Clientid and CountryId = @countryId and ServiceId = @serviceId and SourceId = @sourceId and DataTypeId = @datatypeId
		--select @subscriptionId as subscriptionid,@Clientid client,@countryId country,@serviceId [service],@sourceId source,@datatypeId datatype
		if (@subscriptionId is null or @subscriptionId  < 1)
		begin
		
			if LTrim(RTrim(@service))='probe'  or LTrim(RTrim(@service)) = 'PROFITS + PROBE'
			set @TerritoryBase='both'
			else if LTrim(RTrim(@service))='profits' or LTrim(RTrim(@service))='profit' 
			set @TerritoryBase='brick'
			else if LTrim(RTrim(@service))='Audit' or LTrim(RTrim(@service))='IMS Reference' or LTrim(RTrim(@service))='Nielsen feed' or LTrim(RTrim(@service))='Pharma Trend' 
			set @TerritoryBase='NA'
			
			
			
			select @TerritoryBaseId=ServiceTerritoryid from ServiceTerritory where TerritoryBase=@TerritoryBase
		Print 'Client ID = ' + cast(@clientId as varchar)
--		 insert into subscription table
		   insert into Subscription (name,clientId,StartDate,EndDate,active,LastModified,modifiedby, CountryId,serviceId,SourceId,DataTypeId,ServiceTerritoryId)
		   values (@country +' '+@service + ' ' + @source+ ' ' + @datatype ,@clientId,
		   DATEADD(yy, DATEDIFF(yy, 0, GETDATE()), 0),DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 1, -1),
		   1,CAST(GETDATE() AS DATE),1,
		   @countryId,@serviceId,@sourceId,@datatypeId,@TerritoryBaseId)
		   SELECT @subscriptionId = SCOPE_IDENTITY()
		   Print 'subscription inserted- id=' + cast(@subscriptionId as varchar)
		end
		select @ReportWriterId=0, @FrequencyTypeId= 0, @FrequencyId = 0,@PeriodId =0
		select top 1 @ReportWriterId = ReportWriterId from ReportWriter where code = LTrim(RTrim(@ReportWriterCode))
		--select top 1 @FrequencyTypeId = FrequencyTypeId from FrequencyType where Name = LTrim(RTrim(@FrequencyType))
		--select top 1 @FrequencyId = FrequencyId from Frequency where Name = LTrim(RTrim(@Frequency))
		 Set @FrequencyTypeId = @FrequencyType
		 Set @FrequencyId = @Frequency
		select top 1 @PeriodId = Periodid from Period where Name = @Years
		--select @DeliveryTypeId = DeliveryTypeId from DeliveryType where Name=LTrim(RTrim(@DeliveryType))
	    set @DeliveryType=LTrim(RTrim(@DeliveryType))
		select @DeliveryTypeId = DeliveryTypeId from DeliveryType where Name like '%'+@DeliveryType + '%'
		
		if LTrim(RTrim(@service))='Nielsen feed' or LTrim(RTrim(@service))='Pharma Trend' 
		begin
			select @ReportWriterId = null, @FrequencyId = null,@PeriodId =null
			
			if LTrim(RTrim(@service))='Pharma Trend' 
			begin
				select top 1 @PeriodId = Periodid from Period where Number=3
			end
			if LTrim(RTrim(@service))='Nielsen feed' 
			begin
				select top 1 @PeriodId = Periodid from Period where Number=160
			end
			if @PeriodId is null or @PeriodId = 0
			begin
				select top 1 @PeriodId = Periodid from Period where Number=3
			end
			insert into ServiceConfiguration values(@serviceId,'period',@PeriodId)
			insert into ServiceConfiguration values(@serviceId,'frequency',0)
		end
		--select @ReportWriterId,@FrequencyTypeId,@FrequencyId,@PeriodId,@DeliveryTypeId
		  -- insert into  deliverables
		  --declare @DelId bit
		  --set @DelId = 0
		  --select @DelId = 1 from Deliverables where SubscriptionId = @SubscriptionId and ReportWriterId= @ReportWriterId and FrequencyTypeId = @FrequencyTypeId
		  --if @DelId <> 1 
		  if @SubscriptionId is not null
		  BEGIN
			  if not exists (select * from Deliverables where SubscriptionId = @SubscriptionId and ReportWriterId = @ReportWriterId and FrequencyTypeId = @FrequencyTypeId
			   and FrequencyId = case when @FrequencyId = 0 then null else @FrequencyId end and Periodid = @PeriodId and DeliveryTypeId = @DeliveryTypeId)
			   
			  begin
			  --insert into Deliverables table
				   if @Lvl_Total is null 
						set @RestrictionId = null
				   else
						set @RestrictionId = cast(@Lvl_total as int)

				   insert into Deliverables (SubscriptionId,ReportWriterId,FrequencyTypeId,FrequencyId,Periodid,StartDate,EndDate,LastModified,ModifiedBy,DeliveryTypeId, RestrictionId)
				   values (@SubscriptionId,@ReportWriterId,@FrequencyTypeId,case when @FrequencyId = 0 then null else @FrequencyId end,@PeriodId,DATEADD(yy, DATEDIFF(yy, 0, GETDATE()), 0),
				   DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 1, -1),CAST(GETDATE() AS DATE),1,@DeliveryTypeId, @RestrictionId)
				   SELECT @deliverablesId = SCOPE_IDENTITY()
				   --select 'deliverables id=' + cast(@deliverablesId as varchar)
				   Print 'Deliverables inserted- id=' + cast(@deliverablesId as varchar)
			   
		       
				   insert into DeliveryClient (DeliverableId, ClientId) values(@deliverablesId,@ClientId)

				   ---INSERT INTO DELIVERYREPORTNAME

				   insert into @DeliveryReportName (DeliverableId, ReportName) values (@deliverablesId, @ReportWriterCode)

				   
			   			   
			   end
			Print 'Row =' + cast(@cnt as varchar)
			END
		set @cnt =@cnt +1
		FETCH NEXT FROM subCursor INTO @client,@country,@DataType,@Service,@source,@DeliveryType,@ReportWriterCode,@FrequencyType,@Frequency,@Years, @rptname, @Lvl_total
	    

	End 

	Close subCursor
	Deallocate subCursor

	--select * from @DeliveryReportName

	MERGE [dbo].DeliveryReportName AS TARGET
	USING (select distinct  a.deliverableid deliverableid, b.report_name reportname from @DeliveryReportName a join #tt b on a.ReportName = b.ExtType) AS SOURCE
	ON (TARGET.deliverableid=SOURCE.deliverableid AND TARGET.ReportName=SOURCE.ReportName)

	WHEN NOT MATCHED BY TARGET THEN
	insert(deliverableid, ReportName)
	values(SOURCE.deliverableid, SOURCE.ReportName)
	;
	

	--delete from dbo.IRG_Deliverables_NonIAM
	--select * from dbo.IRG_Deliverables_NonIAM
	
END
--select * from clients where irpclientno = 94
--exec [IRPImportDeliverablesNonIAM] 94
--exec [IRPProcessDeliverablesNonIAM]

--select * from deliveryreportname
--use preprod
--select * from deliverables where subscriptionid in (select subscriptionid from subscription where clientid = 76)
--select * into deliverablesTemp from deliverables where deliverableid in (201, 202, 203)

--delete from deliveryclient where deliverableid in (201, 202, 203)
--delete from deliverables where deliverableid in (201, 202, 203)

--select * into deliveryclientTemp from deliveryclient where deliverableid in (201, 202, 203)

--select * from deliveryreportname 
--where deliverableid in (select deliverableid from deliverables where subscriptionid in (select subscriptionid from subscription where clientid = 76))
GO
PRINT N'Altering [dbo].[IRPProcessDeliverablesNonIAM_TEMP]...';


GO
ALTER procedure [dbo].[IRPProcessDeliverablesNonIAM_TEMP]
As
BEGIN
	
	declare @Lvl_total char(8)
	declare @RestrictionId int
	declare @rptname varchar(500)

	-----------------declare temp-----------------
	declare @SubscriptionTemp TABLE(SubscriptionId int not null primary key identity(1,1),name varchar(100),clientId varchar(100),StartDate datetime,EndDate datetime ,active varchar(100),LastModified varchar(100), modifiedby varchar(100), CountryId varchar(100),serviceId varchar(100),SourceId varchar(100),DataTypeId varchar(100),ServiceTerritoryId varchar(100))
	declare @DeliverablesTemp table(DeliverableId int not null primary key identity(1,1),SubscriptionId varchar(100),ReportWriterId varchar(100),FrequencyTypeId varchar(100),FrequencyId varchar(100),Periodid varchar(100),StartDate datetime,EndDate datetime,LastModified varchar(100),ModifiedBy varchar(100),DeliveryTypeId varchar(100), RestrictionId int)

	------------------------------------------
	declare @Client varchar(100),@service varchar(100),@country varchar(100),@Datatype varchar(100),@source varchar(100),@DeliveryType varchar(100),
	@ReportWriterCode varchar(100),@ReportWriter varchar(100),@FrequencyType varchar(100),@Frequency varchar(500),@DeliverTo varchar(100), @Years varchar(100)
	Declare @CatSel varchar(50)
	declare @ClientId int,@countryId int,@serviceId int, @sourceId int,@datatypeId int,@ReportWriterId int, @FrequencyTypeId int, @FrequencyId int,@PeriodId int,@DeliveryTypeId int,
	@deliverToId int
	declare @subscriptionId int,@deliverablesId int
	declare @TerritoryBase varchar(50),@TerritoryBaseId int
	declare @cnt int
	set nocount on


	--keep the data
	Select ClientName, D.Country, 
	Case C.DataType when 'Other' then case when len([OUTLET DESCRIPTIONS])>0 then 'Other Outlet' else C.DataType end else C.DataType end DataType,
	E.[Service],E.Source,E.Deliverable,ExtType,FreqType,Frequency,Period, report_name, lvl_total 
	into #tt from dbo.IRG_Deliverables_NonIAM D
		inner join IRG_Cat_sel C on D.cat_sel=C.cat 
		inner join IRG_ExtractionType E on substring(D.ReportWriter,1,2) = E.ExtType
		OR substring(D.ReportWriter,3,2) = E.ExtType
		OR substring(D.ReportWriter,5,2) = E.ExtType
		where C.DataType is not null and E.Source is not null and ExtType is not null and E.[Service] is not null
	

	DECLARE subCursor CURSOR FOR
	Select ClientName, D.Country, 
	Case C.DataType when 'Other' then case when len([OUTLET DESCRIPTIONS])>0 then 'Other Outlet' else C.DataType end else C.DataType end,
	E.[Service],E.Source,E.Deliverable,ExtType,FreqType,Frequency,Period, report_name, lvl_total from dbo.IRG_Deliverables_NonIAM D
		inner join IRG_Cat_sel C on D.cat_sel=C.cat 
		inner join IRG_ExtractionType E on substring(D.ReportWriter,1,2) = E.ExtType
		OR substring(D.ReportWriter,3,2) = E.ExtType
		OR substring(D.ReportWriter,5,2) = E.ExtType
		where C.DataType is not null and E.Source is not null and ExtType is not null and E.[Service] is not null
	
	OPEN subCursor  
	FETCH NEXT FROM subCursor INTO @client,@country,@DataType,@Service,@source,@DeliveryType,@ReportWriterCode,@FrequencyType,@Frequency,@Years,@rptname,@Lvl_total
	set @cnt =1
	WHILE @@Fetch_Status = 0 

	BEGIN

		--select @client,@service,@country,@datatype,@source,@DeliveryType,@ReportWriterCode,@ReportWriter,@FrequencyType,@Frequency,@DeliverTo,@Years
		select  @clientId = 0,@countryId = 0,@serviceId = 0, @sourceId = 0, @datatypeId = 0
		set @datatype =  replace(@datatype,'Combined','Retail + Hospital')
		--select top 1 @clientId = id from clients where Name = LTrim(RTrim(@client)) 
		if @Client = 'GlaxoSmithKline Consumer Healthcare'
		set @Client ='GSK Consumer'
		if @service = 'Profits'
			set @service = 'Profit'
	    if @service = 'PROFITS/PROBE'
			set @service = 'PROFITS + PROBE'
		--select top 1 @clientId = id from clients where left(Name,3)=  left(LTrim(RTrim(@client)),3) -- checking only first 3 characters
		select top 1 @clientId = id from clients where Name=  @client
		select top 1 @countryId = CountryId from Country where Name = LTrim(RTrim(@country))
		select top 1 @serviceId = ServiceId from service where Name = LTrim(RTrim(@service))
		select top 1 @sourceId = sourceId from [dbo].[Source] where Name = LTrim(RTrim(@source))
		select top 1 @datatypeId = DataTypeId from Datatype where Name = LTrim(RTrim(@datatype)) 
		--select @client,@service,@serviceId,@country,@datatype,@source,@DeliveryType,@ReportWriterCode,@ReportWriter,@FrequencyType,@Frequency,@DeliverTo,@Years
		set @subscriptionId=0
		select @subscriptionId = SubscriptionId from @SubscriptionTemp where ClientId = @Clientid and CountryId = @countryId and ServiceId = @serviceId and SourceId = @sourceId and DataTypeId = @datatypeId
		--select @subscriptionId as subscriptionid,@Clientid client,@countryId country,@serviceId [service],@sourceId source,@datatypeId datatype
		if (@subscriptionId is null or @subscriptionId  < 1)
		begin
		
			if LTrim(RTrim(@service))='probe'  or LTrim(RTrim(@service)) = 'PROFITS + PROBE'
			set @TerritoryBase='both'
			else if LTrim(RTrim(@service))='profits' or LTrim(RTrim(@service))='profit' 
			set @TerritoryBase='brick'
			else if LTrim(RTrim(@service))='Audit' or LTrim(RTrim(@service))='IMS Reference' or LTrim(RTrim(@service))='Nielsen feed' or LTrim(RTrim(@service))='Pharma Trend' 
			set @TerritoryBase='NA'
			
			
			
			select @TerritoryBaseId=ServiceTerritoryid from ServiceTerritory where TerritoryBase=@TerritoryBase
		
--		 insert into subscription table
		   insert into @SubscriptionTemp (name,clientId,StartDate,EndDate,active,LastModified,modifiedby, CountryId,serviceId,SourceId,DataTypeId,ServiceTerritoryId)
		   values (@country +' '+@service + ' ' + @source+ ' ' + @datatype ,@clientId,
		   DATEADD(yy, DATEDIFF(yy, 0, GETDATE()), 0),DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 1, -1),
		   1,CAST(GETDATE() AS DATE),1,
		   @countryId,@serviceId,@sourceId,@datatypeId,@TerritoryBaseId)
		   SELECT @subscriptionId = SCOPE_IDENTITY()
		   Print 'subscription inserted- id=' + cast(@subscriptionId as varchar)
		end
		select @ReportWriterId=0, @FrequencyTypeId= 0, @FrequencyId = 0,@PeriodId =0
		select top 1 @ReportWriterId = ReportWriterId from ReportWriter where code = LTrim(RTrim(@ReportWriterCode))
		--select top 1 @FrequencyTypeId = FrequencyTypeId from FrequencyType where Name = LTrim(RTrim(@FrequencyType))
		--select top 1 @FrequencyId = FrequencyId from Frequency where Name = LTrim(RTrim(@Frequency))
		 Set @FrequencyTypeId = @FrequencyType
		 Set @FrequencyId = @Frequency
		select top 1 @PeriodId = Periodid from Period where Name = @Years
		--select @DeliveryTypeId = DeliveryTypeId from DeliveryType where Name=LTrim(RTrim(@DeliveryType))
	    set @DeliveryType=LTrim(RTrim(@DeliveryType))
		select @DeliveryTypeId = DeliveryTypeId from DeliveryType where Name like '%'+@DeliveryType + '%'
		
		if LTrim(RTrim(@service))='Nielsen feed' or LTrim(RTrim(@service))='Pharma Trend' 
		begin
			select @ReportWriterId = null, @FrequencyId = null,@PeriodId =null
			
			if LTrim(RTrim(@service))='Pharma Trend' 
			begin
				select top 1 @PeriodId = Periodid from Period where Number=3
			end
			if LTrim(RTrim(@service))='Nielsen feed' 
			begin
				select top 1 @PeriodId = Periodid from Period where Number=160
			end
			if @PeriodId is null or @PeriodId = 0
			begin
				select top 1 @PeriodId = Periodid from Period where Number=3
			end
			--insert into ServiceConfiguration values(@serviceId,'period',@PeriodId)
			--insert into ServiceConfiguration values(@serviceId,'frequency',0)
		end
		--select @ReportWriterId,@FrequencyTypeId,@FrequencyId,@PeriodId,@DeliveryTypeId
		  -- insert into  deliverables
		  --declare @DelId bit
		  --set @DelId = 0
		  --select @DelId = 1 from Deliverables where SubscriptionId = @SubscriptionId and ReportWriterId= @ReportWriterId and FrequencyTypeId = @FrequencyTypeId
		  --if @DelId <> 1 
		  if @SubscriptionId is not null
		  BEGIN
			  if not exists (select * from @DeliverablesTemp where SubscriptionId = @SubscriptionId and ReportWriterId = @ReportWriterId and FrequencyTypeId = @FrequencyTypeId
			   and FrequencyId = case when @FrequencyId = 0 then null else @FrequencyId end and Periodid = @PeriodId and DeliveryTypeId = @DeliveryTypeId)
			   
			  begin
			  --insert into Deliverables table
				   if @Lvl_Total is null 
						set @RestrictionId = null
				   else
						set @RestrictionId = cast(@Lvl_total as int)

				   insert into @DeliverablesTemp (SubscriptionId,ReportWriterId,FrequencyTypeId,FrequencyId,Periodid,StartDate,EndDate,LastModified,ModifiedBy,DeliveryTypeId, RestrictionId)
				   values (@SubscriptionId,@ReportWriterId,@FrequencyTypeId,case when @FrequencyId = 0 then null else @FrequencyId end,@PeriodId,DATEADD(yy, DATEDIFF(yy, 0, GETDATE()), 0),
				   DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 1, -1),CAST(GETDATE() AS DATE),1,@DeliveryTypeId, @RestrictionId)
				   SELECT @deliverablesId = SCOPE_IDENTITY()
				   --select 'deliverables id=' + cast(@deliverablesId as varchar)
				   Print 'Deliverables inserted- id=' + cast(@deliverablesId as varchar)
			   
		       
				   --insert into DeliveryClient (DeliverableId, ClientId) values(@deliverablesId,@ClientId)


				   insert into DeliveryReportName (DeliverableId, ReportName)
				   values (@deliverablesId, @ReportWriterCode)


				   ---INSERT INTO DELIVERYREPORT
				   IF OBJECT_ID('tempdb..#tDeliveryClient2') IS NOT NULL DROP TABLE #tDeliveryClient2
				   select @deliverablesId deliverableid, e.ReportId ReportId 
				   into #tDeliveryClient2 from irp.client c
				   join irp.report d on d.clientid = c.clientid
				   join irp.reportparameter e on e.reportid = d.reportid
				   where c.clientid = @clientId

				   MERGE [dbo].DeliveryReport AS TARGET
					USING #tDeliveryClient2 AS SOURCE
					ON (TARGET.deliverableid=SOURCE.deliverableid AND TARGET.ReportId=SOURCE.ReportId)

					WHEN NOT MATCHED BY TARGET THEN
					insert(deliverableid, ReportId)
					values(SOURCE.deliverableid, SOURCE.ReportId)
					;
			   			   
			   end
			Print 'Row =' + cast(@cnt as varchar)
			END
		set @cnt =@cnt +1
		FETCH NEXT FROM subCursor INTO @client,@country,@DataType,@Service,@source,@DeliveryType,@ReportWriterCode,@FrequencyType,@Frequency,@Years, @RptName,@Lvl_total
	    

	End 

	Close subCursor
	Deallocate subCursor

	--delete from dbo.IRG_Deliverables_NonIAM

	select * from @SubscriptionTemp
	select * from @DeliverablesTemp
	--select * from DeliveryReportName

	select distinct  a.deliverableid, b.exttype, b.report_name from 
	DeliveryReportName a join #tt b on a.ReportName = b.ExtType 
	
END

--truncate table DeliveryReportName
--exec [IRPProcessDeliverablesNonIAM_TEMP]

select C.CLIENTID, e.ReportId ReportId 
from irp.client c
join irp.report d on d.clientid = c.clientid
join irp.reportparameter e on e.reportid = d.reportid
where c.clientid = 173

SELECT * FROM IRP.CLIENT where CLIENTNO = 330 AND versionto > 0
select * from irp.reportparameter where reportid in (select reportid from irp.report where clientid = 173)
GO
PRINT N'Altering [dbo].[IRPImportDeliveryMarketAndTerritory]...';


GO

ALTER PROCEDURE [dbo].[IRPImportDeliveryMarketAndTerritory]
AS
BEGIN
	SET NOCOUNT ON;

	---insert into deliveryMarket table
	select distinct a.deliverableid, e.id marketdefinitionid into #tm1 
	from deliveryreport a 
	join (select distinct reportid, value from IRP.ReportParameter where code = 'DimProd' and versionto = 32767)d on a.reportid = d.reportid
	join MarketDefinitions e on e.dimensionid = d.value

	select distinct a.deliverableid, e.id MarketDefinitionId into #tm2
	from deliveryreportname a 
	join IRP.Dimension c on a.ReportName = c.DimensionName
	join MarketDefinitions e on e.dimensionid = c.DimensionId
	where c.versionto > 0

	MERGE [dbo].[deliverymarket] AS TARGET
	USING #tm1 AS SOURCE
	ON (TARGET.deliverableid=SOURCE.deliverableid AND TARGET.MarketDefId=SOURCE.MarketDefinitionId)

	WHEN NOT MATCHED BY TARGET THEN
	insert(deliverableid, MarketDefId)
	values(SOURCE.deliverableid, SOURCE.MarketDefinitionId)
	;

	MERGE [dbo].[deliverymarket] AS TARGET
	USING #tm2 AS SOURCE
	ON (TARGET.deliverableid=SOURCE.deliverableid AND TARGET.MarketDefId=SOURCE.MarketDefinitionId)

	WHEN NOT MATCHED BY TARGET THEN
	insert(deliverableid, MarketDefId)
	values(SOURCE.deliverableid, SOURCE.MarketDefinitionId)
	;

	---insert into deliveryTerritory table
	
	select distinct a.deliverableid, e.id TerritoryId into #tt1
	from deliveryreport a 
	join (select distinct reportid, value from IRP.ReportParameter where code = 'DimGeog' and versionto = 32767)d on a.reportid = d.reportid
	join Territories e on e.dimensionid = d.value

	select distinct a.deliverableid, e.id TerritoryId into #tt2
	from deliveryreportname a 
	join IRP.Dimension c on a.ReportName = c.DimensionName
	join Territories e on e.dimensionid = c.DimensionId
	where c.versionto > 0

	MERGE [dbo].[deliveryTerritory] AS TARGET
	USING #tt1 AS SOURCE
	ON (TARGET.deliverableid=SOURCE.deliverableid AND TARGET.TerritoryId=SOURCE.TerritoryId)

	WHEN NOT MATCHED BY TARGET THEN
	insert(deliverableid, TerritoryId)
	values(SOURCE.deliverableid, SOURCE.TerritoryId)
	;

	MERGE [dbo].[deliveryTerritory] AS TARGET
	USING #tt2 AS SOURCE
	ON (TARGET.deliverableid=SOURCE.deliverableid AND TARGET.TerritoryId=SOURCE.TerritoryId)

	WHEN NOT MATCHED BY TARGET THEN
	insert(deliverableid, TerritoryId)
	values(SOURCE.deliverableid, SOURCE.TerritoryId)
	;

	---------INCLUDE MISSING MARKET BASES TO SUBSCRIPTION

	select distinct subscriptionid, marketbaseid into #tmb from(
		select c.subscriptionid, a.*, e.marketbaseid from deliverymarket a 
		join deliverables b on a.deliverableid = b.deliverableid
		join subscription c on c.subscriptionid = b.subscriptionid
		join marketdefinitionbasemaps e on e.marketdefinitionid = a.marketdefid
	)A

	MERGE [dbo].[subscriptionmarket] AS TARGET
	USING #tmb AS SOURCE
	ON (TARGET.subscriptionid=SOURCE.subscriptionid AND TARGET.marketbaseid=SOURCE.marketbaseid)

	WHEN NOT MATCHED BY TARGET THEN
	insert(subscriptionid, marketbaseid)
	values(SOURCE.subscriptionid, SOURCE.marketbaseid)
	;

	
END
GO
PRINT N'Altering [dbo].[IRPDeleteTerritory]...';


GO
--select top 100 * from groups

ALTER PROCEDURE [dbo].[IRPDeleteTerritory] 
	@pTerritoryId int 
AS
BEGIN
	SET NOCOUNT ON;
	declare @rootGroupId int;
	
	--Read deliverables id before deleting territory
	
	DECLARE @TempDelivery TABLE ( DeliverableId int)
	insert into @TempDelivery (DeliverableId) select distinct DeliverableId from DeliveryTerritory where TerritoryId = @pTerritoryId
	
	--------delete from DeliveryTerritory--------
    delete From DeliveryTerritory Where TerritoryID=@pTerritoryId;

	--------delete from OutletBrickAllocations--------
	delete from OutletBrickAllocations where TerritoryId = @pTerritoryId;
	
	--------delete from Groups--------
	select @rootGroupId = RootGroup_id from Territories where Id = @pTerritoryId;
	update Territories set RootGroup_id = NULL where Id = @pTerritoryId;
	;WITH CTEGroups AS (
	  SELECT *
	  FROM Groups
	  WHERE Id = @rootGroupId
	  UNION ALL
	  SELECT t1.*
	  FROM Groups t1 INNER JOIN
	  CTEGroups v ON t1.ParentId = v.Id
	 )
	DELETE
	FROM Groups
	WHERE Id IN (SELECT Id FROM CTEGroups);
	
	--------delete from Levels--------
	delete from Levels where TerritoryId = @pTerritoryId;

	--------delete from Territories--------
	delete from Territories where Id = @pTerritoryId;
	
	-- update Restriction level in Deliverables 
		
		declare @Delid int,@Restrictionid int,@LvlNo int
		while exists (select DeliverableId from @TempDelivery)
		begin
			Set @LvlNo=0
			select top 1 @Delid = DeliverableId from @TempDelivery order by DeliverableId asc
			--
			select @Restrictionid = RestrictionId from Deliverables where DeliverableId=@Delid
			if @Restrictionid is not null and @Restrictionid > 0
				begin
				select @LvlNo=min(lvl) from(
				select max(LevelNumber)lvl from [Levels] where TerritoryId in(select TerritoryId from DeliveryTerritory
						where DeliverableId =@Delid) group by TerritoryId )x

				if  @Restrictionid > @LvlNo or @LvlNo is null
				begin
					Update Deliverables set RestrictionId=null where DeliverableId=@Delid
				end
			end

			delete @TempDelivery  where DeliverableId = @Delid

		end
END

-- TO TEST --
---------------------------------------------
	--select * from territories
	--select * from groups where id >= 1470
	--declare @id int
	--set @id = 1116
	--select * from Territories where id = @id order by 1
	--select * from Levels where TerritoryId = @id
	--select * from Groups where TerritoryId = @id --and CustomGroupNumberSpace is null--and levelNo = 3 order by LevelNo
	--select * from OutletBrickAllocations where TerritoryId = @id --order by 
---------------------------------------------

--[dbo].[IRPDeleteTerritory] 1116
GO
PRINT N'Altering [dbo].[IRPImportLogStatus]...';


GO
ALTER Procedure [dbo].[IRPImportLogStatus]
	@pImportType char(1),
	@pClientId int ,
	@dimensionId int,
	@key nvarchar(100),
	@pUser nvarchar(100)

AS
BEGIN
	
	if(@pImportType = 'T')
	begin
		declare @Tkount int
		declare @Lkount int
		declare @Gkount int
		declare @Okount int

		declare @RefKount int



			select @Tkount = count(*) from territories where dimensionid = @dimensionId
			select @Lkount = count(*) from Levels where territoryId = (select id from territories where dimensionid = @dimensionId)
			select @Gkount = count(*) from Groups where territoryId = (select id from territories where dimensionid = @dimensionId)
			select @Okount = count(*) from OutletBrickAllocations 
			where territoryId = (select id from territories where dimensionid = @dimensionId)

			if(@Tkount = 0 OR @Lkount = 0 OR @Gkount = 0 OR @Okount = 0)
			begin
				insert into dbo.IRPImportLog (ClientId, DimType, DimensionId, [Status], TimeOfImport, [Key], UserName)
				values (@pClientId, @pImportType, @dimensionId, 'FAILED', cast(GETDATE() as DATE), @key, @pUser) 

				exec [IRPDeleteTerritory] (select id from territories where dimensionid = @dimensionId)
			end
			else
			begin
				insert into dbo.IRPImportLog (ClientId, DimType, DimensionId, [Status], TimeOfImport, [Key], UserName)
				values (@pClientId, @pImportType, @dimensionId, 'SUCCESS', GETDATE(), @Key, @pUser) 
			end
		end
		else
		begin
			declare @Mkount int
			declare @Bkount int
			declare @Pkount int

			select @Mkount = count(*) from MarketDefinitions where dimensionid = @dimensionId
			select @Bkount = count(*) from MarketDefinitionBaseMaps where MarketDefinitionId = (select id from MarketDefinitions where dimensionid = @dimensionId)
			select @Pkount = count(*) from MarketDefinitionPacks where MarketDefinitionId = (select id from MarketDefinitions where dimensionid = @dimensionId)
			
			if(@Mkount = 0 OR @Bkount = 0 OR @Pkount = 0)
			begin
				insert into dbo.IRPImportLog (ClientId, DimType, DimensionId, [Status], TimeOfImport, [Key], UserName)
				values (@pClientId, @pImportType, @dimensionId, 'FAILED', cast(GETDATE() as DATE), @key, @pUser) 
				
				exec [IRPDeleteMarketDefinitionFromDimensionID] @dimensionId
			end
			else
			begin
				insert into dbo.IRPImportLog (ClientId, DimType, DimensionId, [Status], TimeOfImport, [Key], UserName)
				values (@pClientId, @pImportType, @dimensionId, 'SUCCESS', GETDATE(), @key, @pUser) 
			end

		end

END
GO
PRINT N'Altering [dbo].[SP_GroupLevelTerritory]...';


GO
ALTER PROCEDURE [dbo].[SP_GroupLevelTerritory]
	@territoryid int,@CGNS varchar(11)
AS
BEGIN
SET NOCOUNT ON;

declare @levelnameshiearchy table
(
	id int,
	name varchar(15),
	levelno int,
	parentid int,
	nodecode varchar(15),
	territoryid int
);

WITH EntityChildren AS
(
	SELECT gr.id,gr.name,levelno,parentid as parentid,customgroupnumberspace as nodecode,gr.territoryid  FROM groups  gr
	
	WHERE gr.territoryid = @territoryid
	and customgroupnumberspace =  @CGNS
	UNION ALL
	SELECT e.id,e.name,e.levelno,e.parentid,e.customgroupnumberspace as nodecode,e.territoryid FROM groups e INNER JOIN EntityChildren e2 on e.id = e2.parentid
	and e.territoryid = e2.territoryid
)
insert into @levelnameshiearchy
SELECT id,name,levelno,isnull(parentid,1) as parentid,isnull(nodecode,1)as nodecode ,territoryid
from EntityChildren

insert into dbo.GroupLevelTerritory
(territoryid,LVL_1_TERR_CD,LVL_2_TERR_CD,LVL_3_TERR_CD,LVL_4_TERR_CD,LVL_5_TERR_CD,LVL_6_TERR_CD,LVL_7_TERR_CD,LVL_8_TERR_CD,
LVL_1_TERR_NM,LVL_2_TERR_NM,LVL_3_TERR_NM,LVL_4_TERR_NM,LVL_5_TERR_NM,LVL_6_TERR_NM,LVL_7_TERR_NM,LVL_8_TERR_NM,nodecode)
select a.*,b.nodecode
from
(
SELECT 
	territoryid,
	max([1]) as LVL_1_TERR_CD, max([2]) LVL_2_TERR_CD, max([3]) LVL_3_TERR_CD, max([4]) LVL_4_TERR_CD, max([5]) LVL_5_TERR_CD, max([6]) LVL_6_TERR_CD, max([7]) LVL_7_TERR_CD, max([8]) LVL_8_TERR_CD
	,max([9]) as LVL_1_TERR_NM, max([10]) LVL_2_TERR_NM, max([11]) LVL_3_TERR_NM, max([12]) LVL_4_TERR_NM, max([13]) LVL_5_TERR_NM, max([14]) LVL_6_TERR_NM, max([15]) LVL_7_TERR_NM, max([16]) LVL_8_TERR_NM


FROM

(

	select territoryid,levelno, case when col ='nodecode' then 0
	when col = 'name' then 8
	end+levelno new_col,
	value
	from @levelnameshiearchy
	unpivot
	(
		value for col in (nodecode,name)
		   
	)unpiv

    ) AS SourceTable
PIVOT
(
	max(value)
	FOR new_col IN ([1], [2], [3], [4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16])
) AS PivotTable
group by territoryid
)a left outer join 
(
	SELECT distinct customgroupnumberspace as nodecode,territoryid  FROM groups WHERE territoryid = @territoryid
	and customgroupnumberspace =  @CGNS
)
b
on a.territoryid=b.territoryid


END
GO
PRINT N'Altering [dbo].[SP_BrickGroupLevelTerritory]...';


GO
ALTER PROCEDURE [dbo].[SP_BrickGroupLevelTerritory]
AS
BEGIN
SET NOCOUNT ON;

	DECLARE @territoryId int,
			@nodecode varchar(15)
	TRUNCATE TABLE dbo.GroupLevelTerritory
	TRUNCATE TABLE dbo.BrickGroupLevelTerritory

	DECLARE vendor_cursor CURSOR FOR   
		select distinct nodecode,territoryid from dbo.OutletBrickAllocations
		order by territoryid
	

	OPEN vendor_cursor  

	FETCH NEXT FROM vendor_cursor   
	INTO @nodecode, @territoryId  

	WHILE @@FETCH_STATUS = 0  
	BEGIN  
		EXEC [dbo].[SP_GroupLevelTerritory] @territoryId,@nodecode
		FETCH NEXT FROM vendor_cursor   
		INTO @nodecode, @territoryId
	END   
	CLOSE vendor_cursor;  
	DEALLOCATE vendor_cursor;
	 
-- Cursor Ends

	insert into dbo.BrickGroupLevelTerritory
	(territoryid,nodecode,BrickOutletCode,BrickOutletName)
	select territoryid,NodeCode,BrickOutletCode,BrickOutletName
	from dbo.OutletBrickAllocations
--Brick level data insertion ends

	update u
	set u.LVL_1_TERR_CD = s.LVL_1_TERR_CD,
	u.LVL_2_TERR_CD = s.LVL_2_TERR_CD,
	u.LVL_3_TERR_CD=s.LVL_3_TERR_CD,
	u.LVL_4_TERR_CD =s.LVL_4_TERR_CD,
	u.LVL_5_TERR_CD = s.LVL_5_TERR_CD,
	u.LVL_6_TERR_CD = s.LVL_6_TERR_CD,
	u.LVL_7_TERR_CD = s.LVL_7_TERR_CD,
	u.LVL_8_TERR_CD = s.LVL_8_TERR_CD,

	u.LVL_1_TERR_NM =s.LVL_1_TERR_NM,
	u.LVL_2_TERR_NM =s.LVL_2_TERR_NM,
	u.LVL_3_TERR_NM =s.LVL_3_TERR_NM,
	u.LVL_4_TERR_NM =s.LVL_4_TERR_NM,
	u.LVL_5_TERR_NM =s.LVL_5_TERR_NM,
	u.LVL_6_TERR_NM =s.LVL_6_TERR_NM,
	u.LVL_7_TERR_NM =s.LVL_7_TERR_NM,
	u.LVL_8_TERR_NM =s.LVL_8_TERR_NM

	from dbo.BrickGroupLevelTerritory u
		left outer join dbo.GroupLevelTerritory s on
			u.territoryid = s.territoryid
			and u.nodecode = s.nodecode

--All brick level root path update done
END
GO
PRINT N'Altering [SERVICE].[CREATE_TERRITORY_OUTPUT_2]...';


GO
ALTER PROCEDURE [SERVICE].[CREATE_TERRITORY_OUTPUT_2]
AS
BEGIN
SET NOCOUNT ON;

	exec [SP_BrickGroupLevelTerritory]

	truncate table [SERVICE].[AU9_CLIENT_TERR]
	--select * into AU9_CLIENT_TERR_TEMP from [SERVICE].[AU9_CLIENT_TERR]

	insert into [SERVICE].[AU9_CLIENT_TERR]
	SELECT distinct [territoryid] [CLIENT_TERR_ID], 1 [CLIENT_TERR_VERS_NBR], [BrickOutletCode]
		  ,[lvl_1_terr_cd],[LVL_1_TERR_NM]
		  ,[LVL_2_TERR_CD],[LVL_2_TERR_NM]
		  ,[LVL_3_TERR_CD],[LVL_3_TERR_NM]
		  ,[LVL_4_TERR_CD],[LVL_4_TERR_NM]
		  ,[LVL_5_TERR_CD],[LVL_5_TERR_NM]
		  ,[LVL_6_TERR_CD],[LVL_6_TERR_NM]
		  ,[LVL_7_TERR_CD],[LVL_7_TERR_NM]
		  ,[LVL_8_TERR_CD],[LVL_8_TERR_NM]

	FROM [dbo].[BrickGroupLevelTerritory]
		--where [territoryid] = 305 

END
GO
PRINT N'Altering [dbo].[IRPImportMarketQC]...';


GO


ALTER PROCEDURE [dbo].[IRPImportMarketQC] 
		 
AS
BEGIN
	SET NOCOUNT ON;

	declare @dimensionId int

	truncate table IRPQCMarketExcludedPacks
	---------IRP Items count for market definitions-----------

	select distinct a.dimensionid,count(a.itemid)as ItemCount,b.DimensionName,d.id as clientid,d.name as clientname into #source from irp.items a
	left join irp.dimension b on a.dimensionid=b.dimensionid
	left join irp.clientmap c on b.clientid=c.irpclientid
	left join clients d on c.clientid=d.id
	where b.baseid=4 and a.levelno=3 and b.versionto>0 and a.versionto > 0
	and a.dimensionid in (select distinct dimensionid from marketdefinitions)
	--AND a.DIMENSIONID = 2237
	group by a.dimensionid,b.DimensionName,d.id,d.name
	order by a.dimensionid 

	--select * from #source order by dimensionid

	----------ECP Items count after import----------------------
	select distinct b.dimensionid, count(distinct a.PFC)ItemCount, a.marketdefinitionid,b.clientid
	into #dest 
	 from marketdefinitionpacks a
	join marketdefinitions b on a.marketdefinitionid=b.id join irp.dimension c on c.dimensionid=b.dimensionid 
	join irp.items i on i.dimensionid= c.dimensionid and i.levelno=c.levels
	join marketbases m on a.marketbaseid=m.id
	--join dimproduct_expanded e on i.item=e.fcc
	where c.versionto>0 and 
	c.baseid=4 and 
	alignment='dynamic-right'
	AND c.DIMENSIONID in (select distinct dimensionid from marketdefinitions)
	and a.marketbaseid not like('%,%')
	group by a.marketdefinitionid,b.dimensionid,b.clientid
	--,m.name,m.suffix
	--order by b.dimensionid 

----------------Insert excluded packs in qc table--------------------------------

	insert into IRPQCMarketExcludedPacks

	select a.*
	,b.pack_description as Pack_Description
	from (
	select a.item as fcc, a.dimensionid 
	from irp.items a 
	join marketdefinitions b on a.dimensionid=b.dimensionid
	 where a.levelno=3
	and a.versionto>0
	and b.id in (select distinct marketdefinitionid from marketdefinitionpacks)
	--order by a.dimensionid,a.itemid

	except

	select c.fcc, b.dimensionid from marketdefinitionpacks a
	join marketdefinitions b on a.marketdefinitionid=b.id
	join dimproduct_expanded c on a.pfc=c.pfc
	where a.alignment='dynamic-right')A
	--join dimproduct_expanded b
	join  excluded_dimproduct_expanded B
	on a.fcc=b.fcc


	select distinct dimensionid, count(distinct fcc) ItemCount into #exPacks from IRPQCMarketExcludedPacks
	group by dimensionid

-----Final report import count-------------------------------------------- 

select a.ClientId,a.ClientName,
a.Dimensionid as IRPDimensionID, a.DimensionName,
t.name as MarketBaseName,b.MarketDefinitionId, isnull(a.Itemcount,0) as IRPItemCount, 
isnull(b.Itemcount,0) as ECPItemCount
, isnull(c.Itemcount,0) as ExcludedPackCount
, isnull(b.Itemcount,0)+isnull(c.Itemcount,0) as TotalItemCount,a.Itemcount-(isnull(b.Itemcount,0)+isnull(c.Itemcount,0)) as [Difference]
from #source a 
left join #dest b on a.dimensionid=b.dimensionid 
left join #exPacks c on a.dimensionid=c.dimensionid
left join marketdefinitionbasemaps t on t.marketdefinitionid=b.marketdefinitionid
--where a.dimensionid=3863
order by a.dimensionid,b.marketdefinitionid

----------Final report Group---------------

----------------IRP------------------
select a.dimensionid,a.marketdefinitionid,count(distinct fcc) as GroupNameCountIRP
into #g1 
from (select  DISTINCT p.dimensionid,m.id as marketdefinitionid,
    CASE WHEN TRY_CONVERT(int, p.item) IS not NULL 
    THEN p.item
    ELSE null  
    END AS FCC,
	   d.pfc,
       p.Name,
       case Charindex(';', g.shortname)
       when 0 then null
       when 1 then null
       else Substring(g.shortname, 1,Charindex(';', g.shortname)-1)
       end as groupname,
       case Charindex(';', g.shortname)
       when 0 then null
       when LEN(g.shortname) then null
       else Substring(g.shortname, Charindex(';', g.shortname)+8, LEN(g.shortname))
       end as factor,
       g.number [groupno]
       from irp.items g
       join irp.items p
       on g.itemid = p.parent
       join marketdefinitions m 
       on p.dimensionid=m.dimensionid
       join dimproduct_expanded d on d.fcc=p.item
       where g.dimensionid 
       in (select distinct dimensionid from marketdefinitions where id in
       (select distinct marketdefinitionid from marketdefinitionpacks))
       and p.itemtype = 1
       and p.versionto > 0
       and g.versionto > 0
       and TRY_CONVERT(int, p.item) IS not NULL 
	   and g.shortname is not null)a
	   group by a.dimensionid,a.marketdefinitionid
	   

-------ECP--------------------------------------------------
	   select distinct marketdefinitionid,count(distinct pfc) GroupNameCountECP into #g2 from marketdefinitionpacks 
	   where groupname not like '' 
	   group by marketdefinitionid

	   select a.*,isnull(b.GroupNameCountECP,0) GroupNameCountECP ,a.groupnamecountIRP-isnull(b.GroupNameCountECP,0) as [Difference]
	   from #g1 a left join #g2 b on a.marketdefinitionid=b.marketdefinitionid order by a.dimensionid

END


--use preprod
--exec [dbo].[IRPImportMarketQC]

--drop table #source
--drop table #dest
--drop table #exPacks

--select * from IRPQCMarketExcludedPacks
GO
PRINT N'Altering [dbo].[GenerateQCForDataRefresh]...';


GO

ALTER PROCEDURE [dbo].[GenerateQCForDataRefresh]
AS
BEGIN
	 ----------OVERALL QC report-------------
       declare @totalCount int
       declare @addCount int
       declare @deleteCount int
       declare @modifiedCount int
	   --insert into QCDataRefresh 

	   select @addCount = count(pfc) 
       from dimproduct_expanded
       where change_flag = 'A'

	   select @deleteCount = count(pfc) 
       from dimproduct_expanded
       where change_flag = 'D'
	   
	   select @modifiedCount = count(pfc) 
       from dimproduct_expanded
       where change_flag = 'M'

	   select @totalCount = count(*)
	   from [dbo].[RAW_TDW-ECP_DIM_PRODUCT]

	   insert into LogMarketDataRefresh
	   select getdate() Time_Stamp, @totalCount as 'TotalPacks', @addCount as 'NewPacks', @deleteCount as 'DeletedPacks', @modifiedCount as 'ModifiedPacks', 'Success' as [Status], NULL 

END
GO
PRINT N'Altering [dbo].[PopulateMaintenanceCalendar]...';


GO

ALTER PROCEDURE [dbo].[PopulateMaintenanceCalendar] 
AS
BEGIN

Update Maintenance_Calendar
Set Schedule_From=a.Schedule_From,Schedule_To=a.Schedule_To
From Maintenance_Calendar_Staging a
Join  Maintenance_Calendar b on a.[year]=b.[year] and LEFT(a.Month,3)=LEFT(b.Month,3)

INSERT INTO  [dbo].[Maintenance_Calendar]
           ([Year]           ,[Month]
           ,[Schedule_From]           ,[Schedule_To]
           ,[ActionDate])
Select		a.[Year]           ,a.[Month]
           ,a.[Schedule_From]           ,a.[Schedule_To]
           ,a.[ActionDate]
from Maintenance_Calendar_Staging a
left join  Maintenance_Calendar b on a.[year]=b.[year] and LEFT(a.Month,3)=LEFT(b.Month,3)
where b.ID is null


END
GO
PRINT N'Altering [dbo].[RevalidateMarketDefinition]...';


GO
  
  
-- =============================================  
-- Author:  <Author,,Name>  
-- Create date: <Create Date,,>  
-- Description: <Description,,>  
-- =============================================  
ALTER PROCEDURE [dbo].[RevalidateMarketDefinition]   
 -- Add the parameters for the stored procedure here  
 @MarketBaseId int   
AS  
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from  
 -- interfering with SELECT statements.  
 SET NOCOUNT ON;  
  
  
-- get Packs for MB  
CREATE TABLE #MarketBaseWithPack(MarketBaseId nvarchar(Max),PFC nvarchar(Max) ,FCC nvarchar(Max))  
CREATE TABLE #RemovePacks(Id int, MarketBaseId nvarchar(Max),PFC nvarchar(Max))  
CREATE TABLE #AddPacks(MarketBaseId nvarchar(Max),PFC nvarchar(Max))  
                                
INSERT #MarketBaseWithPack (MarketBaseId, PFC,FCC)  
   EXEC GetPacksFromMarketBase @MarketBaseId  
  
SELECT * FROM #MarketBaseWithPack  
  
---Update Market Base name in [MarketDefinitionPacks] table  
UPDATE [MarketDefinitionPacks]  
SET MarketBase = (SELECT DISTINCT NAME+' '+Suffix FROM [MarketBases] WHERE ID = @MarketBaseId)  
WHERE MarketBaseId= cast(@MarketBaseId as varchar)  
  
---Update Market Base name in [[MarketDefinitionBaseMaps]] table  
UPDATE [MarketDefinitionBaseMaps]  
SET [Name] = (SELECT DISTINCT NAME+' '+Suffix FROM [MarketBases] WHERE ID = @MarketBaseId)  
WHERE MarketBaseId= cast(@MarketBaseId as varchar) 
  
--Get MarketDef IDs for MBs  
SELECT DISTINCT [MarketDefinitionId],[MarketBaseId]  
INTO #MarketDefinitionDetails  
FROM [dbo].[MarketDefinitionPacks]  
WHERE [MarketBaseId] COLLATE DATABASE_DEFAULT IN (SELECT distinct MarketBaseId COLLATE DATABASE_DEFAULT FROM #MarketBaseWithPack )  
  
SELECT * FROM #MarketDefinitionDetails  
 
 
 --IGNORING ALL COMMA ENTRIES in MARKETDEFINITIONPACKS
IF OBJECT_ID(N'tempdb..#nonCommaMarketDefinitionPacks') IS NOT NULL drop table #nonCommaMarketDefinitionPacks
select distinct id, marketdefinitionid, marketbaseid, PFC into #nonCommaMarketDefinitionPacks from marketdefinitionpacks where marketbaseid not like '%,%'
 
----Remove Packs from Market Def  
DECLARE @Count int;  
DECLARE @MyCursor CURSOR;  
DECLARE @MyField int;  
BEGIN  
    SET @MyCursor = CURSOR FOR  
    SELECT DISTINCT [MarketDefinitionId] from #MarketDefinitionDetails  
          
  
    OPEN @MyCursor   
    FETCH NEXT FROM @MyCursor   
    INTO @MyField  
  
    WHILE @@FETCH_STATUS = 0  
    BEGIN  
 -------------Pack will be removed---------------  
   truncate table #RemovePacks  
   INSERT INTO #RemovePacks  
   SELECT B.id, A.* FROM   
   (SELECT DISTINCT MarketBaseId COLLATE DATABASE_DEFAULT MarketBaseId,PFC COLLATE DATABASE_DEFAULT PFC FROM #nonCommaMarketDefinitionPacks  
   WHERE [MarketDefinitionId]=@MyField AND [MarketBaseId]=@MarketBaseId  
      EXCEPT  
      SELECT DISTINCT MarketBaseId COLLATE DATABASE_DEFAULT MarketBaseId, PFC COLLATE DATABASE_DEFAULT PFC FROM #MarketBaseWithPack) A
	join   #nonCommaMarketDefinitionPacks B on A.MarketBaseId = B.MarketBaseId and A.PFC = B.PFC
  
   ---removing packs from Market Def  

   SELECT 'PACKS REMOVED', * FROM #RemovePacks  
   --DELETE FROM [MarketDefinitionPacks]  
   --WHERE PFC COLLATE DATABASE_DEFAULT IN (SELECT DISTINCT PFC COLLATE DATABASE_DEFAULT FROM #RemovePacks)    
   --AND [MarketDefinitionId]=@MyField AND MarketBaseId=@MarketBaseId  

   DELETE FROM MarketDefinitionPacks WHERE id in (select ID from #RemovePacks)	
	  
   -------------Pack will be added---------------  
   truncate table #AddPacks  
   INSERT INTO #AddPacks  
   SELECT * FROM   
   (SELECT DISTINCT MarketBaseId COLLATE DATABASE_DEFAULT MarketBaseId, PFC COLLATE DATABASE_DEFAULT PFC FROM #MarketBaseWithPack  
    EXCEPT  
    SELECT DISTINCT MarketBaseId COLLATE DATABASE_DEFAULT MarketBaseId,PFC COLLATE DATABASE_DEFAULT PFC FROM #nonCommaMarketDefinitionPacks  
    WHERE [MarketDefinitionId]=@MyField AND [MarketBaseId]=@MarketBaseId) A  
  
    ---add packs into Market Def  
    INSERT INTO [MarketDefinitionPacks]  
    SELECT DISTINCT Pack_Description AS Pack ,   
                    MDBM.[Name]  AS MarketBase,   
                       MDBM.[MarketBaseId]  AS MarketBaseId,  
                       '' AS GroupNumber,   
        '' AS GroupName,   
        '' AS Factor,   
        DIMProduct_Expanded.PFC AS PFC,    
           Org_Long_Name AS Manufacturer,   
        ATC4_Code AS ATC4,   
        NEC4_Code AS NEC4,  
           MDBM.[DataRefreshType]  AS DataRefreshType,   
        '' AS [StateStatus],  
        MDBM.[MarketDefinitionId] AS [MarketDefinitionId],  
        CASE   
       WHEN MDBM.[DataRefreshType] ='dynamic' THEN MDBM.[DataRefreshType]+'-right'  
       ELSE  MDBM.[DataRefreshType]+'-left'  
        END AS [Alignment],  
        ProductName AS Product,  
           'A' AS [ChangeFlag],
		DM.Description Molecule    
   FROM  DIMProduct_Expanded   
      JOIN DMMoleculeConcat DM   
      ON DIMProduct_Expanded.FCC = DM.FCC  
      JOIN #AddPacks  
      ON #AddPacks.PFC COLLATE DATABASE_DEFAULT = DIMProduct_Expanded.PFC COLLATE DATABASE_DEFAULT  
      JOIN [MarketDefinitionBaseMaps] MDBM  
      ON #AddPacks.MarketBaseId= CONVERT(nvarchar(Max), MDBM.[MarketBaseId])  
      WHERE MDBM.[MarketDefinitionId]=@MyField  
  
      FETCH NEXT FROM @MyCursor   
      INTO @MyField   
    END;   
  
    CLOSE @MyCursor ;  
    DEALLOCATE @MyCursor;  
END;  
  
DROP TABLE #MarketBaseWithPack  
DROP TABLE #RemovePacks  
DROP TABLE #AddPacks  
  
END  

--[dbo].[RevalidateMarketDefinition] 546
GO
PRINT N'Altering [dbo].[ProcessMarketDefinitionForNewDataLoad]...';


GO
ALTER PROCEDURE [dbo].[ProcessMarketDefinitionForNewDataLoad]
 @MarketDefinitionId int 
AS
BEGIN
	SET NOCOUNT ON;

	print('MarketDefinitionId: ')
	print(@MarketDefinitionId)
	
	
	select * into #loopTable2 from MarketDefinitionBaseMaps
	where MarketDefinitionId = @MarketDefinitionId
	--select* from #loopTable2
	declare @pMarketDefinitionBaseMapId int
	declare @pMarketBaseId int

	while exists(select * from #loopTable2)
	begin
		select @pMarketDefinitionBaseMapId = (select top 1 Id
						   from #loopTable2
						   order by Id asc)
		select @pMarketBaseId = MarketBaseId from #loopTable2 where Id = @pMarketDefinitionBaseMapId

		print('MarketBaseId: ')
		print(@pMarketBaseId)

		print('MarketDefBaseMapId: ')
		print(@pMarketDefinitionBaseMapId)

		-------CALL SP TO PROCESS PACKS FOR ROW-------
		EXEC [dbo].[ProcessPacksFromMarketBaseMap] 
		@MarketDefinitionId = @MarketDefinitionId,
		@MarketBaseId = @pMarketBaseId,
		@MarketDefBaseMapId = @pMarketDefinitionBaseMapId

		delete #loopTable2
		where Id = @pMarketDefinitionBaseMapId
	end

	drop table #loopTable2
END


--[dbo].[ProcessPacksFromMarketBaseMap] 430,653,569
--[dbo].[ProcessMarketDefinitionForNewDataLoad] 430
--select * from MarketDefinitionBaseMaps where MarketDefinitionId = 430
--select * from marketdefinitions

--[dbo].[ProcessMarketDefinitionForNewDataLoad] 1
GO
PRINT N'Altering [dbo].[DeleteRuledOutPacksFromMarketDefinitions]...';


GO
ALTER PROCEDURE [dbo].[DeleteRuledOutPacksFromMarketDefinitions]
 @MarketDefinitionId int,
 @query nvarchar(max)
AS
BEGIN
	SET NOCOUNT ON;

	declare @defCount int
	declare @queryCount int

	declare @QueryResult table(PFC varchar(30))
	insert @QueryResult EXEC(@query)

	--select * from @QueryResult
	
	IF OBJECT_ID(N'tempdb..#packInQuery') IS NOT NULL drop table #packInQuery
	select * into #packInQuery from @QueryResult

	delete from marketdefinitionpacks where pfc in
	(
		select distinct pfc from marketdefinitionpacks where marketdefinitionid = @MarketDefinitionId
		except 
		select distinct pfc from #packInQuery
	) and marketdefinitionid = @MarketDefinitionId

	select @defCount = count(distinct pfc) from marketdefinitionpacks where marketdefinitionid =@MarketDefinitionId 
	select @queryCount = count(distinct pfc) from #packInQuery  

	insert into QCDeltaPackComparison
	select @MarketDefinitionId, @queryCount, @defCount
	 
	
	


END
GO
PRINT N'Altering [SERVICE].[CREATE_AU9_CLIENT_MKT_PACK]...';


GO


/****** Script for SelectTopNRows command from SSMS  ******/
ALTER PROCEDURE [SERVICE].[CREATE_AU9_CLIENT_MKT_PACK]
AS
BEGIN

TRUNCATE TABLE [SERVICE].[AU9_CLIENT_MKT_PACK]
INSERT INTO [SERVICE].[AU9_CLIENT_MKT_PACK]

SELECT distinct
	 CAST([MarketDefinitionId] AS INT) AS [CLIENT_MKT_ID]
	,CAST('1' AS INT) AS [CLIENT_MKT_VERS_NBR]
	,CAST(B.FCC AS INT) AS [FCC]
    ,CAST([GroupNumber] AS VARCHAR(50)) AS [PACK_GRP_ID]
	--,CASE
	--	WHEN GroupNumber IN ('GR','N',NULL)
	--	THEN 0
	--	ELSE CAST(GroupNumber AS INT)
	-- END AS [PACK_GRP_ID]
    ,CAST([GroupName] AS VARCHAR(MAX)) AS [PACK_GRP_NM]
    ,CAST(ROUND([Factor],2) AS DECIMAL(15,5)) AS [MKT_FCT]
	,C.clientid
    --,A.[PFC] AS PFC
FROM [dbo].[MarketDefinitionPacks] A
JOIN 
(SELECT DISTINCT [PFC],[FCC] FROM [dbo].[DIMProduct_Expanded]) B ON A.PFC=B.PFC
join MarketDefinitions C on C.id = A.MarketDefinitionId
where Alignment = 'dynamic-right'

update [SERVICE].[AU9_CLIENT_MKT_PACK]
set PACK_GRP_ID=null
where PACK_GRP_ID =''

--SELECT 
--	   [CLIENT_MKT_ID]
--      ,[CLIENT_MKT_VERS_NBR]
--      ,[FCC]
--      ,[PACK_GRP_ID]
--      ,[PACK_GRP_NM]
--      ,[MKT_FCT]
--FROM [ECP_TO_TDW].[SERVICE].[AU9_CLIENT_MKT_PACK]

----------OVERALL QC report-------------
	IF OBJECT_ID('dbo.QCTDWWriteback') IS NOT NULL DROP TABLE QCTDWWriteback
	select CLIENT_MKT_ID MarketDefinitionId, count(FCC) [Count], GETDATE() [Time] 
	into QCTDWWriteback 
	from [SERVICE].[AU9_CLIENT_MKT_PACK]
	group by CLIENT_MKT_ID

END

--select * from [SERVICE].[AU9_CLIENT_MKT_PACK]
GO
PRINT N'Altering [dbo].[DeleteRuledOutPacks]...';


GO
ALTER procedure DeleteRuledOutPacks 
as
begin
	declare @pMarketDefinitionId int
	declare @sql nvarchar(max)

	truncate table QCDeltaPackComparison

	select marketdefinitionid, replace(query, ' AND CHANGE_FLAG = ''A''', '') query into #queryLoopTable
	from
	(
		select marketdefinitionid, substring(query,7,len(query)) query from
		(
			SELECT distinct 
				b.marketdefinitionid, 
				(SELECT ' union ' + a.query 
				FROM marketbasemapquery a
				WHERE a.marketdefinitionid = b.marketdefinitionid
				FOR XML PATH('')) [query]
			FROM marketbasemapquery b
			GROUP BY b.marketdefinitionid, b.query
		)A
	)B

	while exists(select * from #QueryLoopTable)
	begin
		select @pMarketDefinitionId = (select top 1 marketdefinitionid
							from #QueryLoopTable
							order by marketdefinitionid asc)

		print('Mkt def id : ')
		print(@pMarketDefinitionId)
		-------CALL SP TO PROCESS EACH MARKET DEFINITION-------
		select @sql = 'select distinct PFC  from (' + query + ' )X' from #QueryLoopTable where marketdefinitionid = @pMarketDefinitionId
		exec [dbo].[DeleteRuledOutPacksFromMarketDefinitions] @pMarketDefinitionId, @sql

		delete #QueryLoopTable where marketdefinitionid = @pMarketDefinitionId
	end

	drop table #QueryLoopTable
end
GO
PRINT N'Altering [dbo].[GenerateBricksAndOutlets]...';


GO
ALTER PROCEDURE [dbo].[GenerateBricksAndOutlets] 
AS
BEGIN
	SET NOCOUNT ON;
	declare @rawDataCount int
	select @rawDataCount=count(*) from [dbo].[RAW_TDW-ECP_DIM_OUTLET]

	if @rawDataCount > 0 
	begin
		----Generating tblBrick-----
		declare @rowCount int
		select @rowCount = count(*) from tblBrick

		IF @rowCount = 0 
		begin
			insert into tblBrick
			SELECT DISTINCT Sbrick AS Brick, Sbrick_Desc as BrickName, '' AS [Address], '' as BannerGroup, 
			State_Code as [State], 
			case when isnumeric(SBRICK)<>1 then 'H' else 'R' end as Panel,
			'A' as ChangeFlag, Retail_Sbrick as BrickLocation
			FROM dbo.DIMOutlet
			where State_Code <> ''  and Sbrick is not null
		end
		ELSE
		begin
			SELECT DISTINCT Sbrick AS Brick, Sbrick_Desc as BrickName, 
			
			'' AS [Address], '' as BannerGroup, 
			State_Code as [State], 
			case when isnumeric(SBRICK)<>1 then 'H' else 'R' end as Panel,
			'A' as ChangeFlag, Retail_Sbrick as BrickLocation
			
			into #tmpBrick
			FROM [dbo].[RAW_TDW-ECP_DIM_OUTLET]
			where State_Code <> ''  and Sbrick is not null


--select * from #tmpBrick
--select * from tblbrick

	
			MERGE [dbo].[tblBrick] AS TARGET
			USING (select * from #tmpBrick) AS SOURCE
			ON (TARGET.[Brick]=SOURCE.[Brick]) --and TARGET.BrickLocation=SOURCE.BrickLocation)

			WHEN MATCHED
			THEN
			UPDATE SET TARGET.ChangeFlag =
				CASE
					WHEN
						LTRIM(RTRIM(TARGET.[BrickName]))	<>	LTRIM(RTRIM(SOURCE.[BrickName]))	OR
						LTRIM(RTRIM(TARGET.[State]))	<>	LTRIM(RTRIM(SOURCE.[State]))	OR
						LTRIM(RTRIM(TARGET.[BrickLocation]))	<>	LTRIM(RTRIM(SOURCE.[BrickLocation]))	
					THEN 'M'
					ELSE 'U'
				END
		
				,TARGET.[BrickName]=SOURCE.[BrickName]
				,TARGET.[Address]=SOURCE.[Address]
				,TARGET.[BannerGroup]=SOURCE.[BannerGroup]
				,TARGET.[State]=SOURCE.[State]
				,TARGET.[BrickLocation]=SOURCE.[BrickLocation]
				,TARGET.[Panel]=SOURCE.[Panel]
		

			WHEN NOT MATCHED BY TARGET THEN
				INSERT (Brick, BrickName, Address, BannerGroup, State, Panel, ChangeFlag, BrickLocation)

				VALUES(SOURCE.Brick, SOURCE.BrickName, '', '', SOURCE.State, case when isnumeric(SOURCE.Brick)<>1 then 'H' else 'R' end, 'A', SOURCE.BrickLocation)

			WHEN NOT MATCHED BY SOURCE THEN
				UPDATE SET TARGET.CHANGEFLAG='D';
		end
		;
		--REMOVE FINAL DUPLICATES
		With cte_duplicate (brick, brickname, Address, bannergroup, state, panel,  bricklocation, rownumber)
		as (
			select brick, brickname, Address, bannergroup, state, panel,  bricklocation, row_number()over(partition by brick, brickname, Address, bannergroup, state, panel,  bricklocation order by brick, brickname, Address, bannergroup, state, panel,  bricklocation)as rank 
			from tblBrick
		)
		delete from cte_duplicate where rownumber<>1  ;
	
		------insert to tbloutlet
		truncate table tblOutlet
		insert into tblOutlet
		SELECT DISTINCT Outl_brk Outlet, Name AS OutletName, REPLACE(REPLACE(FullAddr, CHAR(13), ' '), CHAR(10), ' ') AS [Address], BannerGroup_Desc as BannerGroup,
		State_Code as [State], 
		case when left(ENTITY_TYPE,1) = 'H' and left(out_type,1)=2 then 'H'
			 when left(ENTITY_TYPE,1) = 'P' then 'R' 
			 when left(ENTITY_TYPE,1) = 'o' then 'O' end as Panel,
	
		CHANGE_FLAG as ChangeFlag, EID, '' as OutletLocation
		FROM dbo.DIMOutlet
		where State_Code <> ''  and Outl_brk is not null
	end

	---------temporary----------
	--exec [dbo].[ProcessTerritoryForDelta]

END
GO
PRINT N'Altering [dbo].[GENERATE_DIM_OUTLET]...';


GO


ALTER PROCEDURE [dbo].[GENERATE_DIM_OUTLET]
AS
BEGIN

--update [RAW_TDW-ECP_DIM_OUTLET]-----
--Update Statecode according to Rachel's ref
UPDATE dbo.[RAW_TDW-ECP_DIM_OUTLET]  
SET State_Code = 
( CASE  
WHEN (left(Sbrick,1) = 0) THEN 'NT' 
WHEN (left(Sbrick,1) = 2) THEN 'NSW' 
WHEN (left(Sbrick,1) = 3) THEN 'VIC' 
WHEN (left(Sbrick,1) = 4) THEN 'QLD' 
WHEN (left(Sbrick,1) = 5) THEN 'SA' 
WHEN (left(Sbrick,1) = 6) THEN 'WA' 
WHEN (left(Sbrick,1) = 7) THEN 'TAS' 
ELSE  (State_Code)
END )

--------Update Raw and dimoutlet------------
---BrickIncorrectNullLookup
--RAW Table
update a
set a.retail_sbrick=o.retail_sbrick
,a.retail_sbrick_desc=o.retail_sbrick_desc
from [RAW_TDW-ECP_DIM_OUTLET] a 
join BrickIncorrectNullLookup b
on a.otlt_cd=b.otlt_cd
join irp.OutletMaster o
on b.otlt_cd=o.outl_brk

---------------------------------------------
----BrickIncorrectLookup
--RAW Table
update a
set a.retail_sbrick=b.Sbrick 
,a.retail_sbrick_desc=b.Sbrick_Desc 
from [RAW_TDW-ECP_DIM_OUTLET] a join BrickIncorrectLookup b
on a.otlt_cd=b.otlt_cd 

------------------update rest of duplicate---
update [RAW_TDW-ECP_DIM_OUTLET]
set retail_sbrick=sbrick,
retail_sbrick_desc=sbrick_desc
where sbrick in (select a.sbrick from 
(select distinct sbrick, count(distinct retail_sbrick) rsbricknum from [RAW_TDW-ECP_DIM_OUTLET] 
where sbrick is not null
group by sbrick)A
where a.rsbricknum>1)
and sbrick<>retail_sbrick

-------------------------------------------------------------------------------

declare @count int
select @count=count(*) from [dbo].[RAW_TDW-ECP_DIM_OUTLET]

if @count > 0 
begin
	MERGE [dbo].[DIMOutlet] AS TARGET
	USING [dbo].[RAW_TDW-ECP_DIM_OUTLET] AS SOURCE
	ON (TARGET.[Outl_Brk]=SOURCE.OTLT_CD)

	WHEN MATCHED
	THEN
	UPDATE SET TARGET.CHANGE_FLAG =
		CASE
			WHEN
				LTRIM(RTRIM(TARGET.[Outl_Brk]))	<>	LTRIM(RTRIM(SOURCE.[OTLT_CD]))	OR
				LTRIM(RTRIM(TARGET.[Name]))	<>	LTRIM(RTRIM(SOURCE.[Name]))	OR
				LTRIM(RTRIM(TARGET.[FullAddr]))	<>	LTRIM(RTRIM(SOURCE.[FullAddr]))	OR
				--LTRIM(RTRIM(TARGET.[Addr1]))	<>	LTRIM(RTRIM(SOURCE.[Addr1]))	OR
				--LTRIM(RTRIM(TARGET.[Addr2]))	<>	LTRIM(RTRIM(SOURCE.[Addr2]))	OR
				--LTRIM(RTRIM(TARGET.[Suburb]))	<>	LTRIM(RTRIM(SOURCE.[Suburb]))	OR
				--LTRIM(RTRIM(TARGET.[Phone]))	<>	LTRIM(RTRIM(SOURCE.[Phone]))	OR
				--LTRIM(RTRIM(TARGET.[XCord]))	<>	LTRIM(RTRIM(SOURCE.[XCord]))	OR
				--LTRIM(RTRIM(TARGET.[YCord]))	<>	LTRIM(RTRIM(SOURCE.[YCord]))	OR
				LTRIM(RTRIM(TARGET.[Entity_Type]))	<>	LTRIM(RTRIM(SOURCE.[Entity_Type]))	OR
				--LTRIM(RTRIM(TARGET.[Display]))	<>	LTRIM(RTRIM(SOURCE.[Display]))	OR
				LTRIM(RTRIM(TARGET.[BannerGroup_Desc]))	<>	LTRIM(RTRIM(SOURCE.[BannerGroup_Desc]))	OR
				--LTRIM(RTRIM(TARGET.[Retail_Sbrick_Desc]))	<>	LTRIM(RTRIM(SOURCE.[Retail_Sbrick_Desc]))	OR
				--LTRIM(RTRIM(TARGET.[Sbrick]))	<>	LTRIM(RTRIM(SOURCE.[Sbrick]))	OR
				--LTRIM(RTRIM(TARGET.[Sbrick_Desc]))	<>	LTRIM(RTRIM(SOURCE.[Sbrick_Desc]))	OR
				LTRIM(RTRIM(TARGET.[State_Code]))	<>	LTRIM(RTRIM(SOURCE.[State_Code])) OR
				LTRIM(RTRIM(TARGET.[Outlet]))	<>	LTRIM(RTRIM(SOURCE.[Outlet])) OR
				LTRIM(RTRIM(TARGET.[Out_Type]))	<>	LTRIM(RTRIM(SOURCE.[Out_Type]))	
			THEN 'M'
			ELSE 'U'
		END
		,TARGET.BRICK_CHANGE_FLAG =
		CASE
			WHEN
				--LTRIM(RTRIM(TARGET.[Retail_Sbrick_Desc]))	<>	LTRIM(RTRIM(SOURCE.[Retail_Sbrick_Desc]))	OR
				LTRIM(RTRIM(TARGET.[BannerGroup_Desc]))	<>	LTRIM(RTRIM(SOURCE.[BannerGroup_Desc]))	OR
				LTRIM(RTRIM(TARGET.[State_Code]))	<>	LTRIM(RTRIM(SOURCE.[State_Code])) OR
				LTRIM(RTRIM(TARGET.[Sbrick]))	<>	LTRIM(RTRIM(SOURCE.[Sbrick]))	OR
				LTRIM(RTRIM(TARGET.[Sbrick_Desc]))	<>	LTRIM(RTRIM(SOURCE.[Sbrick_Desc]))
			THEN 'M'
			ELSE 'U'
		END
		,TARGET.[OUTLETID]=SOURCE.OTLT_CD
		,TARGET.[POSTCODE]=SOURCE.[POSTCODE]
		,TARGET.[AID]=SOURCE.[AID]
		,TARGET.[NAME]=SOURCE.[NAME]
		,TARGET.[FULLADDR]=SOURCE.[FULLADDR]
		,TARGET.[ADDR1]=SOURCE.[ADDR1]
		,TARGET.[ADDR2]=SOURCE.[ADDR2]
		,TARGET.[SUBURB]=SOURCE.[SUBURB]
		,TARGET.[PHONE]=SOURCE.[PHONE]
		,TARGET.[XCORD]=SOURCE.[XCORD]
		,TARGET.[YCORD]=SOURCE.[YCORD]
		,TARGET.[ENTITY_TYPE]=SOURCE.[ENTITY_TYPE]
		,TARGET.[DISPLAY]=SOURCE.[DISPLAY]
		,TARGET.[BANNERGROUP_DESC]=SOURCE.[BANNERGROUP_DESC]
		,TARGET.[RETAIL_SBRICK]=SOURCE.[RETAIL_SBRICK]
		,TARGET.[RETAIL_SBRICK_DESC]=SOURCE.[RETAIL_SBRICK_DESC]
		,TARGET.[SBRICK]=SOURCE.[SBRICK]
		,TARGET.[SBRICK_DESC]=SOURCE.[SBRICK_DESC]
		,TARGET.[STATE_CODE]=SOURCE.[STATE_CODE]
		,TARGET.[EID]=SOURCE.[OTLT_LOC_CD] --ADDED 27-08-2017 BY ASHFAQ
		,TARGET.[Outlet]=SOURCE.[Outlet] --ADDED 18/9
		,TARGET.[Outl_Brk]=SOURCE.[OTLT_CD] --ADDED 27-08-2017 BY ASHFAQ
		,TARGET.[OUT_TYPE]=SOURCE.[OUT_TYPE]
		,TARGET.[OUTLET_TYPE_DESC]=SOURCE.[OUTLET_TYPE_DESC]
		,TARGET.[INACTIVE_DATE]=SOURCE.[INACTIVE_DATE]
		,TARGET.[ACTIVE_DATE]=SOURCE.[ACTIVE_DATE]
		,TARGET.[TIME_STAMP]=GETDATE()
		,TARGET.[BRICK_TIME_STAMP]=GETDATE()

	WHEN NOT MATCHED BY TARGET THEN
		INSERT (OUTLETID, POSTCODE, Outl_Brk, EID, AID, NAME, FULLADDR, ADDR1, ADDR2, SUBURB, PHONE,
				XCORD, YCORD, ENTITY_TYPE, DISPLAY,BANNERGROUP_DESC, RETAIL_SBRICK, RETAIL_SBRICK_DESC, SBRICK, SBRICK_DESC,
				STATE_CODE, OUT_TYPE, OUTLET_TYPE_DESC, INACTIVE_DATE, ACTIVE_DATE, CHANGE_FLAG, TIME_STAMP, BRICK_CHANGE_FLAG, [BRICK_TIME_STAMP])

		VALUES(SOURCE.OTLT_CD, SOURCE.POSTCODE, SOURCE.OTLT_CD, SOURCE.OTLT_LOC_CD, SOURCE.AID, SOURCE.NAME, SOURCE.FULLADDR, SOURCE.ADDR1, SOURCE.ADDR2, SOURCE.SUBURB, SOURCE.PHONE, SOURCE.XCORD, SOURCE.YCORD, SOURCE.ENTITY_TYPE,
		 SOURCE.DISPLAY,SOURCE.BANNERGROUP_DESC, SOURCE.RETAIL_SBRICK, SOURCE.RETAIL_SBRICK_DESC, SOURCE.SBRICK, SOURCE.SBRICK_DESC, SOURCE.STATE_CODE,SOURCE.[OUT_TYPE], SOURCE.[OUTLET_TYPE_DESC],
		  SOURCE.INACTIVE_DATE, SOURCE.ACTIVE_DATE,'A',GETDATE(),'U',GETDATE())

	WHEN NOT MATCHED BY SOURCE THEN
		UPDATE SET TARGET.CHANGE_FLAG='D',
		TARGET.[TIME_STAMP]=GETDATE(),
		TARGET.BRICK_CHANGE_FLAG='U',
		TARGET.[BRICK_TIME_STAMP]=GETDATE();
		/*
	/*----SBRICK CHANGE FLAG START-----*/

	MERGE [dbo].[DIMOutlet] AS TARGET
	USING [dbo].[RAW_TDW-ECP_DIM_OUTLET] AS SOURCE
	ON (TARGET.[Sbrick]=SOURCE.[Sbrick])

	WHEN MATCHED
	THEN
	UPDATE SET TARGET.BRICK_CHANGE_FLAG =
		CASE
			WHEN
				LTRIM(RTRIM(TARGET.[Retail_Sbrick_Desc]))	<>	LTRIM(RTRIM(SOURCE.[Retail_Sbrick_Desc]))	OR
				LTRIM(RTRIM(TARGET.[Sbrick]))	<>	LTRIM(RTRIM(SOURCE.[Sbrick]))	OR
				LTRIM(RTRIM(TARGET.[Sbrick_Desc]))	<>	LTRIM(RTRIM(SOURCE.[Sbrick_Desc]))
			THEN 'M'
			ELSE 'U'
		END
		,TARGET.[BRICK_TIME_STAMP]=GETDATE()

	WHEN NOT MATCHED BY TARGET THEN
		INSERT (BRICK_CHANGE_FLAG, BRICK_TIME_STAMP)

		VALUES('A',GETDATE())

	WHEN NOT MATCHED BY SOURCE THEN
		UPDATE SET TARGET.[BRICK_CHANGE_FLAG]='D',
		TARGET.[BRICK_TIME_STAMP]=GETDATE();

		/*----SBRICK CHANGE FLAG END-----*/
		*/

	INSERT INTO  [dbo].[HISTORY_TDW-ECP_DIM_OUTLET] 
	SELECT *

	FROM [dbo].[DIMOutlet]
	WHERE CHANGE_FLAG<>'U' AND BRICK_CHANGE_FLAG<>'U'

	UPDATE A SET A.TIME_STAMP=B.TIME_STAMP,A.BRICK_TIME_STAMP=B.BRICK_TIME_STAMP FROM [dbo].[DIMOutlet] A
	INNER JOIN (
	SELECT
		 [OUTLETID]
		,[POSTCODE]
		,[Outlet]
		,[Outl_Brk]
		,[EID]
		,[AID]
		,[NAME]
		,[FULLADDR]
		,[ADDR1]
		,[ADDR2]
		,[SUBURB]
		,[PHONE]
		,[XCORD]
		,[YCORD]
		,[ENTITY_TYPE]
		,[DISPLAY]
		,[BANNERGROUP_DESC]
		,[RETAIL_SBRICK]
		,[RETAIL_SBRICK_DESC]
		,[SBRICK]
		,[SBRICK_DESC]
		,[STATE_CODE]
		,[OUT_TYPE]
		,[OUTLET_TYPE_DESC]
		,[INACTIVE_DATE]
		,[ACTIVE_DATE]
		,[CHANGE_FLAG],
		MIN(TIME_STAMP)AS TIME_STAMP
		,[BRICK_CHANGE_FLAG],
		MIN(BRICK_TIME_STAMP)AS BRICK_TIME_STAMP
	FROM [dbo].[HISTORY_TDW-ECP_DIM_OUTLET]
	WHERE CHANGE_FLAG='D'  AND BRICK_CHANGE_FLAG='D'
	GROUP BY [OUTLETID]
		,[POSTCODE]
		,[Outlet]
		,[Outl_Brk]
		,[EID]
		,[AID]
		,[NAME]
		,[FULLADDR]
		,[ADDR1]
		,[ADDR2]
		,[SUBURB]
		,[PHONE]
		,[XCORD]
		,[YCORD]
		,[ENTITY_TYPE]
		,[DISPLAY]
		,BANNERGROUP_DESC
		,[RETAIL_SBRICK]
		,[RETAIL_SBRICK_DESC]
		,[SBRICK]
		,[SBRICK_DESC]
		,[STATE_CODE]
		,[OUT_TYPE]
		,[OUTLET_TYPE_DESC]
		,[INACTIVE_DATE]
		,[ACTIVE_DATE]
		,[CHANGE_FLAG]
		,[BRICK_CHANGE_FLAG]) B
	ON A.[OUTLETID]=B.[OUTLETID]
	WHERE A.CHANGE_FLAG='D' AND B.CHANGE_FLAG='D'
	AND A.BRICK_CHANGE_FLAG='D' AND B.BRICK_CHANGE_FLAG='D'

	;With CTE
	AS
	(
	SELECT *,ROW_NUMBER ()OVER(PARTITION BY [OUTLETID] ORDER BY [OUTLETID], TIME_STAMP ASC) Cnt 
	FROM [dbo].[HISTORY_TDW-ECP_DIM_OUTLET] WHERE  CHANGE_FLAG='D'
	)
	DELETE FROM CTE WHERE Cnt>1


	;With CTE
	AS
	(
	SELECT *,ROW_NUMBER ()OVER(PARTITION BY [SBRICK] ORDER BY [SBRICK], BRICK_TIME_STAMP ASC) Cnt 
	FROM [dbo].[HISTORY_TDW-ECP_DIM_OUTLET] WHERE  BRICK_CHANGE_FLAG='D'
	)
	DELETE FROM CTE WHERE Cnt>1 --AND BRICK_CHANGE_FLAG IS NULL AND BRICK_TIME_STAMP IS NULL
end


END
GO
PRINT N'Altering [dbo].[MaintenanceCalendarRemainder]...';


GO

ALTER PROCEDURE [dbo].[MaintenanceCalendarRemainder]
AS
BEGIN
DECLARE @Today DATETIME,@PDate as Date,@ScheduleTo as Date,@Month varchar(20), @Year varchar(10),@EndDate DATETIME,@Holiday int,@WorkingDays Int
 
SET @Today = GETDATE()
--SET @Today = '2017/10/13'
SET @PDate = @Today

if exists(select * from Maintenance_Calendar where @PDate between cast(Schedule_From as DATE) and cast(Schedule_To as DATE))
begin
			
   select @Month =  month,@Year = Year,@ScheduleTo=Schedule_To from Maintenance_Calendar
   where @PDate between cast(Schedule_From as DATE) and cast(Schedule_To as DATE)
   SET @EndDate = @ScheduleTo
   Print  @EndDate

   --Gets the number of holidays excluding the weekend holidays
   select @Holiday=count(*) from AU9_HOLIDAY where CAL_DT between cast(@Today as DATE) and cast(@EndDate as DATE)
   and (DATENAME(dw, CAL_DT) != 'Sunday' and DATENAME(dw, CAL_DT) != 'Saturday')    

   SELECT @WorkingDays =
   (DATEDIFF(dd, @Today, @EndDate) )
  -(DATEDIFF(wk, @Today, @EndDate) * 2)  
  - @Holiday
  -(CASE WHEN DATENAME(dw, @Today) = 'Sunday' THEN 1 ELSE 0 END)
  -(CASE WHEN DATENAME(dw, @EndDate) = 'Saturday' THEN 1 ELSE 0 END)   

	 if(@WorkingDays = 2)
	 begin
	  DECLARE @RecipientList varchar(max), @emailSub varchar(100),@bodyText nvarchar(max)
			SET @RecipientList = STUFF((SELECT ';' + email FROM [User] WHERE MaintenancePeriodEmail = 1 FOR XML PATH('')),1,1,'')
			SET @emailSub = 'Everest: Maintenance reminder - '  + @Month + ' ' + @Year
			SET @bodyText=  N'Please do not reply to this system generated e-mail.' +
			CHAR(13)+CHAR(10)+CHAR(13)+CHAR(10)+
			N'Dear User,' +
			CHAR(13)+CHAR(10)+CHAR(13)+CHAR(10)+
			N'If you have already submitted your maintenance for ' + @Month + ' ' + @Year + ', thank you and please ignore this email reminder.' +
			CHAR(13)+CHAR(10)+CHAR(13)+CHAR(10)+
			N'Please note, that this is a reminder that the ' + @Month + ' ' + @Year + ' maintenance is due on ' + CAST(@ScheduleTo AS varchar) + '.' +
			CHAR(13)+CHAR(10)+
			N'NOTE - Maintenance received after the due date will be aligned for the following production month.' +
			CHAR(13)+CHAR(10)+CHAR(13)+CHAR(10)+
			N'Thanks,' + 
			CHAR(13)+CHAR(10)+
			N'IQVIA'
			
			EXEC msdb.dbo.sp_send_dbmail  
				@profile_name = 'SQLMAIL',  
				--@recipients = @RecipientList,
				@recipients = 'sivaswamy.g@in.imshealth.com',  
				@body =  @bodyText,
				@subject = @emailSub;
	 end
	 else print 'Mail not sent'
	
End
			  
End
GO
PRINT N'Creating [dbo].[DeleteMarketBase_old]...';


GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[DeleteMarketBase_old] 
	-- Add the parameters for the stored procedure here
	@MarketBaseId int 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

SELECT DISTINCT [MarketDefinitionId]
INTO #TEMP
FROM [dbo].[MarketDefinitionPacks]
WHERE [MarketBaseId]=@MarketBaseId


--to del market base
DELETE  FROM [dbo].[MarketBases]
WHERE ID=@MarketBaseId

DELETE FROM [dbo].[BaseFilters]
WHERE [MarketBaseId]=@MarketBaseId

DELETE FROM [ClientMarketBases]
WHERE [MarketBaseId]=@MarketBaseId

DELETE FROM  [dbo].[MarketDefinitionBaseMaps]
WHERE [MarketBaseId]=@MarketBaseId

--DELETE FROM [dbo].[MarketDefinitionPacks]
--WHERE [MarketBaseId]=@MarketBaseId

---for MarketDefinitionPacks
	DELETE FROM [dbo].[MarketDefinitionPacks]
	WHERE [MarketBaseId]=cast(@MarketBaseId as varchar)

	UPDATE [dbo].[MarketDefinitionPacks]
	SET [MarketBaseId] = replace([MarketBaseId], ','+cast(@MarketBaseId as varchar), '')
	WHERE [MarketBaseId] LIKE '%,'+cast(@MarketBaseId as varchar)

	UPDATE [dbo].[MarketDefinitionPacks]
	SET [MarketBaseId] = replace([MarketBaseId], cast(@MarketBaseId as varchar)+',', '')
	WHERE [MarketBaseId] LIKE cast(@MarketBaseId as varchar)+',%'

	UPDATE [dbo].[MarketDefinitionPacks]
	SET [MarketBaseId] = replace([MarketBaseId], ','+cast(@MarketBaseId as varchar)+',', ',')
	WHERE [MarketBaseId] LIKE '%,'+cast(@MarketBaseId as varchar)+',%'

-----------------------------------------
--delete market definition if it uses only one deleted MB

DECLARE @Count int;
DECLARE @MyCursor CURSOR;
DECLARE @MyField int;
BEGIN
    SET @MyCursor = CURSOR FOR
    SELECT DISTINCT [MarketDefinitionId] from #TEMP
        

    OPEN @MyCursor 
    FETCH NEXT FROM @MyCursor 
    INTO @MyField

    WHILE @@FETCH_STATUS = 0
    BEGIN
      SELECT @Count=COUNT(*) from #TEMP
	  WHERE [MarketDefinitionId]=@MyField 
	  IF(@Count>0) 
			BEGIN
				DELETE FROM [dbo].[MarketDefinitions]
				WHERE ID=@MyField 
			END

      FETCH NEXT FROM @MyCursor 
      INTO @MyField 
    END; 

    CLOSE @MyCursor ;
    DEALLOCATE @MyCursor;
END;
--------------------------------------------
END
GO
PRINT N'Creating [dbo].[EditDimensionBaseMap]...';


GO
CREATE PROCEDURE [dbo].[EditDimensionBaseMap]
	@marektbaseId int,
    @TVP TYPDimensionBaseMap READONLY
    AS
    SET NOCOUNT ON
	begin transaction
		delete from IRP.DimensionBaseMap where MarketBaseId = @marektbaseId
		insert into IRP.DimensionBaseMap select * from @TVP 
	commit
GO
PRINT N'Creating [dbo].[EditMarketDefinition]...';


GO
CREATE PROCEDURE [dbo].[EditMarketDefinition]
	@marketdefinitionid int,
    @TVP TYP_MarketDefinitionPacks READONLY
    AS
    SET NOCOUNT ON
	begin transaction
		delete from marketdefinitionpacks where marketdefinitionid = @marketdefinitionid
		insert into marketdefinitionpacks select * from @TVP 
	commit
GO
PRINT N'Creating [dbo].[EditOutletBrickAllocations]...';


GO


CREATE PROCEDURE [dbo].[EditOutletBrickAllocations]
	@territoryID int,
    @TVP TYP_OutletBrickAllocations READONLY
    AS
    SET NOCOUNT ON
	begin transaction
		delete from OutletBrickAllocations where territoryID = @territoryID
		insert into OutletBrickAllocations select * from @TVP 
	commit
GO
PRINT N'Creating [dbo].[GetDimensionBaseMaps]...';


GO
CREATE PROCEDURE [dbo].[GetDimensionBaseMaps]
	@pMarketBaseId int
AS
BEGIN
	Select a.DimensionId, b.DimensionName,0 as Id,a.MarketBaseId 
	from IRP.DimensionBaseMap a join IRP.Dimension b on a.DimensionId = b.DimensionId
	where a.MarketBaseId = @pMarketBaseId
END
GO
PRINT N'Creating [dbo].[GetIRPDimensionsForMarketbase]...';


GO
Create procedure [dbo].[GetIRPDimensionsForMarketbase]
 @pClientId int 
as
begin

	select 0 as Id, 0 as MarketbaseId, cast(DimensionId as int) as DimensionId , DimensionName from irp.Dimension where clientid IN (select irpclientid from irp.clientmap  where clientid = @pClientId) AND
		dimensiontype = 2 and versionto > 0 
end
GO
PRINT N'Creating [dbo].[GetMarketGroup]...';


GO
create procedure [dbo].[GetMarketGroup]
	@pMarketDefinitionId int
as
begin
	select * from [dbo].[vwGroupView] where marketdefinitionid = @pMarketDefinitionId
end
GO
PRINT N'Creating [dbo].[GetMarketGroupPacks]...';


GO
CREATE procedure [dbo].[GetMarketGroupPacks]
	@pMarketDefinitionId int
as
begin
	select a.id, a.GroupId,a.PFC,
	Pack_Description AS Pack , Org_Long_Name AS Manufacturer, 
	ATC1_Code AS ATC1, ATC2_Code AS ATC2, ATC3_Code AS ATC3, ATC4_Code AS ATC4, 
	NEC1_Code AS NEC1, NEC2_Code AS NEC2, NEC3_Code AS NEC3, NEC4_Code AS NEC4,  
	ProductName AS Product, [Frm_Flgs3_Desc] AS Branding, [FRM_Flgs5_Desc] AS Flagging, 
	dm.[Description] AS Molecule, a.MarketDefinitionId
	from [dbo].marketgrouppacks a
	join dimproduct_expanded b on a.PFC = b.PFC 
	join dmmoleculeconcat dm on dm.FCC = b.FCC
	where a.marketdefinitionid = @pMarketDefinitionId
end
GO
PRINT N'Creating [dbo].[GetPacksFromMarketBaseHistory]...';


GO
create PROCEDURE [dbo].[GetPacksFromMarketBaseHistory]
 @MarketBaseId int,
 @Version int
AS
BEGIN
	SET NOCOUNT ON;

	declare @HasMolecule bit
	set @HasMolecule = 0
	declare @ConditionValue nvarchar(500)

	select B.Id, B.Name, C.ColumnName as Criteria, B.[Values], B.MarketBaseMBId,B.MarketBaseVersion, C.ColumnName 
	into #baseFilters
	from dbo.BaseFilter_History B join [dbo].[CONFIG_ECP_MKT_DEF_FILTERS] C on B.Criteria = C.FilterValue
	where B.MarketBaseMBId = @MarketBaseId and b.MarketBaseVersion=@Version and B.Criteria not in ('Molecule')

	--select * from #baseFilters
	if((select count(*) from  dbo.BaseFilter_History where MarketBaseMBId = @MarketBaseId and MarketBaseVersion=@Version and Criteria='Molecule')>=1)
	begin
	 set @HasMolecule=1
	 set @ConditionValue= (select [Values] from  dbo.BaseFilter_History where MarketBaseMBId = @MarketBaseId and MarketBaseVersion=@Version and Criteria='Molecule')
	end
	  

	select MarketBaseMBId, Criteria + ' in ' + '(' + [Values] + ') AND ' conditions
	into #columnsToAppend
	from #baseFilters 

	--select * from #columnsToAppend

	declare @whereClause nvarchar(max)
	declare @selectSql nvarchar(max)

	select distinct @whereClause = ' where ' + conditions from
		(
			SELECT 
				b.MarketBaseMBId, 
				(SELECT ' ' + a.conditions 
				FROM #columnsToAppend a
				WHERE a.MarketBaseMBId = b.MarketBaseMBId
				FOR XML PATH('')) [conditions]
			FROM #columnsToAppend b
			GROUP BY b.MarketBaseMBId, b.conditions
			--ORDER BY 1
		)c
	
	set @whereClause = left(@whereClause, len(@whereClause) - 4)
	print(@whereClause)

	if(@HasMolecule=0)
	begin
	set @selectSql = 'select distinct PFC, FCC from DimProduct_Expanded ' + @whereClause
	end

	if(@HasMolecule=1)
	begin
	set @selectSql = 'select distinct PFC, P.FCC from DimProduct_Expanded P join [DMMolecule] M on P.FCC=M.FCC ' + @whereClause+ ' and M.Description in ('+@ConditionValue+')'
	end

	print(@selectSql)
	EXEC(@selectSql)
	
END
GO
PRINT N'Creating [dbo].[ImportIAMDeliverablesFromIRG]...';


GO
CREATE procedure [dbo].[ImportIAMDeliverablesFromIRG]
( @ClientNo int)
As
BEGIN
SET NOCOUNT ON

--declare @Debug int = 0, @donotUpdate int = 0

------Sections---------
--1. Validations
--5. Deliverables
--5.1. Country
--5.2. Source
--5.3. Service
--5.4. DataType
--5.5. Duration
--5.5. Frequency
--5.6 FrequencyType
--5.7 Period
--5.8 DeliveryType
------Sections---------

BEGIN TRAN

BEGIN TRY
-------Variable Declarations---------
--TEMP TABLES
DECLARE @ImportInfo TABLE (ImportInfoType varchar(20), Code varchar(20), ImportMessage varchar(500), ImportInformation varchar(5000))
DECLARE @ImportData TABLE (ImportDataType varchar(20), ImportData varchar(20))
DECLARE @Deliverables TABLE (ClientId int, CountryId int, ServiceId int, SourceId int, DataTypeId int, SubscriptionDurationFrom datetime, SubscriptionDurationTo datetime, ServiceTerritoryId int, 
ClientNo int, ReportNo int, DeliveryTypeId int, FrequencyId int, FrequencyTypeId int, PeriodId int, DeliverablesDurationFrom datetime, DeliverablesDurationTo datetime, ReportId int, ReportName varchar(100), ReportWriterId int, PRIMARY KEY (ClientNo, ReportNo) )
DECLARE @Report TABLE (RowID int not null primary key identity(1,1), clientno int, ReportID int, ReportNo int, ReportName varchar(500), WriterID int  )
DECLARE @DeliverablesData TABLE ([Status] varchar(20), SubscriptionId int,	ReportWriterId int,	FrequencyTypeId int,	RestrictionId int,	PeriodId int,	Frequencyid int,	StartDate datetime,	EndDate datetime,	[probe] varchar(500),	PackException bit,	Census bit,	OneKey	bit,LastModified	datetime,ModifiedBy	int,DeliveryTypeId int, DeliverableId int)
DECLARE @SubscriptionData TABLE ([Status] varchar(20), Name VARCHAR(500),	ClientId int,	StartDate datetime,	EndDate datetime,	ServiceTerritoryId int,	Active bit,	LastModified datetime,	ModifiedBy int,	CountryId int,	ServiceId int,	DataTypeId int,	SourceId int, SubscriptionId int) 
--TEMP VARIABLES
DECLARE @ClientId int
DECLARE @ValidationError int, @RowsToProcess int, @CurrentRow int
-------Variable Declarations---------

--constants to use in import information table
declare @CnstInfoTypeErr varchar(20), @SectionClient varchar(20), @StdMsgNotFound varchar(500), @StdMsgDuplicate varchar(500)
select @CnstInfoTypeErr = 'ERROR'
select @SectionClient = 'Client'
select @StdMsgNotFound = 'Data not found'
select @StdMsgDuplicate = 'Multiple entries found'
--constants to use in import information table



----------------------------------------1.VALIDATIONS---------------------------------
--do we have right data copied from IRG
--is there an entry in irp.client
--are there duplicate entries in irp.client
declare @clientnocount int
select @clientnocount = count(ClientNo) from irp.Client where ClientNo = @clientno and versionto = 32767 group by ClientNo 

if (@clientnocount is null) BEGIN INSERT INTO @ImportInfo values (@CnstInfoTypeErr, @SectionClient, @StdMsgNotFound, null) END
ELSE BEGIN 
if (@clientnocount > 1) BEGIN INSERT INTO @ImportInfo values (@CnstInfoTypeErr, @SectionClient, @StdMsgDuplicate, null) END
END

--have we mapped right data from IRG to Everest
--is there an entry in irp.clientmap
--are there duplicate entries in irp.clientmap
---------select * from irp.ClientMap where IRPClientNo = @clientno

--do we have right data in everest client table for the mapped IRG client
--is there an entry in Clients
--are there duplicate entries in Clients
---------select * from clients where id = 12

--check the IAM deliverables 
--do we have right data copied from IRG in  tables
--is there an entries in IRP.Report, IRP.ReportParameter
--are there duplicate entries in IRP.Report, IRP.ReportParameter
---------select * from irp.report where clientid = 672 and versionto = 32767 and ReportNo <> 0


--------------return validation errors
--select ImportInfoType , Code , ImportMessage , ImportInformation from @ImportInfo order by ImportInfoType, Code
--select ImportDataType , ImportData  from @ImportData order by ImportDataType 
--------------return validation errors

----------------------------------------1.VALIDATIONS---------------------------------


----------------------------------------5.SUBSCRIPTIONS and DELIVERABLES---------------------------------

---------Get Everest Client ID
SELECT @ClientId = ClientId FROM IRP.ClientMap WHERE IRPClientNo = @ClientNo
IF (@ClientId is null) GOTO NoClient

---------5a.Get the reports / deliverables for the client
INSERT into @Report (clientno,ReportID,ReportNo,ReportName,WriterID) 
	SELECT  @clientNo,ReportID,ReportNo,ReportName,WriterID FROM IRP.Report R
	join IRP.Client C on R.ClientId = C.ClientId and C.VersionTo = 32767
	where R.VersionTo=32767 and R.ReportNo <> 0 and C.ClientNo = @ClientNo

--if (@Debug =1) SELECT * FROM @Report

---------5b. Loop through each deliverable
SET @RowsToProcess=@@ROWCOUNT
SET @CurrentRow=0
WHILE @CurrentRow<@RowsToProcess
BEGIN
	SET @CurrentRow=@CurrentRow+1
	DECLARE @CountryId int, @ServiceId int, @SourceId int, @DataTypeId int, @SubscriptionDurationFrom datetime, @SubscriptionDurationTo datetime, @ServiceTerritoryId int, @ReportWriterCode VARCHAR(100), @ReportWriterId int
	DECLARE  @DeliveryTypeId int, @FrequencyId int, @FrequencyTypeId int, @PeriodId int, @DeliverablesDurationFrom datetime, @DeliverablesDurationTo datetime
	DECLARE @ReportNo int, @RptId int, @RptName varchar(500),@WriterId int
	SELECT @RptId=ReportID, @RptName = ReportName,@WriterId= writerid, @ReportNo=ReportNo 
	FROM @Report WHERE RowID=@CurrentRow
	
	SELECT @ReportWriterCode = WriterCode from IRP.Writer where writerid=@WriterId
	SELECT top 1 @ReportWriterId = ReportWriterId from ReportWriter where code = LTrim(RTrim(@ReportWriterCode)) and DeliveryTypeId = 3

--------5.1. Country
SET @CountryId=1 --defaulted to AUS
--------5.2. Source
SET @SourceId=1 --defaulted to Sell In
--------5.5. Duration
SET @SubscriptionDurationFrom=DATEADD(yy, DATEDIFF(yy, 0, GETDATE()), 0) --defaulted to jan 1
SET @SubscriptionDurationTo=DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 1, -1) --defaulted to dec 31
--------5.8 DeliveryType default to IAM
SET @DeliveryTypeId = 3
--------5.3. Service
DECLARE @service varchar(100)
SELECT @Service=Name from IRP.ReportParameter where reportid = @RptId  and VersionTo=32767 and Code='ProbePack'
IF @Service = 'NO PROBE'
	SET @ServiceId = 2 --PROFITS
ELSE IF @Service = 'PROBE Packs Manufacturer' or @Service ='PROBE Packs Exceptions' or @Service = 'PROBE Pack Manufacturer'
BEGIN
	Declare @PFCDifference int
	set @PFCDifference = -1

	select @PFCDifference = Count(pfc) from (
	(select rp.ReportID, p.PFC from irp.ReportParameter rp
	join irp.Report r on r.ReportID = rp.ReportID and r.ReportID = @RptId and rp.VersionTo = 32767  and r.VersionTo = 32767 and rp.code = 'DimProd'
	join irp.Dimension d on d.DimensionID = rp.Value and d.VersionTo = 32767 and d.BaseID = 16
	join irp.Items i on i.DimensionID = d.DimensionID and i.VersionTo = 32767 and i.Item is not null
	join DIMProduct_Expanded p on i.Item = p.Org_Abbr	
	UNION
	select rp.ReportID, p.PFC from irp.ReportParameter rp
	join irp.Report r on r.ReportID = rp.ReportID  and r.ReportID = @RptId and rp.VersionTo = 32767  and r.VersionTo = 32767 and rp.code = 'DimProd'
	join irp.Dimension d on d.DimensionID = rp.Value and d.VersionTo = 32767 and d.BaseID = 5
	join irp.Items i on i.DimensionID = d.DimensionID  and i.VersionTo = 32767 and i.Item is not null
	join DIMProduct_Expanded p on i.Item = p.ATC4_Code
	UNION
	select rp.ReportID, p.PFC from irp.ReportParameter rp
	join irp.Report r on r.ReportID = rp.ReportID  and r.ReportID = @RptId and rp.VersionTo = 32767  and r.VersionTo = 32767 and rp.code = 'DimProd'
	join irp.Dimension d on d.DimensionID = rp.Value and d.VersionTo = 32767 and d.BaseID = 4
	join irp.Items i on i.DimensionID = d.DimensionID and i.Item is not null
	join DIMProduct_Expanded p on i.Item = convert(varchar, p.fcc)	
	)
	EXCEPT
	(
	--probe pack mfr
	select rp.ReportID, p.PFC from irp.ReportParameter rp
	join irp.Report r on r.ReportID = rp.ReportID  and r.ReportID = @RptId and rp.VersionTo = 32767  and r.VersionTo = 32767 and rp.code = 'ProbePack'
	join irp.Dimension d on d.DimensionID = rp.Value  and d.VersionTo = 32767 and d.BaseID = 16
	join irp.Items i on i.DimensionID = d.DimensionID  and i.Item is not null
	join DIMProduct_Expanded p on i.Item = p.Org_Abbr	
	UNION
	--probe pack exceptions
	select rp.ReportID, p.PFC from irp.ReportParameter rp
	join irp.Report r on r.ReportID = rp.ReportID  and r.ReportID = @RptId and rp.VersionTo = 32767  and r.VersionTo = 32767 and rp.code = 'ProbePack'
	join irp.Dimension d on d.DimensionID = rp.Value   and d.VersionTo = 32767 and d.BaseID = 4
	join irp.Items i on i.DimensionID = d.DimensionID   and i.Item is not null
	join DIMProduct_Expanded p on i.Item = convert(varchar, p.fcc)
	)) packs
	join irp.Report r on packs.ReportID = r.reportid
	group by r.ReportId, r.ReportName
				
	if (@PFCDifference > 0) 
		SET @ServiceId = 7
	ELSE 
		set @ServiceId = 1
END	

--------5.4. DataType
DECLARE @DataType varchar(100)
if exists (select distinct(t.outletCategory) 
	from irp.ReportParameter r
	join irp.Items i on i.DimensionID = r.Value and i.item is not null and i.VersionTo = 32767
	join irp.OutletMaster o on o.entity_type = i.item
	join irp.outlettype t on t.outlettype = o.out_type and t.OutletCategory = 'R'
	where r.ReportID = @RptId and r.VersionTo = 32767 and r.Code = 'DimChannel')
	begin
		set @DataType = 'Retail'
	end

	if exists (select distinct(t.outletCategory) 
	from irp.ReportParameter r
	join irp.Items i on i.DimensionID = r.Value and i.item is not null and i.VersionTo = 32767
	join irp.OutletMaster o on o.entity_type = i.item
	join irp.outlettype t on t.outlettype = o.out_type and t.OutletCategory = 'H'
	where r.ReportID = @RptId and r.VersionTo = 32767 and r.Code = 'DimChannel')
	begin
		if (len(@DataType) >0) BEGIN  SET @DataType = CONCAT (@DataType, ' + ', 'Hospital' ) END
		ELSE BEGIN set @DataType = 'Hospital' END
				
	end

	if exists (select distinct(t.outletCategory) 
		from irp.ReportParameter r
	join irp.Items i on i.DimensionID = r.Value and i.item is not null and i.VersionTo = 32767
	join irp.OutletMaster o on o.entity_type = i.item
	join irp.outlettype t on t.outlettype = o.out_type and t.OutletCategory = 'O'
	where r.ReportID = @RptId and r.VersionTo = 32767 and r.Code = 'DimChannel')
	begin
		if (len(@DataType) >0) BEGIN  SET @DataType = CONCAT (@DataType, ' + ', 'Other Outlet' ) END
		ELSE BEGIN set @DataType = 'Other Outlet' END
	end

	SELECT @DataTypeId = DataTypeId FROM DataType WHERE Name = @DataType

--------5.5. ServiceTerritory
	IF @ServiceId = 1 SET @ServiceTerritoryId = 2 --Outlet level for PROBE
	ELSE if @ServiceId = 2 SET @ServiceTerritoryId = 1 --Brick level for PROFITS
	ELSE if @ServiceId = 7 SET @ServiceTerritoryId = 3 --Both level for PROFITS + PROBE
	ELSE SET @ServiceTerritoryId = 4 --set as N/A


----------5.6 Period
	DECLARE @Value int, @writerParamId int, @Period varchar(100)
	set @Value=0
	select @Value=Value, @writerParamId = WriterParameterID from IRP.ReportParameter where reportid = @RptId  and VersionTo=32767 and Code='DimPeri'
	DECLARE @string varchar(100),@start int,@end int,@len int
	select @string = DimensionName from IRP.Dimension where dimensiontype= 3 and DimensionID = @Value
			
	--set @string = replace(@string, ' ' , '')
	--set @len = len(@string)
	--set @start = PATINDEX('%[0-9]%',@string)
	--set @end = PATINDEX('%[^0-9]%',substring(@string, @start, @len))-1
	--print substring(@string, @start, @end)
	--if left(SUBSTRING(@string,PATINDEX('%[0-9]%',@string)+2,5),5) = 'month'
	--begin 
	--	SET @Period = cast(cast(substring(@string, @start, @end) as int)/12 as varchar) + ' Years'
	--end
	--else
	--begin
	--	select @Period= substring(@string, @start, @end) + ' ' + SUBSTRING(@string,PATINDEX('%[0-9]%',@string)+2,5)
	--end

	SET @Period = cast(cast(substring(@string, PATINDEX('%[0-9][0-9] Months%', @string), 2) as int)/12 as varchar) + ' Years'
	SELECT @PeriodId = PeriodId from Period where Name = @Period

---------5.7 FrequencyType and Frequency
	DECLARE @FrequencyValue int, @FreqType int, @FreqId int
	set @FrequencyValue=-999
	select @FrequencyValue=Value, @writerParamId = WriterParameterID from IRP.ReportParameter where reportid = @RptId  and VersionTo=32767 and Code='Delivery'
	set @FreqType = 0
	set @FreqId =0
	if @FrequencyValue = 0 
		begin
		set @FreqType = 1
		set @FreqId =1
		end
	else if @FrequencyValue= 1 or @FrequencyValue= 2 or @FrequencyValue= 3
		begin 
		set @FreqType = 2  
		if @FrequencyValue= 1 set @FreqId =4
		if @FrequencyValue= 2 set @FreqId =3
		if @FrequencyValue= 3 set @FreqId =2
		end
	else if @FrequencyValue= 22 or @FrequencyValue= 23 or @FrequencyValue= 24 or  @FrequencyValue= 25
		begin
		set @FreqType = 3
		if @FrequencyValue= 22 set @FreqId =8
		if @FrequencyValue= 23 set @FreqId =7
		if @FrequencyValue= 24 set @FreqId =6
		if @FrequencyValue= 25 set @FreqId =5
		end
	else if @FrequencyValue= 4 or @FrequencyValue= 5 or @FrequencyValue= 6 or @FrequencyValue= 7 or @FrequencyValue= 8 or @FrequencyValue= 9
		begin
		set @FreqType = 4
		if @FrequencyValue= 4 set @FreqId =14
		if @FrequencyValue= 5 set @FreqId =13
		if @FrequencyValue= 6 set @FreqId =12
		if @FrequencyValue= 7 set @FreqId =11
		if @FrequencyValue= 8 set @FreqId =10
		if @FrequencyValue= 9 set @FreqId =9
		end
	else if @FrequencyValue= 10 or @FrequencyValue= 11 or @FrequencyValue= 12 or @FrequencyValue= 13 or 
	@FrequencyValue= 14 or @FrequencyValue= 15 or @FrequencyValue= 16 or @FrequencyValue= 17 or @FrequencyValue= 18 
	or @FrequencyValue= 19 or @FrequencyValue= 20 or @FrequencyValue= 21
		begin
		set @FreqType = 5
		if @FrequencyValue= 10 set @FreqId =26
		if @FrequencyValue= 11 set @FreqId =25
		if @FrequencyValue= 12 set @FreqId =24
		if @FrequencyValue= 13 set @FreqId =23
		if @FrequencyValue= 14 set @FreqId =22
		if @FrequencyValue= 15 set @FreqId =21
		if @FrequencyValue= 16 set @FreqId =20
		if @FrequencyValue= 17 set @FreqId =19
		if @FrequencyValue= 18 set @FreqId =18
		if @FrequencyValue= 19 set @FreqId =17
		if @FrequencyValue= 20 set @FreqId =16
		if @FrequencyValue= 21 set @FreqId =15
		end
	else 
		begin
		set @FreqType = 6
		set @FreqId =27
		end

SET @FrequencyId = @FreqId
SET @FrequencyTypeId = @FreqType

-- set deliverables duration same as subscription duration
SET @DeliverablesDurationFrom = @SubscriptionDurationFrom
SET @DeliverablesDurationTo = @SubscriptionDurationTo


	INSERT INTO @Deliverables Values
	(@ClientId, @CountryId, @ServiceId, @SourceId, @DataTypeId, @SubscriptionDurationFrom, @SubscriptionDurationTo, @ServiceTerritoryId,
@ClientNo, @ReportNo, @DeliveryTypeId, @FrequencyId, @FrequencyTypeId, @PeriodId, @DeliverablesDurationFrom, @DeliverablesDurationTo, @RptId, @RptName, @ReportWriterId)

IF (@datatypeid is null OR @serviceid is null OR @periodid is null or @frequencyid is null or @frequencytypeid is null or @reportwriterid is null or @deliverytypeid is null)
BEGIN
SELECT * FROM @deliverables
RAISERROR ('One of the computed parameters is null, aborting import.', -- Message text.  
               21, -- Severity.  
               1 -- State.  
               );  
END


Declare @NewSubscriptionName varchar(200)
SElect @NewSubscriptionName  = C.Name from Country c where c.countryid = @countryid
SElect @NewSubscriptionName  = @NewSubscriptionName+' '+Svc.Name from [SErvice] svc where svc.serviceid = @serviceid
SElect @NewSubscriptionName  = @NewSubscriptionName+' '+Dt.Name from DataTYpe dt where dt.DataTYpeid = @DataTYpeid
SElect @NewSubscriptionName  = @NewSubscriptionName+' '+src.Name from [Source] src where src.Sourceid = @Sourceid

IF EXISTS (Select * from DeliveryReport where ReportId = @rptid)
BEGIN
	Declare @ExistingDeliverableId int, @ExistingSubscriptionId int
	Select @ExistingDeliverableId = DeliverableID from DeliveryReport where ReportId = @rptid
	Select @ExistingSubscriptionId  = SubscriptionId from Deliverables where DeliverableId = @ExistingDeliverableId

	UPDATE Deliverables 
	SET DeliveryTypeId=DeliveryTypeId, FrequencyId=@FrequencyId, FrequencyTypeId=@FrequencyTypeId, PeriodId=@PeriodId
	WHERE DeliverableId = @ExistingDeliverableId
	
	UPDATE Subscription 
	SET ServiceId=@ServiceId, SourceId=@SourceId, DataTypeId=@DataTypeId, CountryId=@CountryId, ServiceTerritoryId=@ServiceTerritoryId, Name = @NewSubscriptionName
	WHERE SubscriptionId = @ExistingSubscriptionId

	Delete from @DeliverablesData where DeliverableId = @ExistingDeliverableId
	Delete from @SubscriptionData where SubscriptionId = @ExistingSubscriptionId

	Insert into @DeliverablesData values ('UPDATED', @ExistingSubscriptionId,	@ReportWriterId,	@FrequencyTypeId,	null,	@PeriodId,	@Frequencyid,	@SubscriptionDurationFrom,	@DeliverablesDurationTo,	null,	null,	null,	null, GETDATE(), 1, @DeliveryTypeId, @ExistingDeliverableId)
	Insert into @SubscriptionData values ('UPDATED', @NewSubscriptionName,	@ClientId,	@DeliverablesDurationFrom,	@SubscriptionDurationTo,	@ServiceTerritoryId,	1,	Getdate(),	1,	@CountryId,	@ServiceId,	@DataTypeId,	@SourceId, @ExistingSubscriptionId) 

END
ELSE
BEGIN

	Declare @NewSubscriptionID int, @NewDeliverableID 	int
	IF EXISTS (SELECT * from Subscription where ClientId = @ClientId and CountryId = @CountryId and [Serviceid]=@serviceid and [SourceId]=@sourceId and DataTypeID = @DataTypeId)
	BEGIN
		SELECT @NewSubscriptionID = SubscriptionId from Subscription where ClientId = @ClientId and CountryId = @CountryId and [Serviceid]=@serviceid and [SourceId]=@sourceId and DataTypeID = @DataTypeId
	END
	ELSE
	BEGIN
	INSERT INTO Subscription (Name,	ClientId,	Country	,[Service]	,Data,	[Source],	StartDate,	EndDate,	ServiceTerritoryId,	Active,	LastModified,	ModifiedBy,	CountryId,	ServiceId,	DataTypeId,	SourceId) 
	values (@NewSubscriptionName, @clientid, null, null, null, null, @SubscriptionDurationFrom, @SubscriptionDurationTo, @ServiceTerritoryId, 1, GetDate(), 1, @CountryId,	@ServiceId,	@DataTypeId,	@SourceId)
	SELECT @NewSubscriptionID = SCOPE_IDENTITY()

		Insert into @SubscriptionData values ('NEW', @NewSubscriptionName,	@ClientId,	@DeliverablesDurationFrom,	@SubscriptionDurationTo,	@ServiceTerritoryId,	1,	Getdate(),	1,	@CountryId,	@ServiceId,	@DataTypeId,	@SourceId, @NewSubscriptionID) 

	END

	INSERT INTO Deliverables (SubscriptionId,	ReportWriterId,	FrequencyTypeId,	RestrictionId,	PeriodId,	Frequencyid,	StartDate,	EndDate,	[probe],	PackException,	Census,	OneKey	,LastModified	,ModifiedBy	,DeliveryTypeId)
	values (@NewSubscriptionID,	@ReportWriterId,	@FrequencyTypeId,	null,	@PeriodId,	@Frequencyid,	@DeliverablesDurationFrom,	@DeliverablesDurationTo,	null,	null,	null,	null,GetDate(),1,@DeliveryTypeId)
	SELECT @NewDeliverableID = SCOPE_IDENTITY()

    Insert into @DeliverablesData values ('NEW', @NewSubscriptionID,	@ReportWriterId,	@FrequencyTypeId,	null,	@PeriodId,	@Frequencyid,	@SubscriptionDurationFrom,	@DeliverablesDurationTo,	null,	null,	null,	null, GETDATE(), 1, @DeliveryTypeId, @NewDeliverableID)
	
	INSERT INTO DeliveryReport (deliverableid, reportid) values (@NewDeliverableID, @rptid)


END
END

--IF @debug=1
--BEGIN
--SELECT cn.Name Country, svc.Name [Service], src.Name [Source],  dty.Name DataType, dt.Name DeliveryType, rw.code ReportWriter, fr.Name Frequency, ft.Name FrequencyType, pr.Name Period, ST.TerritoryBase TerritoryBase, d.* FROM @Deliverables d INNER JOIN
--dbo.Country AS cn ON cn.CountryId = d.CountryId INNER JOIN
--dbo.DataType AS dty ON dty.DataTypeId = d.DataTypeId INNER JOIN
--dbo.Service AS svc ON svc.ServiceId = d.ServiceId INNER JOIN
--dbo.ServiceTerritory AS st ON st.ServiceTerritoryId = d.ServiceTerritoryId INNER JOIN
--dbo.Source AS src ON src.SourceId = d.SourceId INNER JOIN
--dbo.ReportWriter AS rw ON rw.ReportWriterId = d.ReportWriterId INNER JOIN
--dbo.Frequency AS fr ON fr.FrequencyId = d.Frequencyid INNER JOIN
--dbo.FrequencyType AS ft ON ft.FrequencyTypeId = d.FrequencyTypeId INNER JOIN
--dbo.Period AS pr ON pr.PeriodId = d.PeriodId INNER JOIN
--dbo.DeliveryType AS dt ON dt.DeliveryTypeId = d.DeliveryTypeId
--END -- @debug=1

NOClient:

SELECT dt.Name DeliveryType, rw.code ReportWriter, fr.Name Frequency, ft.Name FrequencyType, pr.Name Period,  d.* FROM @DeliverablesData d INNER JOIN
dbo.ReportWriter AS rw ON rw.ReportWriterId = d.ReportWriterId INNER JOIN
dbo.Frequency AS fr ON fr.FrequencyId = d.Frequencyid INNER JOIN
dbo.FrequencyType AS ft ON ft.FrequencyTypeId = d.FrequencyTypeId INNER JOIN
dbo.Period AS pr ON pr.PeriodId = d.PeriodId INNER JOIN
dbo.DeliveryType AS dt ON dt.DeliveryTypeId = d.DeliveryTypeId inner join
dbo.deliverables as de on de.deliverableid = d.deliverableid


SELECT cn.Name Country, svc.Name [Service], src.Name [Source], ST.TerritoryBase TerritoryBase, dty.Name DataType, s.* from @SubscriptionData s INNER JOIN
dbo.Country AS cn ON cn.CountryId = s.CountryId INNER JOIN
dbo.DataType AS dty ON dty.DataTypeId = s.DataTypeId INNER JOIN
dbo.Service AS svc ON svc.ServiceId = s.ServiceId INNER JOIN
dbo.ServiceTerritory AS st ON st.ServiceTerritoryId = s.ServiceTerritoryId INNER JOIN
dbo.Source AS src ON src.SourceId = s.SourceId


COMMIT
END TRY
BEGIN CATCH
--rollback on error
    ROLLBACK
	PRINT ERROR_MESSAGE();
END CATCH;

SET NOCOUNT OFF
END
GO
PRINT N'Creating [dbo].[ImportNONIAMDeliverablesFromIRG]...';


GO
CREATE procedure [dbo].[ImportNONIAMDeliverablesFromIRG]
( @ClientNo int)
As
BEGIN
SET NOCOUNT ON

declare @debug int = 0

------Sections---------
--1. Validations
--5. Deliverables
--5.1. Country
--5.2. Source
--5.3. Service
--5.4. DataType
--5.5. Duration
--5.5. Frequency
--5.6 FrequencyType
--5.7 Period
--5.8 DeliveryType
------Sections---------

BEGIN TRAN

BEGIN TRY
-------Variable Declarations---------
Declare @ClientId int, @RowsToProcess int, @CurrentRow int
-------Variable Declarations---------
-------Table Declarations---------
DECLARE @Report TABLE (RowID int not null primary key identity(1,1), clientNo int,rptNo int, bkt_sel varchar(100),cat_sel varchar(100),XREF_Client int,rptSelection varchar(500),report_name varchar(500), lvl_total char(8) )  
DECLARE @Deliverables TABLE (RowID int not null identity(1,1), ClientId int, CountryId int, ServiceId int, SourceId int, DataTypeId int, SubscriptionDurationFrom datetime, SubscriptionDurationTo datetime, ServiceTerritoryId int, 
ClientNo int, ReportNo int, DeliveryTypeId int, FrequencyId int, FrequencyTypeId int, PeriodId int, DeliverablesDurationFrom datetime, DeliverablesDurationTo datetime, ReportName varchar(100), ReportWriterId int, RestrictionId int, PRIMARY KEY (ClientNo, ReportNo, ReportWriterId) )
DECLARE @DeliverablesData TABLE ([Status] varchar(20), SubscriptionId int,	ReportWriterId int,	FrequencyTypeId int,	RestrictionId int,	PeriodId int,	Frequencyid int,	StartDate datetime,	EndDate datetime,	[probe] varchar(500),	PackException bit,	Census bit,	OneKey	bit,LastModified	datetime,ModifiedBy	int,DeliveryTypeId int, DeliverableId int)
DECLARE @SubscriptionData TABLE ([Status] varchar(20), Name VARCHAR(500),	ClientId int,	StartDate datetime,	EndDate datetime,	ServiceTerritoryId int,	Active bit,	LastModified datetime,	ModifiedBy int,	CountryId int,	ServiceId int,	DataTypeId int,	SourceId int, SubscriptionId int) 
-------Table Declarations---------

----------------------------------------1.VALIDATIONS---------------------------------
----------------------------------------1.VALIDATIONS---------------------------------


----------------------------------------5.SUBSCRIPTIONS and DELIVERABLES---------------------------------

---------Get Everest Client ID
SELECT @ClientId = ClientId FROM IRP.ClientMap WHERE IRPClientNo = @ClientNo

if (@ClientId is null) GOTO NoClient


---------5a.Get the reports / deliverables for the client
INSERT into @Report (clientNo,rptNo, bkt_sel, cat_sel, XREF_Client,rptSelection,report_name, lvl_total)
select  CLD.CLIENT_NO, CLD.RPT_NO, BKT_SEL, CAT_SEL, XREF_CLIENT,RPT_SELECTION, report_name,lvl_total from IRP.CLD 
	inner join IRP.RD on CLD.CLIENT_NO = RD.CLIENT_NO and CLD.RPT_NO = RD.RPT_NO
	where RD.RPT_SELECTION not in ('ID','IA','IB','IW') and len(rpt_selection) = 2 and @ClientNo = CLD.CLIENT_NO
	UNION
	select  CLD.CLIENT_NO, CLD.RPT_NO, BKT_SEL, CAT_SEL, XREF_CLIENT,SUBSTRING(RPT_SELECTION, 1, 2) RPT_SELECTION, report_name,lvl_total from IRP.CLD 
	inner join IRP.RD on CLD.CLIENT_NO = RD.CLIENT_NO and CLD.RPT_NO = RD.RPT_NO
	where RD.RPT_SELECTION not in ('ID','IA','IB','IW') and len(rpt_selection) = 4 and @ClientNo = CLD.CLIENT_NO
	UNION
	select  CLD.CLIENT_NO, CLD.RPT_NO, BKT_SEL, CAT_SEL, XREF_CLIENT,SUBSTRING(RPT_SELECTION, 3, 2) RPT_SELECTION, report_name,lvl_total from IRP.CLD 
	inner join IRP.RD on CLD.CLIENT_NO = RD.CLIENT_NO and CLD.RPT_NO = RD.RPT_NO
	where RD.RPT_SELECTION not in ('ID','IA','IB','IW') and len(rpt_selection) = 4 and @ClientNo = CLD.CLIENT_NO

--if (@Debug =1) BEGIN SELECT * FROM @Report END


---------5b. Loop through each deliverable

SET @RowsToProcess=@@ROWCOUNT
SET @CurrentRow=0
--if (@Debug =1) PRINT 'Loop through each deliverable, number of rows: '  + convert(varchar(10), @RowsToProcess)
WHILE @CurrentRow<@RowsToProcess
BEGIN
	SET @CurrentRow=@CurrentRow+1
	--if (@Debug =1) BEGIN PRINT 'loop ' + convert(varchar(10), @CurrentRow) END

	-- variables used for each deliverable --
	DECLARE @CountryId int, @ServiceId int, @SourceId int, @DataTypeId int, @SubscriptionDurationFrom datetime, @SubscriptionDurationTo datetime, @ServiceTerritoryId int, @ReportWriterCode VARCHAR(100), @ReportWriterId int
	DECLARE  @DeliveryTypeId int, @FrequencyId int, @FrequencyTypeId int, @PeriodId int, @DeliverablesDurationFrom datetime, @DeliverablesDurationTo datetime
	DECLARE @ReportNo int, @RptName varchar(500),@WriterId int, @ClientName varchar(500),@bkt_Sel varchar(100),@cat_Sel varchar(100), @Lvl_total char(8), @XREFClient int	
	-- variables used for each deliverable --
	
	SELECT  @ReportNo=rptNo,  @RptName=report_name, @bkt_Sel = BKT_SEL,@cat_Sel= cat_sel, @ReportWriterCode = LTRIM(RTRIM(rptSelection)), @XREFClient=XREF_Client, @Lvl_total = lvl_total
		FROM @Report WHERE RowID=@CurrentRow
DECLARE @data varchar(100)
set @data = null
	SELECT top 1 @data = [Data] from IRG_ExtractionType where ExtType = LTrim(RTrim(@ReportWriterCode))
	SELECT top 1 @ReportWriterId = ReportWriterId from ReportWriter where code = LTrim(RTrim(@ReportWriterCode))

--if (@debug = 1) BEGIN print isnull(@data, 'null') END

IF ((@data is null) OR (@data in ('Audit','Reference', 'Demographics')))
 GOTO SkipDeliverable
 
--------5.1. Country
SET @CountryId=1 --defaulted to AUS
--------5.2. Source
SET @SourceId=1 --defaulted to Sell In
--------5.5. Duration
SET @SubscriptionDurationFrom=DATEADD(yy, DATEDIFF(yy, 0, GETDATE()), 0) --defaulted to jan 1
SET @SubscriptionDurationTo=DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 1, -1) --defaulted to dec 31
     -- set deliverables duration same as subscription duration
SET @DeliverablesDurationFrom = @SubscriptionDurationFrom
SET @DeliverablesDurationTo = @SubscriptionDurationTo
---------5.7 FrequencyType and Frequency
set @FrequencyTypeId=1 -- default to monthly
set @FrequencyId = 1

--------5.3. Service
--if (@Debug =1) BEGIN 
--PRINT '5.3. Service'
--PRINT 'ReportWritercode' + @reportwritercode
--END

if (@ReportWriterCode in ('AD', 'C9', 'C6', 'C5' ))
BEGIN
Declare @PFCDifference int
set @PFCDifference = -1

				select @PFCDifference = Count(PFC) from (
select convert(varchar, p.PFC) PFC from irp.Dimension d
join irp.Client c on d.VersionTo = 32767 and c.VersionTo = 32767 and c.ClientID = d.ClientID
join irp.cld Cld on c.ClientNo = cld.XREF_CLIENT
join irp.rd rd on rd.CLIENT_NO = cld.CLIENT_NO and rd.RPT_NO = cld.RPT_NO and d.DimensionName = rd.REPORT_NAME
--items
join irp.Items i on i.DimensionID = d.DimensionID and i.VersionTo = 32767 and i.Item is not null 
join DIMProduct_Expanded p on i.item = convert(varchar, p.fcc)
where rd.RPT_NO = @ReportNo and rd.CLIENT_NO = @ClientNo
INTERSECT
(
select convert(varchar, p.PFC) PFC from irp.rd rd
join irp.Client c on c.VersionTo = 32767 and rd.CLIENT_NO = c.ClientNo 
join irp.cld Cld on c.ClientNo = cld.XREF_CLIENT and rd.RPT_NO = cld.RPT_NO
--mfr
join irp.clientmfr m on m.ClientNo =c.ClientNo
join DIMProduct_Expanded p on m.mfrno = p.Org_code
where rd.RPT_NO = @ReportNo and rd.CLIENT_NO = @ClientNo
union
select convert(varchar, ce.Pack) PFC from irp.rd rd
join irp.Client c on c.VersionTo = 32767 and rd.CLIENT_NO = c.ClientNo 
join irp.cld Cld on c.ClientNo = cld.XREF_CLIENT and rd.RPT_NO = cld.RPT_NO
--exceptions
join irp.CLIENTEXCEPTIONS ce on ce.ClientNo = c.ClientNo
where rd.RPT_NO = @ReportNo and rd.CLIENT_NO = @ClientNo
)
) packs


IF (@PFCDifference=0) set @ServiceId = 2 --'PROFITS'
ELSE
BEGIN
--probe or profits+probe
				set @PFCDifference = -1

				select @PFCDifference = Count(PFC) from (
select convert(varchar, p.PFC) PFC from irp.Dimension d
join irp.Client c on d.VersionTo = 32767 and c.VersionTo = 32767 and c.ClientID = d.ClientID
join irp.cld Cld on c.ClientNo = cld.XREF_CLIENT
join irp.rd rd on rd.CLIENT_NO = cld.CLIENT_NO and rd.RPT_NO = cld.RPT_NO and d.DimensionName = rd.REPORT_NAME
--items
join irp.Items i on i.DimensionID = d.DimensionID and i.VersionTo = 32767 and i.Item is not null 
join DIMProduct_Expanded p on i.item = convert(varchar, p.fcc)
where rd.RPT_NO = @ReportNo and rd.CLIENT_NO = @ClientNo
EXCEPT
(
select convert(varchar, p.PFC) PFC from irp.rd rd
join irp.Client c on c.VersionTo = 32767 and rd.CLIENT_NO = c.ClientNo 
join irp.cld Cld on c.ClientNo = cld.XREF_CLIENT and rd.RPT_NO = cld.RPT_NO
--mfr
join irp.clientmfr m on m.ClientNo =c.ClientNo
join DIMProduct_Expanded p on m.mfrno = p.Org_code
where rd.RPT_NO = @ReportNo and rd.CLIENT_NO = @ClientNo
union
select convert(varchar, ce.Pack) PFC from irp.rd rd
join irp.Client c on c.VersionTo = 32767 and rd.CLIENT_NO = c.ClientNo 
join irp.cld Cld on c.ClientNo = cld.XREF_CLIENT and rd.RPT_NO = cld.RPT_NO
--exceptions
join irp.CLIENTEXCEPTIONS ce on ce.ClientNo = c.ClientNo
where rd.RPT_NO = @ReportNo and rd.CLIENT_NO = @ClientNo
)
) packs

				if (@PFCDifference > 0) 
					SET @ServiceId = 7 --'PROFITS+PROBE'
				ELSE 
					set @ServiceId = 1 --'PROBE'

END --@PFCDifference = 0 ELSE
END --@reportwritercode in ('AD', 'C9', 'C6', 'C5' )
ELSE
BEGIN
	--IF (@debug=1) BEGIN print 'look up irgextracttype ' END
 
	Declare @service varchar(100)
	SET @service = null
	Select @service = [service] from IRG_ExtractionType where @ReportWriterCode = ExtType
	If (@service = 'PROFITS/PROBE') SET @service = 'PROFITS + PROBE'
	BEGIN Select @ServiceId = ServiceId from [Service] where Name = @service END
	
END

--if (@debug = 1) BEGIN print 'Reportwritercode ''' + @ReportWriterCode + ''' ,Service: ' +  isnull(@service, 'null') END


--------5.4. DataType
--if (@Debug =1) PRINT '5.4. DataType'
Declare @DataType varchar(100)
set @DataType =null
if exists (select * from IRG_CAT_SEL where Cat = @cat_Sel and DataType = 'Retail')
begin
	set @DataType = 'Retail'
end

if exists (select * from IRG_CAT_SEL where Cat = @cat_Sel and DataType = 'Hospital')
begin
	if (len(@DataType) >0) BEGIN  SET @DataType = CONCAT (@DataType, ' + ', 'Hospital' ) END
	ELSE BEGIN set @DataType = 'Hospital' END
				
end

if exists (select * from IRG_CAT_SEL where Cat = @cat_Sel and DataType = 'Other')
begin
	if (len(@DataType) >0) BEGIN  SET @DataType = CONCAT (@DataType, ' + ', 'Other Outlet' ) END
	ELSE BEGIN set @DataType = 'Other Outlet' END
end

SELECT @DataTypeId = DataTypeId from DataType where Name = @DataType

--------5.5. ServiceTerritory
	IF @ServiceId = 1 SET @ServiceTerritoryId = 2 --Outlet level for PROBE
	ELSE if @ServiceId = 2 SET @ServiceTerritoryId = 1 --Brick level for PROFITS
	ELSE if @ServiceId = 7 SET @ServiceTerritoryId = 3 --Both level for PROFITS + PROBE
	ELSE SET @ServiceTerritoryId = 4 --set as N/A

----------5.6 Period
Declare @period varchar(100)
SET @period = null
if @bkt_Sel = 'F1M1'  or @bkt_Sel = 'H1M1' or @bkt_Sel = 'OA1Y'
set @Period = '1 Year'
else if @bkt_Sel = 'FLT1'  or @bkt_Sel = 'FLT2' or @bkt_Sel = 'H2M1' or @bkt_Sel = 'H2W1' or @bkt_Sel = 'OA2Y' or @bkt_Sel = 'RXF2' or @bkt_Sel = 'T1RA' or @bkt_Sel = 'T5UN'
set @Period = '2 Years'
else if @bkt_Sel = 'F3M1'  or @bkt_Sel = 'F3M2' or @bkt_Sel = 'F3M3' or @bkt_Sel = 'H3M1'
set @Period = '3 Years'
else if @bkt_Sel = 'F5M1'  or @bkt_Sel = 'F5M2' or @bkt_Sel = 'F5M3' or @bkt_Sel = 'H5M1' or @bkt_Sel = 'H5M3'
set @Period = '5 Years'
SELECT @PeriodId = PeriodId from Period where Name = @Period

--------5.8 DeliveryType
--if (@Debug =1) PRINT '5.8 DeliveryType'
Declare @DeliveryType varchar(100)
SET @DeliveryType = null
Select @DeliveryType = [Deliverable] from IRG_ExtractionType where @ReportWriterCode = ExtType
If (@DeliveryType = 'CBG') SET @DeliveryType = 'CBG Dashboard'
Select @DeliveryTypeId = DeliveryTypeId from [DeliveryType] where Name = @DeliveryType
--------5.8 DeliveryType

--------5.9 Restriction
Declare @RestrictionId int
SET @RestrictionId = null
if @Lvl_Total is null 
	set @RestrictionId = null
else
	set @RestrictionId = cast(@Lvl_total as int)
--------5.9 Restriction

INSERT INTO @Deliverables Values
	(@ClientId, @CountryId, @ServiceId, @SourceId, @DataTypeId, @SubscriptionDurationFrom, @SubscriptionDurationTo, @ServiceTerritoryId,
@ClientNo, @ReportNo, @DeliveryTypeId, @FrequencyId, @FrequencyTypeId, @PeriodId, @DeliverablesDurationFrom, @DeliverablesDurationTo, @RptName, @ReportWriterId, @RestrictionId)


IF (@datatypeid is null OR @serviceid is null OR @periodid is null or @frequencyid is null or @frequencytypeid is null or @reportwriterid is null or @deliverytypeid is null)
BEGIN
PRINT 'One of the computed parameters is null, aborting import.'
RAISERROR ('One of the computed parameters is null, aborting import.', -- Message text.  
				21, -- Severity.  
				1 -- State.  
				);  
END





--if (@Debug =1) PRINT 'Insert or Update Subscirption & Deliverables'
Declare @NewSubscriptionName varchar(200)
SElect @NewSubscriptionName  = C.Name from Country c where c.countryid = @countryid
SElect @NewSubscriptionName  = @NewSubscriptionName+' '+Svc.Name from [SErvice] svc where svc.serviceid = @serviceid
SElect @NewSubscriptionName  = @NewSubscriptionName+' '+Dt.Name from DataTYpe dt where dt.DataTYpeid = @DataTYpeid
SElect @NewSubscriptionName  = @NewSubscriptionName+' '+src.Name from [Source] src where src.Sourceid = @Sourceid

IF EXISTS (Select * from DeliveryReport dr join Deliverables d on d.DeliverableId = dr.DeliverableId
join subscription s on s.SubscriptionId = d.SubscriptionId
where s.ClientId=@ClientId and ReportNo=@ReportNo and ReportwriterCode = @ReportWriterCode)
BEGIN

	Declare @ExistingDeliverableId int, @ExistingSubscriptionId int
	Select @ExistingDeliverableId = dr.DeliverableId from DeliveryReport dr join Deliverables d on d.DeliverableId = dr.DeliverableId
join subscription s on s.SubscriptionId = d.SubscriptionId
where s.ClientId=@ClientId and ReportNo=@ReportNo and ReportwriterCode = @ReportWriterCode
	Select @ExistingSubscriptionId  = SubscriptionId from Deliverables where DeliverableId = @ExistingDeliverableId

	UPDATE Deliverables 
	SET DeliveryTypeId=DeliveryTypeId, FrequencyId=@FrequencyId, FrequencyTypeId=@FrequencyTypeId, PeriodId=@PeriodId, ReportWriterId= @ReportWriterId, RestrictionId=@RestrictionId
	WHERE DeliverableId = @ExistingDeliverableId
	
	UPDATE Subscription 
	SET ServiceId=@ServiceId, SourceId=@SourceId, DataTypeId=@DataTypeId, CountryId=@CountryId, ServiceTerritoryId=@ServiceTerritoryId, Name = @NewSubscriptionName
	WHERE SubscriptionId = @ExistingSubscriptionId

	Delete from @DeliverablesData where DeliverableId = @ExistingDeliverableId
	Delete from @SubscriptionData where SubscriptionId = @ExistingSubscriptionId

	Insert into @DeliverablesData values ('UPDATED', @ExistingSubscriptionId,	@ReportWriterId,	@FrequencyTypeId,	@RestrictionId,	@PeriodId,	@Frequencyid,	@SubscriptionDurationFrom,	@DeliverablesDurationTo,	null,	null,	null,	null, GETDATE(), 1, @DeliveryTypeId, @ExistingDeliverableId)
	Insert into @SubscriptionData values ('UPDATED', @NewSubscriptionName,	@ClientId,	@DeliverablesDurationFrom,	@SubscriptionDurationTo,	@ServiceTerritoryId,	1,	Getdate(),	1,	@CountryId,	@ServiceId,	@DataTypeId,	@SourceId, @ExistingSubscriptionId) 

END
ELSE
BEGIN

	Declare @NewSubscriptionID int, @NewDeliverableID 	int
	IF EXISTS (SELECT * from Subscription where ClientId = @ClientId and CountryId = @CountryId and [Serviceid]=@serviceid and [SourceId]=@sourceId and DataTypeID = @DataTypeId)
	BEGIN
		SELECT @NewSubscriptionID = SubscriptionId from Subscription where ClientId = @ClientId and CountryId = @CountryId and [Serviceid]=@serviceid and [SourceId]=@sourceId and DataTypeID = @DataTypeId
	END
	ELSE
	BEGIN

		INSERT INTO Subscription (Name,	ClientId,	Country	,[Service]	,Data,	[Source],	StartDate,	EndDate,	ServiceTerritoryId,	Active,	LastModified,	ModifiedBy,	CountryId,	ServiceId,	DataTypeId,	SourceId) 
		values (@NewSubscriptionName, @clientid, null, null, null, null, @SubscriptionDurationFrom, @SubscriptionDurationTo, @ServiceTerritoryId, 1, GetDate(), 1, @CountryId,	@ServiceId,	@DataTypeId,	@SourceId)
		SELECT @NewSubscriptionID = scope_identity()

		Insert into @SubscriptionData values ('NEW', @NewSubscriptionName,	@ClientId,	@DeliverablesDurationFrom,	@SubscriptionDurationTo,	@ServiceTerritoryId,	1,	Getdate(),	1,	@CountryId,	@ServiceId,	@DataTypeId,	@SourceId, @NewSubscriptionID) 

	END

	IF EXISTS (SELECT * from Deliverables WHERE SubscriptionId = @NewSubscriptionID and @ReportWriterId=ReportWriterId and @FrequencyTypeId = FrequencyTypeId and @PeriodId =PeriodId and	@Frequencyid=Frequencyid and	@DeliveryTypeId=DeliveryTypeId)
	BEGIN
		SELECT @NewDeliverableID = DeliverableId from  Deliverables WHERE SubscriptionId = @NewSubscriptionID and @ReportWriterId=ReportWriterId and @FrequencyTypeId = FrequencyTypeId and @PeriodId =PeriodId and	@Frequencyid=Frequencyid and	@DeliveryTypeId=DeliveryTypeId
	END
	ELSE
	  INSERT INTO Deliverables (SubscriptionId,	ReportWriterId,	FrequencyTypeId,	RestrictionId,	PeriodId,	Frequencyid,	StartDate,	EndDate,	[probe],	PackException,	Census,	OneKey	,LastModified	,ModifiedBy	,DeliveryTypeId)
	  values (@NewSubscriptionID,	@ReportWriterId,	@FrequencyTypeId,	@RestrictionId,	@PeriodId,	@Frequencyid,	@DeliverablesDurationFrom,	@DeliverablesDurationTo,	null,	null,	null,	null,GetDate(),1,@DeliveryTypeId)
	  SELECT @NewDeliverableID = scope_identity()
	
	  Insert into @DeliverablesData values ('NEW', @NewSubscriptionID,	@ReportWriterId,	@FrequencyTypeId,	@RestrictionId,	@PeriodId,	@Frequencyid,	@SubscriptionDurationFrom,	@DeliverablesDurationTo,	null,	null,	null,	null, GETDATE(), 1, @DeliveryTypeId, @NewDeliverableID)
	  
	END --deliverable exists else insert


SkipDeliverable:
END --loop

--DELETE FROM @DeliverablesData where DeliverableId IS null --clean up unresolved entries to deliveryreport due to unresolved identity of deliverableid
NoClient:

COMMIT
END TRY
BEGIN CATCH
--rollback on error
    ROLLBACK
	PRINT ERROR_MESSAGE();
	GOTO GotError
END CATCH;

--IF (@debug =1) BEGIN select * from @Deliverables END

--------------------------------- update deliveryreport table -----------------------
BEGIN TRY
select @RowsToProcess=count(*) from @Deliverables
SET @CurrentRow=0
WHILE @CurrentRow<@RowsToProcess
BEGIN
	SET @CurrentRow=@CurrentRow+1

Declare @deliverableIdforReport int
set @deliverableIdforReport = null

select @clientid = d.clientid, @RptName = d.ReportName,
@CountryId = d.CountryId, @serviceid =d.[Serviceid], @sourceid=d.[SourceId], @DataTypeID =d.DataTypeID
, @ReportWriterId=d.ReportWriterId , @FrequencyTypeId = d.FrequencyTypeId , @PeriodId =d.PeriodId , @Frequencyid=d.Frequencyid , @DeliveryTypeId=d.DeliveryTypeId,
@ReportNo = d.ReportNo, @RptName = d.ReportName, @ReportWriterCode = w.code
from @deliverables d 
join ReportWriter w on w.ReportWriterId = d.ReportWriterId
where d.rowid = @currentrow


SELECT  @deliverableIdforReport = d.deliverableid from deliverables d 
join Subscription s on s.SubscriptionId = d.SubscriptionId 
where s.ClientId = @ClientId and s.CountryId = @CountryId and s.[Serviceid]=@serviceid and s.[SourceId]=@sourceId and s.DataTypeID = @DataTypeId
and @ReportWriterId=d.ReportWriterId and @FrequencyTypeId = d.FrequencyTypeId and @PeriodId =d.PeriodId and	@Frequencyid=d.Frequencyid and	@DeliveryTypeId=d.DeliveryTypeId

--PRINT 'SELECT  d.deliverableid from deliverables d join Subscription s on s.SubscriptionId = d.SubscriptionId' + 
--' where s.ClientId = '+convert(varchar(10),@ClientId)+' and s.CountryId = '+convert(varchar(10),@CountryId)+' and s.[Serviceid]='+convert(varchar(10),@serviceid)+'   and s.[SourceId]='+convert(varchar(10),@sourceId)+'  and s.DataTypeID = '+convert(varchar(10),@DataTypeId) + '
--and '+convert(varchar(10),@ReportWriterId)+'=d.ReportWriterId and '+convert(varchar(10),@FrequencyTypeId) +'  = d.FrequencyTypeId and '+convert(varchar(10),@PeriodId) +'  =d.PeriodId and	'+convert(varchar(10),@Frequencyid) +' =d.Frequencyid and	'+convert(varchar(10),@DeliveryTypeId) +' =d.DeliveryTypeId'


	IF @deliverableIdforReport is not null
	BEGIN

		--print 		'select * from  deliveryreport r join deliverables d on 
		--d.DeliverableId = r.DeliverableId
		--join Subscription s on s.SubscriptionId = d.SubscriptionId and s.ClientId = '+convert(varchar(10), @ClientId)+
		--'where r.reportno='+convert(varchar(10), @ReportNo)+' and  r.ReportWriterCode = '+convert(varchar(10), @ReportWriterCode)

		if not exists( select * from  deliveryreport r join deliverables d on 
		d.DeliverableId = r.DeliverableId
		join Subscription s on s.SubscriptionId = d.SubscriptionId and s.ClientId = @ClientId
		where r.reportno=@ReportNo and  r.ReportWriterCode = @ReportWriterCode)
		BEGIN
		--print 'added into delivery report - deliverableid:'+ convert(varchar(20),@deliverableIdforReport)  +' reportno:'+ convert(varchar(20),@reportno) +'  ReportWriterCode :'+ @ReportWriterCode +' reportname:'+ @RptName
		INSERT INTO DeliveryReport(deliverableid, reportno,  ReportWriterCode, reportname) values (@deliverableIdforReport, @ReportNo, @ReportWriterCode, @RptName)
		END
	END
	ELSE PRINT 'Unable to find match deliverable for reportno:' + convert(varchar(20),@reportno) + ' reportwriter:' + @reportwritercode

END
END TRY
BEGIN CATCH
--rollback on error    
	PRINT 'Error in insert to delivery report'
	PRINT ERROR_MESSAGE();
END CATCH;

GotError:

--IF (@debug=1)  
--BEGIN
--SELECT cn.Name Country, svc.Name [Service], src.Name [Source],  dty.Name DataType, dt.Name DeliveryType, rw.code ReportWriter, fr.Name Frequency, ft.Name FrequencyType, pr.Name Period, ST.TerritoryBase TerritoryBase, d.* FROM @Deliverables d INNER JOIN
--dbo.Country AS cn ON cn.CountryId = d.CountryId INNER JOIN
--dbo.DataType AS dty ON dty.DataTypeId = d.DataTypeId INNER JOIN
--dbo.Service AS svc ON svc.ServiceId = d.ServiceId INNER JOIN
--dbo.ServiceTerritory AS st ON st.ServiceTerritoryId = d.ServiceTerritoryId INNER JOIN
--dbo.Source AS src ON src.SourceId = d.SourceId INNER JOIN
--dbo.ReportWriter AS rw ON rw.ReportWriterId = d.ReportWriterId INNER JOIN
--dbo.Frequency AS fr ON fr.FrequencyId = d.Frequencyid INNER JOIN
--dbo.FrequencyType AS ft ON ft.FrequencyTypeId = d.FrequencyTypeId INNER JOIN
--dbo.Period AS pr ON pr.PeriodId = d.PeriodId INNER JOIN
--dbo.DeliveryType AS dt ON dt.DeliveryTypeId = d.DeliveryTypeId
--END -- @debug=1


SELECT dt.Name DeliveryType, rw.code ReportWriter, fr.Name Frequency, ft.Name FrequencyType, pr.Name Period,  d.* FROM @DeliverablesData d INNER JOIN
dbo.ReportWriter AS rw ON rw.ReportWriterId = d.ReportWriterId INNER JOIN
dbo.Frequency AS fr ON fr.FrequencyId = d.Frequencyid INNER JOIN
dbo.FrequencyType AS ft ON ft.FrequencyTypeId = d.FrequencyTypeId INNER JOIN
dbo.Period AS pr ON pr.PeriodId = d.PeriodId INNER JOIN
dbo.DeliveryType AS dt ON dt.DeliveryTypeId = d.DeliveryTypeId
join Deliverables de on d.DeliverableId = de.DeliverableId
join Subscription s on s.SubscriptionId = d.SubscriptionId and s.ClientId = @ClientId

SELECT cn.Name Country, svc.Name [Service], src.Name [Source], ST.TerritoryBase TerritoryBase, dty.Name DataType, s.* from @SubscriptionData s INNER JOIN
dbo.Country AS cn ON cn.CountryId = s.CountryId INNER JOIN
dbo.DataType AS dty ON dty.DataTypeId = s.DataTypeId INNER JOIN
dbo.Service AS svc ON svc.ServiceId = s.ServiceId INNER JOIN
dbo.ServiceTerritory AS st ON st.ServiceTerritoryId = s.ServiceTerritoryId INNER JOIN
dbo.Source AS src ON src.SourceId = s.SourceId


SET NOCOUNT OFF
END



-------------------------- earlier implementation for reference---------------

--if LTrim(RTrim(@service))='Nielsen feed' or LTrim(RTrim(@service))='Pharma Trend' 
--		begin
--			select @ReportWriterId = null, @FrequencyId = null,@PeriodId =null
			
--			if LTrim(RTrim(@service))='Pharma Trend' 
--			begin
--				select top 1 @PeriodId = Periodid from Period where Number=3
--			end
--			if LTrim(RTrim(@service))='Nielsen feed' 
--			begin
--				select top 1 @PeriodId = Periodid from Period where Number=160
--			end
--			if @PeriodId is null or @PeriodId = 0
--			begin
--				select top 1 @PeriodId = Periodid from Period where Number=3
--			end
--			insert into ServiceConfiguration values(@serviceId,'period',@PeriodId)
--			insert into ServiceConfiguration values(@serviceId,'frequency',0)
--		end

-------------------------- earlier implementation---------------
GO
PRINT N'Creating [dbo].[IRPImportDeliverablesIAM_TEST]...';


GO
--EXEC IRPImportDeliverablesIAM 481
CREATE procedure [dbo].[IRPImportDeliverablesIAM_TEST]
( @ClientNo int)
As
BEGIN
	--Declare @ClientNo int
	--set @ClientNo=138
	DECLARE @RowsToProcess  int,@RP int
	DECLARE @CurrentRow     int,@CR int

	DECLARE @RptNo  int,@ClientId  int,@ClientName varchar(500),@bkt_Sel varchar(100),@cat_Sel varchar(100),@RptId int,@RptName varchar(500)
	DECLARE @Value int,@writerParamId int,@WriterId int
	DECLARE @FreqType int,@FreqId int, @Period varchar(50), @Service varchar(100),@DataType varchar(100), @Source varchar(100),@DeliveryType varchar(100),@ReportWriterCode varchar(50)

	--DECLARE @Deliverables TABLE (RowID int not null primary key identity(1,1), clientid int,ClientName varchar(100), 
	--FreqType int,Frequency int, Period varchar(100), [Service] varchar(100),DataType varchar(100), Source varchar(100),ReportWriter varchar(50),country varchar(10),deliveryType varchar(100)
	-- )  

	 DECLARE @Deliverables TABLE (RowID int not null primary key identity(1,1), clientid int,ClientName varchar(100), 
	FreqType int,Frequency int, Period varchar(100), [Service] varchar(100),DataType varchar(100), Source varchar(100),ReportWriter varchar(50),country varchar(10),deliveryType varchar(100),reportId varchar(100),writerParameterID varchar(100)
	 )
	set @DeliveryType='IAM'

	DECLARE @table1 TABLE (RowID int not null primary key identity(1,1), clientno int, ReportID int,ReportNo int, ReportName varchar(500),WriterID int  ) 
	--Get Client Id
	 --Select @ClientId = ClientID, @ClientName = ClientName from IRP.Client where ClientNo=@ClientNo and VersionTo=32767
	 --Select @ClientId = irpClientId, @ClientName = Name from dbo.Clients where irpClientNo=@ClientNo 
	 
Select  @ClientId =irpclientid, @ClientName =Name from dbo.Clients where id in (
select clientID from irp.ClientMap where IRPClientNo = @ClientNo )
	 Print @ClientId
	 Print @ClientName
	INSERT into @table1 (clientno,ReportID,ReportNo,ReportName,WriterID) 
	SELECT  ClientID,ReportID,ReportNo,ReportName,WriterID FROM IRP.Report where ClientID = @ClientId and VersionTo=32767 and ReportNo <> 0 


	SET @RowsToProcess=@@ROWCOUNT

	SET @CurrentRow=0
	WHILE @CurrentRow<@RowsToProcess
	BEGIN
		SET @CurrentRow=@CurrentRow+1
		SELECT @RptId=ReportID, @RptName = ReportName,@WriterId= writerid FROM @table1 WHERE RowID=@CurrentRow
			
			--Report writer
			select @ReportWriterCode = WriterCode from IRP.Writer where writerid=@WriterId
			--print @WriterId + @ReportWriterCode
			-- frequency
			set @Value=0
			select @Value=Value, @writerParamId = WriterParameterID from IRP.ReportParameter where reportid = @RptId  and VersionTo=32767 and Code='Delivery'
			set @FreqType = 0
			set @FreqId =0
			if @Value = 0 
				begin
				set @FreqType = 1
				set @FreqId =1
				end
			else if @Value= 1 or @Value= 2 or @Value= 3
				begin 
				set @FreqType = 2  
				if @Value= 1 set @FreqId =4
				if @Value= 2 set @FreqId =3
				if @Value= 3 set @FreqId =2
				end
			else if @Value= 22 or @Value= 23 or @Value= 24 or  @Value= 25
				begin
				set @FreqType = 3
				if @Value= 22 set @FreqId =8
				if @Value= 23 set @FreqId =7
				if @Value= 24 set @FreqId =6
				if @Value= 25 set @FreqId =5
				end
			else if @Value= 4 or @Value= 5 or @Value= 6 or @Value= 7 or @Value= 8 or @Value= 9
				begin
				set @FreqType = 4
				if @Value= 4 set @FreqId =14
				if @Value= 5 set @FreqId =13
				if @Value= 6 set @FreqId =12
				if @Value= 7 set @FreqId =11
				if @Value= 8 set @FreqId =10
				if @Value= 9 set @FreqId =9
				end
			else if @Value= 10 or @Value= 11 or @Value= 12 or @Value= 13 or @Value= 14 or @Value= 15 or @Value= 16 or @Value= 17 or @Value= 18 or @Value= 19 or @Value= 20 or @Value= 21
				begin
				set @FreqType = 5
				if @Value= 10 set @FreqId =26
				if @Value= 11 set @FreqId =25
				if @Value= 12 set @FreqId =24
				if @Value= 13 set @FreqId =23
				if @Value= 14 set @FreqId =22
				if @Value= 15 set @FreqId =21
				if @Value= 16 set @FreqId =20
				if @Value= 17 set @FreqId =19
				if @Value= 18 set @FreqId =18
				if @Value= 19 set @FreqId =17
				if @Value= 20 set @FreqId =16
				if @Value= 21 set @FreqId =15
				end
			else 
				begin
				set @FreqType = 6
				set @FreqId =27
				end
			-- Source
			Set @source ='Sell In'
			----
			--set @Value=0
			--select @Value=Value, @writerParamId = WriterParameterID from dbo.ReportParameter where reportid = @RptId  and VersionTo=32767 and Code='ProbePack'
			--select @Service= DimensionName from dbo.Dimension where dimensiontype= 2 and DimensionID = @Value
			-- Service
			set @Value=0
			select @Service=Name from IRP.ReportParameter where reportid = @RptId  and VersionTo=32767 and Code='ProbePack'
			--select @Service= DimensionName from dbo.Dimension where dimensiontype= 2 and DimensionID = @Value
			if @Service = 'NO PROBE'
				set @Service = 'Profit'
			else if @Service = 'PROBE Packs Manufacturer' or @Service ='PROBE Packs Exceptions'
				set @Service = 'PROBE'
			--else
			--	set @Service = 'Probe'
			--
			set @Value=0
			select @Value=Value, @writerParamId = WriterParameterID from IRP.ReportParameter where reportid = @RptId  and VersionTo=32767 and Code='DimChannel'
			select @DataType= DimensionName from IRP.Dimension where dimensiontype= 4 and DimensionID = @Value
			set @DataType =  LEFT(@DataType, CHARINDEX('Channel', @DataType) - 1)
			set @DataType =  replace(@DataType,'Combined',' Retail + Hospital')
			
			--Period
			set @Value=0
			select @Value=Value, @writerParamId = WriterParameterID from IRP.ReportParameter where reportid = @RptId  and VersionTo=32767 and Code='DimPeri'
			DECLARE @string varchar(100),@start int,@end int,@len int
			select @string = DimensionName from IRP.Dimension where dimensiontype= 3 and DimensionID = @Value
			
			set @string = replace(@string, ' ' , '')
			set @len = len(@string)
			set @start = PATINDEX('%[0-9]%',@string)
			set @end = PATINDEX('%[^0-9]%',substring(@string, @start, @len))-1
			print substring(@string, @start, @end)
			if left(SUBSTRING(@string,PATINDEX('%[0-9]%',@string)+2,5),5) = 'month'
			begin 
				SET @Period = cast(cast(substring(@string, @start, @end) as int)/12 as varchar) + ' Years'
			end
			else
			begin
				select @Period= substring(@string, @start, @end) + ' ' + SUBSTRING(@string,PATINDEX('%[0-9]%',@string)+2,5)
			end
			
			
		
		--insert into @Deliverables(clientid,ClientName,FreqType,Frequency, Period, [Service],DataType,Source,ReportWriter,country,deliveryType )
			--values (@ClientId,@ClientName, @FreqType,@FreqId,@Period,@Service,@DataType,@Source,@ReportWriterCode,'AUS',@DeliveryType)

			insert into @Deliverables(clientid,ClientName,FreqType,Frequency, Period, [Service],DataType,Source,ReportWriter,country,deliveryType,reportId,writerParameterID )
			values (@ClientId,@ClientName, @FreqType,@FreqId,@Period,@Service,@DataType,@Source,@ReportWriterCode,'AUS',@DeliveryType,@RptId,@writerParamId)
		

	END	

	--insert into dbo.IRG_Deliverables_IAM
	select * from @Deliverables

	select * from IRG_Deliverables_IAM
-- Insert records into subscription & deliverables from IRG_Deliverables_IAM table
	
	
	--execute dbo.IRPProcessDeliverablesIAM
	
	--delete from dbo.IRG_Deliverables_IAM where Clientid=@ClientId

	
END

--EXEC [IRPImportDeliverablesIAM_TEST] 44
GO
PRINT N'Creating [dbo].[IRPImportMarketDefinitionMultipleMBAndPack_prev]...';


GO

CREATE PROCEDURE [dbo].[IRPImportMarketDefinitionMultipleMBAndPack_prev] 
	-- Add the parameters for the stored procedure here
	@pDimensionId int 
AS
BEGIN
	SET NOCOUNT ON;

	--## STEP 1: INSERT INTO MarketDefinitions
	--
	insert into MarketDefinitions (Name, Description, ClientId, GUIID, DimensionId)
	--select replace(replace(replace(DimensionName,'/',' '), '&', ' '),',',' '), NULL, C.ClientId, NULL, DimensionId
	select DimensionName, NULL, C.ClientId, NULL, DimensionId
	from IRP.Dimension I join IRP.ClientMap C on I.ClientID = C.IRPClientId
	where DimensionID = @pDimensionId and VersionTo > 0

	--select * from MarketDefinitions

	--## STEP 2: INSERT INTO MarketDefinitionBaseMaps
	declare @marketDefinitionId int
	select @marketDefinitionId = Id from MarketDefinitions where DimensionId = @pDimensionId

	insert into MarketDefinitionBaseMaps (Name, MarketBaseId, DataRefreshType, MarketDefinitionId)
	select M.Name +' ' + M.Suffix, D.MarketBaseId, 'static', @marketDefinitionId
	from IRP.DimensionBaseMap D join MarketBases M on D.MarketBaseId = M.Id
	where DimensionId = @pDimensionId

	--select * from MarketDefinitionBaseMaps

	--## STEP 3: INSERT INTO MarketDefinitionPacks
	declare @marketBaseId int
	declare @marketBaseName nvarchar(200)
	declare @whereClause nvarchar(max)
	declare @unionClause nvarchar(max)
	declare @insertStatement nvarchar(max) 
	set @insertStatement = N'insert into MarketDefinitionPacks (Pack, MarketBase, MarketBaseId, PFC, Manufacturer, ATC4, NEC4, DataRefreshType, MarketDefinitionId, Alignment, Product, Molecule)'

	select * into #loopTable from IRP.DimensionBaseMap where DimensionId = @pDimensionId 

	declare @pMarketBaseId int
	set @unionClause = ''

	while exists(select * from #loopTable)
	begin
		-------PROCESSING OF QUERY CONSTRUCTION USING UNION FOR MULTIPLE MARKET BASES-------
		select @pMarketBaseId = (select top 1 marketBaseId from #loopTable order by marketBaseId asc)			
		select @marketBaseName = Name + ' ' + Suffix from MarketBases M where Id = @pMarketBaseId

		select @whereClause = ' where ' + 
		case when c.FilterValue = 'Molecule' then c.ColumnName + ' like ' + '(' + left([Values], 1) + '%' + substring([Values], 2, len([Values]) -2) + '%' + right([Values], 1) +')'
		else c.ColumnName + ' in ' + '(' + [Values] +')'  end 
		from basefilters b join [dbo].[CONFIG_ECP_MKT_DEF_FILTERS] c on b.Criteria = c.FilterValue
		where MarketBaseId = @pMarketBaseId
		print(@whereClause)

		set @unionClause = @unionClause	+ ' select Pack_Description, '''+ @marketBaseName +''', ' + cast(@pMarketBaseId as varchar) + ', PFC, ORG_LONG_NAME, ATC4_Code, NEC4_Code, ''static'', ' + cast(@marketDefinitionId as varchar) + ', ''static-left'' 
		, ProductName as Product, M.Description as Molecule from DimProduct_Expanded left join DMMoleculeConcat M on M.FCC = DimProduct_Expanded.FCC' + @whereClause + ' UNION '

		print('Union Clause')
		print(@unionClause)
		--EXEC(@insertStatement+@whereClause)

		delete #loopTable
		where MarketBaseId = @pMarketBaseId
	end


	drop table #loopTable
	declare @finalQuery varchar(max)
	set @finalQuery = left(@insertStatement+@unionClause, len(@insertStatement+@unionClause) - 6)
	print('Final Query: ' + @finalQuery)
	
	EXEC(@finalQuery)
	
	--select * from MarketDefinitionPacks

	--grouping information entry
	--declare @maxLevel int
	--select distinct @maxLevel=max(levelno) from irp.items where dimensionid=@pDimensionId
	--and shortname is not null or shortname<>'' and (number is not null or number<>'') and versionto=32767 
	---

	select  DISTINCT
	CASE WHEN TRY_CONVERT(int, p.item) IS not NULL   
    THEN p.item
    ELSE null  
    END AS FCC
	,p.Name,
	case Charindex(';', g.shortname)
	when 0 then null
	when 1 then null
	else Substring(g.shortname, 1,Charindex(';', g.shortname)-1)
	end as groupname,
	case Charindex(';', g.shortname)
	when 0 then null
	when LEN(g.shortname) then null
	else Substring(g.shortname, Charindex(';', g.shortname)+8, LEN(g.shortname))
	end as factor,
	g.number [groupno]
	into #fcctemp
	from irp.items g
	join irp.items p
	on g.itemid = p.parent
	where g.dimensionid = @pDimensionId
	and p.itemtype = 1
	and p.versionto > 0
	and g.versionto > 0

	update m set Alignment = 'dynamic-right',m.groupname=f.groupname,m.factor=f.factor,m.groupnumber=f.groupno
	from MarketDefinitionPacks m join dimproduct_expanded d on m.pfc=d.pfc join #fcctemp f on d.fcc=f.fcc
	where m.PFC in (select distinct PFC from dimproduct_expanded where FCC in (select distinct FCC from #fcctemp))
	and marketdefinitionid = @marketDefinitionId

---update groupname null in marketdefinitionpacks

	update marketdefinitionpacks set groupnumber = '' where groupnumber is null
	update marketdefinitionpacks set groupname = '' where groupname is null
	update marketdefinitionpacks set factor = '' where factor is null

END


--[dbo].[IRPImportMarketDefinitionMultipleMBAndPack] 2150

--select * from [dbo].[CONFIG_ECP_MKT_DEF_FILTERS] 

--update [CONFIG_ECP_MKT_DEF_FILTERS] set ColumnName = '[M].[Description]' where FilterValue = 'Molecule'
GO
PRINT N'Creating [dbo].[IRPImportMarketDefinitionMultipleMBAndPack_TEMP]...';


GO

CREATE PROCEDURE [dbo].[IRPImportMarketDefinitionMultipleMBAndPack_TEMP] 
	-- Add the parameters for the stored procedure here
	@pDimensionId int 
AS
BEGIN
	SET NOCOUNT ON;

	--## STEP 1: INSERT INTO MarketDefinitions
	--insert into MarketDefinitions (Name, Description, ClientId, GUIID, DimensionId)
	select replace(replace(replace(DimensionName,'/',' '), '&', ' '),',',' '), NULL, C.ClientId, NULL, DimensionId
	from IRP.Dimension I join IRP.ClientMap C on I.ClientID = C.IRPClientId
	where DimensionID = @pDimensionId and VersionTo > 0

	--select * from MarketDefinitions

	--## STEP 2: INSERT INTO MarketDefinitionBaseMaps
	declare @marketDefinitionId int
	select @marketDefinitionId = Id from MarketDefinitions where DimensionId = @pDimensionId

	--insert into MarketDefinitionBaseMaps (Name, MarketBaseId, DataRefreshType, MarketDefinitionId)
	select M.Name +' ' + M.Suffix, D.MarketBaseId, 'static', @marketDefinitionId
	from IRP.DimensionBaseMap D join MarketBases M on D.MarketBaseId = M.Id
	where DimensionId = @pDimensionId

	--select * from MarketDefinitionBaseMaps

	--## STEP 3: INSERT INTO MarketDefinitionPacks
	declare @marketBaseId int
	declare @marketBaseName nvarchar(200)
	declare @whereClause nvarchar(max)
	declare @unionClause nvarchar(max)
	declare @insertStatement nvarchar(max) 
	set @insertStatement = N'insert into MarketDefinitionPacks (Pack, MarketBase, MarketBaseId, PFC, Manufacturer, ATC4, NEC4, DataRefreshType, MarketDefinitionId, Alignment, Product, Molecule)'

	select * into #loopTable from IRP.DimensionBaseMap where DimensionId = @pDimensionId 

	declare @pMarketBaseId int
	set @unionClause = ''

	while exists(select * from #loopTable)
	begin
		-------PROCESSING OF QUERY CONSTRUCTION USING UNION FOR MULTIPLE MARKET BASES-------
		select @pMarketBaseId = (select top 1 marketBaseId from #loopTable order by marketBaseId asc)			
		select @marketBaseName = Name + ' ' + Suffix from MarketBases M where Id = @pMarketBaseId

		select @whereClause = ' where ' + c.ColumnName + ' in ' + '(' + [Values] +')'  
		from basefilters b join [dbo].[CONFIG_ECP_MKT_DEF_FILTERS] c on b.Criteria = c.FilterValue
		where MarketBaseId = @pMarketBaseId
		print(@whereClause)

		set @unionClause = @unionClause	+ ' select Pack_Description, '''+ @marketBaseName +''', ' + cast(@pMarketBaseId as varchar) + ', PFC, ORG_LONG_NAME, ATC4_Code, NEC4_Code, ''static'', ' + cast(@marketDefinitionId as varchar) + ', ''static-left'' 
		, ProductName as Product, M.Description as Molecule from DimProduct_Expanded left join DMMoleculeConcat M on M.FCC = DimProduct_Expanded.FCC' + @whereClause + ' UNION '

		print('Union Clause')
		print(@unionClause)
		--EXEC(@insertStatement+@whereClause)

		delete #loopTable
		where MarketBaseId = @pMarketBaseId
	end


	drop table #loopTable
	declare @finalQuery varchar(max)
	set @finalQuery = left(@insertStatement+@unionClause, len(@insertStatement+@unionClause) - 6)
	print('FINAL QUERY: ' + @finalQuery)
	
	--EXEC(@finalQuery)
	
	--select * from MarketDefinitionPacks

	--select  DISTINCT
	--CASE WHEN TRY_CONVERT(int, p.item) IS not NULL   
 --   THEN p.item
 --   ELSE null  
 --   END AS FCC
	--,p.Name,
	--case Charindex(';', g.shortname)
	--when 0 then null
	--when 1 then null
	--else Substring(g.shortname, 1,Charindex(';', g.shortname)-1)
	--end as groupname,
	--case Charindex(';', g.shortname)
	--when 0 then null
	--when LEN(g.shortname) then null
	--else Substring(g.shortname, Charindex(';', g.shortname)+8, LEN(g.shortname))
	--end as factor,
	--g.number [groupno]
	--into #fcctemp
	--from irp.items g
	--join irp.items p
	--on g.itemid = p.parent
	--where g.dimensionid = @pDimensionId
	--and p.itemtype = 1
	--and p.versionto > 0
	--and g.versionto > 0

	--update m set Alignment = 'dynamic-right'
	--from MarketDefinitionPacks m where m.PFC in (select distinct PFC from dimproduct_expanded where FCC in (select distinct FCC from #fcctemp))
	--and marketdefinitionid = @marketDefinitionId
END


--[dbo].[IRPImportMarketDefinitionMultipleMBAndPack] 2150


--exec [dbo].[IRPImportMarketDefinitionMultipleMBAndPack_TEMP] 1686
GO
PRINT N'Creating [dbo].[IRPProcessDeliverablesIAM_TEMP]...';


GO

CREATE procedure [dbo].[IRPProcessDeliverablesIAM_TEMP]
As
BEGIN
	declare @Client varchar(100),@service varchar(100),@country varchar(100),@Datatype varchar(100),@source varchar(100),@DeliveryType varchar(100),
	@ReportWriterCode varchar(100),@ReportWriter varchar(100),@FrequencyType varchar(100),@Frequency varchar(500),@DeliverTo varchar(100), @Years varchar(100)

	declare @ClientId int,@countryId int,@serviceId int, @sourceId int,@datatypeId int,@ReportWriterId int, @FrequencyTypeId int, @FrequencyId int,@PeriodId int,@DeliveryTypeId int,
	@deliverToId int
	declare @subscriptionId int,@deliverablesId int
	declare @TerritoryBase varchar(50),@TerritoryBaseId int
	declare @cnt int
	declare @ReportId int
	-----------------declare temp-----------------
	declare @SubscriptionTemp TABLE(SubscriptionId int not null primary key identity(1,1),name varchar(100),clientId varchar(100),StartDate datetime,EndDate datetime ,active varchar(100),LastModified varchar(100), modifiedby varchar(100), CountryId varchar(100),serviceId varchar(100),SourceId varchar(100),DataTypeId varchar(100),ServiceTerritoryId varchar(100))
	declare @DeliverablesTemp table(DeliverableId int not null primary key identity(1,1),SubscriptionId varchar(100),ReportWriterId varchar(100),FrequencyTypeId varchar(100),FrequencyId varchar(100),Periodid varchar(100),StartDate datetime,EndDate datetime,LastModified varchar(100),ModifiedBy varchar(100),DeliveryTypeId varchar(100))

	------------------------------------------
	set nocount on

	DECLARE subCursor CURSOR FOR
	Select ClientName,[Service],Country,DataType,Source,DeliveryType,ReportWriter,FreqType,Frequency,Period,ReportId from dbo.IRG_Deliverables_IAM
	
	--SELECT  Client,[Service],Country,[DATA type], Source,[Delivery Type],[Report writer],[Report writer name],[frequency type],frequency,
	--[deliver to],[# years]  FROM  dbo.[z_Delivery Details] 


	OPEN subCursor  
	FETCH NEXT FROM subCursor INTO @client,@service,@country,@datatype,@source,@DeliveryType,@ReportWriterCode,@FrequencyType,
	@Frequency,@Years,@ReportId
	set @cnt =1
	WHILE @@Fetch_Status = 0 

	BEGIN

		--select @client,@service,@country,@datatype,@source,@DeliveryType,@ReportWriterCode,@ReportWriter,@FrequencyType,@Frequency,@DeliverTo,@Years
		select  @clientId = 0,@countryId = 0,@serviceId = 0, @sourceId = 0, @datatypeId = 0
		--select top 1 @clientId = id from clients where Name = LTrim(RTrim(@client)) 
		if @Client = 'GlaxoSmithKline Consumer Healthcare'
		set @Client ='GSK Consumer'
		select top 1 @clientId = id from clients where Name = LTrim(RTrim(@client)) -- checking only first 3 characters
		select top 1 @countryId = CountryId from Country where Name = LTrim(RTrim(@country))
		select top 1 @serviceId = ServiceId from service where Name = LTrim(RTrim(@service))
		select top 1 @sourceId = sourceId from [dbo].[Source] where Name = LTrim(RTrim(@source))
		select top 1 @datatypeId = DataTypeId from Datatype where Name = LTrim(RTrim(@datatype)) 
		set @subscriptionId=0

		select @subscriptionId = SubscriptionId from @SubscriptionTemp where ClientId = @Clientid and CountryId = @countryId and ServiceId = @serviceId and SourceId = @sourceId and DataTypeId = @datatypeId
		
		--select @subscriptionId as subscriptionid,@Clientid client,@countryId country,@serviceId [service],@sourceId source,@datatypeId datatype

		if (@subscriptionId is null or @subscriptionId  < 1)
		begin
		
			if LTrim(RTrim(@service))='probe'  or LTrim(RTrim(@service)) = 'PROFITS + PROBE'
			set @TerritoryBase='both'
			else if LTrim(RTrim(@service))='profits' or LTrim(RTrim(@service))='profit' 
			set @TerritoryBase='brick'
			else if LTrim(RTrim(@service))='Audit' or LTrim(RTrim(@service))='IMS Reference' or LTrim(RTrim(@service))='Nielsen feed' or LTrim(RTrim(@service))='Pharma Trend' 
			set @TerritoryBase='NA'
			
						
			select @TerritoryBaseId=ServiceTerritoryid from ServiceTerritory where TerritoryBase=@TerritoryBase
		
		-- insert into subscription table
		   insert into @SubscriptionTemp (name,clientId,StartDate,EndDate,active,LastModified,modifiedby, CountryId,serviceId,SourceId,DataTypeId,ServiceTerritoryId)
		   values (@country +' '+@service + ' ' + @source+ ' ' + @datatype ,@clientId,
		   DATEADD(yy, DATEDIFF(yy, 0, GETDATE()), 0),DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 1, -1),
		   1,CAST(GETDATE() AS DATE),1,
		   @countryId,@serviceId,@sourceId,@datatypeId,@TerritoryBaseId)
		   SELECT @subscriptionId = SCOPE_IDENTITY()
		   Print 'subscription inserted- id=' + cast(@subscriptionId as varchar)
		end
		select @ReportWriterId=0, @FrequencyTypeId= 0, @FrequencyId = 0,@PeriodId =0
		select top 1 @ReportWriterId = ReportWriterId from ReportWriter where code = LTrim(RTrim(@ReportWriterCode))
		--select top 1 @FrequencyTypeId = FrequencyTypeId from FrequencyType where Name = LTrim(RTrim(@FrequencyType))
		--select top 1 @FrequencyId = FrequencyId from Frequency where Name = LTrim(RTrim(@Frequency))
		 Set @FrequencyTypeId = @FrequencyType
		 Set @FrequencyId = @Frequency
		 --select  @Years
		if ISNUMERIC(left(SUBSTRING(@Years, CHARINDEX(' ', @Years)+1,LEN(@Years)),1))=1
		begin
		--select 'num', SUBSTRING(@Years, CHARINDEX(' ', @Years)+2,4), LEFT(@Years, charindex(' ', @Years) - 1)
		if SUBSTRING(@Years, CHARINDEX(' ', @Years)+2,4) = 'Week'
			begin
			 if LEFT(@Years, charindex(' ', @Years) - 1)  = '104'
			 set @Years = '2 Years'
			 else
			 set @Years = LEFT(@Years, charindex(' ', @Years) - 1) + 'Weeks'
			 end
		--else if SUBSTRING(@Years, CHARINDEX(' ', @Years)+2,4) = 'Year'
		--	set @Years = LEFT(@Years, charindex(' ', @Years) - 1) + 'Years'
		end
		
		select top 1 @PeriodId = Periodid from Period where Name = @Years
		select @DeliveryTypeId = DeliveryTypeId from DeliveryType where Name=LTrim(RTrim(@DeliveryType))
	    --select @DeliveryType,@DeliveryTypeId
		if LTrim(RTrim(@service))='Nielsen feed' or LTrim(RTrim(@service))='Pharma Trend' 
		begin
			select @ReportWriterId = null, @FrequencyId = null,@PeriodId =null
			
			if LTrim(RTrim(@service))='Pharma Trend' 
			begin
				select top 1 @PeriodId = Periodid from Period where Number=3
			end
			if LTrim(RTrim(@service))='Nielsen feed' 
			begin
				select top 1 @PeriodId = Periodid from Period where Number=160
			end
			if @PeriodId is null or @PeriodId = 0
			begin
				select top 1 @PeriodId = Periodid from Period where Number=3
			end

			--insert into ServiceConfiguration values(@serviceId,'period',@PeriodId)
			--insert into ServiceConfiguration values(@serviceId,'frequency',0)
		end
		--select @ReportWriterId,@FrequencyTypeId,@FrequencyId,@PeriodId,@DeliveryTypeId
		  -- insert into  deliverables
		  if @SubscriptionId is not null
		  begin
		   if not exists (select * from @DeliverablesTemp where SubscriptionId = @SubscriptionId and ReportWriterId = @ReportWriterId and FrequencyTypeId = @FrequencyTypeId
		   and FrequencyId = case when @FrequencyId = 0 then null else @FrequencyId end and Periodid = @PeriodId and DeliveryTypeId = @DeliveryTypeId)
		   begin
			   insert into @DeliverablesTemp (SubscriptionId,ReportWriterId,FrequencyTypeId,FrequencyId,Periodid,StartDate,EndDate,LastModified,ModifiedBy,DeliveryTypeId)
			   values (@SubscriptionId,@ReportWriterId,@FrequencyTypeId,case when @FrequencyId = 0 then null else @FrequencyId end,@PeriodId,DATEADD(yy, DATEDIFF(yy, 0, GETDATE()), 0),
			   DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 1, -1),CAST(GETDATE() AS DATE),1,@DeliveryTypeId)
			   SELECT @deliverablesId = SCOPE_IDENTITY()
			   --select 'deliverables id=' + cast(@deliverablesId as varchar)
			   Print 'Deliverables inserted- id=' + cast(@deliverablesId as varchar)
			   --select top 1 @deliverToId = id from clients where left(Name,3) = Left(LTrim(RTrim(@DeliverTo)),3)
			   --select top 1 @deliverToId = id from clients where Name =  LTrim(RTrim(@client))
		       
			   
			   --insert into DeliveryClient (DeliverableId, ClientId) values(@deliverablesId,@ClientId)

			   ----INSERT INTO DeliveryReport
			   --select distinct DeliverableId, ReportId into #tDeliveryReport from DeliveryReport
			   
			   MERGE [dbo].DeliveryReport AS TARGET
				USING (select @deliverablesId DeliverableId, @ReportId ReportId) AS SOURCE
				ON (TARGET.deliverableid=SOURCE.deliverableid AND TARGET.ReportId=SOURCE.ReportId)

				WHEN NOT MATCHED BY TARGET THEN
				insert(deliverableid, ReportId)
				values(SOURCE.deliverableid, SOURCE.ReportId)
				;
			   --insert into DeliveryReport (DeliverableId, ReportId) values(@deliverablesId,@ReportId)

		   end
		Print 'Row =' + cast(@cnt as varchar)
		end
		set @cnt =@cnt +1
		FETCH NEXT FROM subCursor INTO @client,@service,@country,@datatype,@source,@DeliveryType,@ReportWriterCode,@FrequencyType,@Frequency,@Years,@ReportId
	    

	End 

	Close subCursor
	Deallocate subCursor

	--exec [dbo].[IRPProcessDeliverablesIAM_TEMP]
	Select * from @SubscriptionTemp
	--Select * from @DeliverablesTemp
	Select * from DeliveryReport
	--select * from  dbo.IRG_Deliverables_IAM

END

--select * from subscription where clientid = 43
--select * from deliverables where subscriptionid in (select subscriptionid from subscription where clientid = 43)
--truncate table DeliveryReport
GO
PRINT N'Creating [dbo].[ProcessMarketBaseQueue]...';


GO
CREATE PROCEDURE ProcessMarketBaseQueue
as
begin
	declare @pMarketBaseid int
	select MarketBaseId into #loopTableMB from MarketBaseQueue
	
	while exists(select * from #loopTableMB)
	begin
		select @pMarketBaseid = (select top 1 MarketBaseId
							from #loopTableMB
							order by MarketBaseId asc)

		print('Mkt base id : ')
		print(@pMarketBaseid)
		-------CALL SP TO PROCESS EACH MARKET DEFINITION-------
		EXEC [dbo].[RevalidateMarketDefinition] @MarketBaseId = @pMarketBaseid

		delete #loopTableMB where MarketBaseId = @pMarketBaseid
	end

	drop table #loopTableMB	
end
GO
PRINT N'Creating [dbo].[PutInMarketBaseQueue]...';


GO

CREATE PROCEDURE [dbo].[PutInMarketBaseQueue]
	@MarketBaseId int
as
begin
	declare @mdCount int
	declare @mbCount int
	
	select @mdCount = count(id) from marketdefinitionbasemaps where marketbaseid = @MarketBaseId
	
	if @mdCount = 0
	begin
		select 'Market Base has been successfully saved' as Result
	end
	else
	begin
		select @mbCount = count(*) from MarketBaseQueue where marketbaseid = @MarketBaseId
		if @mbCount = 0 
		begin
			insert into MarketBaseQueue values (@MarketBaseId)
		end
		select 'MarketBase will be updated overnight' as Result
	end

end
GO
PRINT N'Creating [dbo].[RevalidateMarketDefinitionV2]...';


GO

-- =============================================  
CREATE PROCEDURE [dbo].[RevalidateMarketDefinitionV2]   
 -- Add the parameters for the stored procedure here  
 @MarketBaseId int   
AS  
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from  
 -- interfering with SELECT statements.  
 SET NOCOUNT ON;  
  
  
-- get Packs for MB  
CREATE TABLE #MarketBaseWithPack(MarketBaseId nvarchar(20),PFC nvarchar(20) ,FCC nvarchar(Max))  
CREATE TABLE #RemovePacks(MarketBaseId nvarchar(20),PFC nvarchar(20))  
CREATE TABLE #AddPacks(MarketBaseId nvarchar(20),PFC nvarchar(20))  
                                
INSERT #MarketBaseWithPack (MarketBaseId, PFC,FCC)  
   EXEC GetPacksFromMarketBase @MarketBaseId  
  
SELECT * FROM #MarketBaseWithPack  
  
---Update Market Base name in [MarketDefinitionPacks] table  
UPDATE [MarketDefinitionPacks]  
SET MarketBase = (SELECT DISTINCT NAME+' '+Suffix FROM [MarketBases] WHERE ID = @MarketBaseId)  
WHERE MarketBaseId= cast(@MarketBaseId as varchar)  
  
---Update Market Base name in [[MarketDefinitionBaseMaps]] table  
UPDATE [MarketDefinitionBaseMaps]  
SET [Name] = (SELECT DISTINCT NAME+' '+Suffix FROM [MarketBases] WHERE ID = @MarketBaseId)  
WHERE MarketBaseId= cast(@MarketBaseId as varchar) 
  
--Get MarketDef IDs for MBs  
SELECT DISTINCT [MarketDefinitionId],[MarketBaseId]  
INTO #MarketDefinitionDetails  
FROM [dbo].[MarketDefinitionPacks]  
WHERE [MarketBaseId] IN (SELECT MarketBaseId FROM #MarketBaseWithPack)  
  
SELECT * FROM #MarketDefinitionDetails  
  
----Remove Packs from Market Def  
DECLARE @Count int;  
DECLARE @MyCursor CURSOR;  
DECLARE @MyField int;  
BEGIN  
    SET @MyCursor = CURSOR FOR  
    SELECT DISTINCT [MarketDefinitionId] from #MarketDefinitionDetails  
          
  
    OPEN @MyCursor   
    FETCH NEXT FROM @MyCursor   
    INTO @MyField  
  
    WHILE @@FETCH_STATUS = 0  
    BEGIN  
 -------------Pack will be removed---------------  
      INSERT INTO #RemovePacks  
   SELECT * FROM   
   (SELECT DISTINCT MarketBaseId,PFC FROM [MarketDefinitionPacks]  
   WHERE [MarketDefinitionId]=@MyField AND [MarketBaseId]=@MarketBaseId  
      EXCEPT  
      SELECT DISTINCT MarketBaseId, PFC FROM #MarketBaseWithPack) A  
  
   ---removing packs from Market Def  
   SELECT 'PACKS REMOVED', * FROM #RemovePacks  
   DELETE FROM [MarketDefinitionPacks]  
   WHERE PFC IN (SELECT DISTINCT PFC FROM #RemovePacks)    
   AND [MarketDefinitionId]=@MyField AND MarketBaseId=@MarketBaseId  
  
   -------------Pack will be added---------------  
   INSERT INTO #AddPacks  
   SELECT * FROM   
   (SELECT DISTINCT MarketBaseId, PFC FROM #MarketBaseWithPack  
    EXCEPT  
    SELECT DISTINCT MarketBaseId,PFC FROM [MarketDefinitionPacks]  
    WHERE [MarketDefinitionId]=@MyField AND [MarketBaseId]=@MarketBaseId) A  
  
    ---add packs into Market Def  
    INSERT INTO [MarketDefinitionPacks]  
    SELECT DISTINCT Pack_Description AS Pack ,   
                    MDBM.[Name]  AS MarketBase,   
                       MDBM.[MarketBaseId]  AS MarketBaseId,  
                       '' AS GroupNumber,   
        '' AS GroupName,   
        '' AS Factor,   
        DIMProduct_Expanded.PFC AS PFC,    
           Org_Long_Name AS Manufacturer,   
        ATC4_Code AS ATC4,   
        NEC4_Code AS NEC4,  
           MDBM.[DataRefreshType]  AS DataRefreshType,   
        '' AS [StateStatus],  
        MDBM.[MarketDefinitionId] AS [MarketDefinitionId],  
        CASE   
       WHEN MDBM.[DataRefreshType] ='dynamic' THEN MDBM.[DataRefreshType]+'-right'  
       ELSE  MDBM.[DataRefreshType]+'-left'  
        END AS [Alignment],  
        ProductName AS Product,  
           'A' AS [ChangeFlag],
		DM.Description Molecule    
   FROM  DIMProduct_Expanded   
      JOIN DMMoleculeConcat DM   
      ON DIMProduct_Expanded.FCC = DM.FCC  
      JOIN #AddPacks  
      ON #AddPacks.PFC = DIMProduct_Expanded.PFC  
      JOIN [MarketDefinitionBaseMaps] MDBM  
      ON #AddPacks.MarketBaseId= CONVERT(nvarchar(Max), MDBM.[MarketBaseId])  
      WHERE MDBM.[MarketDefinitionId]=@MyField  
  
      FETCH NEXT FROM @MyCursor   
      INTO @MyField   
    END;   
  
    CLOSE @MyCursor ;  
    DEALLOCATE @MyCursor;  
END;  
  
--DROP TABLE #MarketBaseWithPack  
--DROP TABLE #RemovePacks  
--DROP TABLE #AddPacks  
  
END  

--exec RevalidateMarketDefinitionV2 552
  --Select * from #MarketBaseWithPack  
GO
PRINT N'Creating [dbo].[SaveMarketGroup]...';


GO
CREATE PROCEDURE [dbo].[SaveMarketGroup]

   @groupView dbo.typGroupView READONLY, 
   @isEdit int
AS
BEGIN
	if @isEdit = 1
	begin
		declare @marketDefId int
		select  distinct @marketDefId = MarketDefinitionId from @groupView
		delete from MarketGroupMappings where AttributeId in (select distinct AttributeId from @groupView)
		delete from MarketAttributes where MarketDefinitionId = @marketDefId 
		delete from MarketGroups where MarketDefinitionId = @marketDefId
			
	end

	insert into MarketAttributes(AttributeId,Name,OrderNo,MarketDefinitionId)
	select distinct attributeid, attributename name, orderno, marketdefinitionid
	from @groupView Where IsAttribute=1

	insert into MarketGroups(GroupId,Name,MarketDefinitionId)
	select distinct groupid, groupname name, marketdefinitionid
	from @groupView

	insert into MarketGroupMappings(ParentId,GroupId,IsAttribute, AttributeId)
	select parentid,groupid,isattribute,attributeid 
	from @groupView
	
END
GO
PRINT N'Creating [dbo].[SaveMarketGroupFilters]...';


GO

CREATE PROCEDURE [dbo].[SaveMarketGroupFilters] 
	@marketGroupFilter [dbo].[typMarketGroupFilter] READONLY,
	@isEdit int
AS
BEGIN
	if @isEdit = 1
	begin
		delete from dbo.MarketGroupFilters where MarketDefinitionId = (select distinct MarketDefinitionId from @marketGroupFilter)
	end
	
	insert into dbo.MarketGroupFilters(Name, Criteria, [Values], IsEnabled, GroupId,IsAttribute, AttributeId, MarketDefinitionId)
	select distinct Name, Criteria, [Values], IsEnabled, GroupId,IsAttribute, AttributeId, MarketDefinitionId
	from @marketGroupFilter

END
GO
PRINT N'Creating [dbo].[SaveMarketGroupPacks]...';


GO
CREATE PROCEDURE [dbo].[SaveMarketGroupPacks] 
	 @marketGroupPack dbo.typMarketGroupPack READONLY,
	 @isEdit int
AS
BEGIN
	if @isEdit = 1
	begin
		delete from dbo.MarketGroupPacks where MarketDefinitionId = (select distinct MarketDefinitionId from @marketGroupPack)
	end
	
	insert into dbo.MarketGroupPacks(GroupId, PFC, MarketDefinitionId)
	select distinct GroupId, PFC, MarketDefinitionId
	from @marketGroupPack

END
GO
PRINT N'Creating [dbo].[z_ChangeFieldLength]...';


GO

CREATE PROCEDURE [dbo].[z_ChangeFieldLength]
AS

alter table   [dbo].[MarketDefinitions]
  alter column Name nvarchar(500)
  
  alter table   [dbo].[MarketDefinitions]
  alter column [Description] nvarchar(800)
  
  alter table   [dbo].[MarketDefinitions]
  alter column [GuiId] nvarchar(80)
  ----------------------------
  alter table   dbo.MarketDefinitionPacks
  alter column Pack nvarchar(200)
  
  alter table   dbo.MarketDefinitionPacks
  alter column MarketBase nvarchar(200)
  
  alter table   dbo.MarketDefinitionPacks
  alter column MarketBaseId nvarchar(20)
  
  alter table   dbo.MarketDefinitionPacks
  alter column GroupNumber nvarchar(50)
  
  alter table   dbo.MarketDefinitionPacks
  alter column GroupName nvarchar(200)
  
  alter table   dbo.MarketDefinitionPacks
  alter column Factor nvarchar(20)
  
  alter table   dbo.MarketDefinitionPacks
  alter column PFC nvarchar(20)
  
  alter table   dbo.MarketDefinitionPacks
  alter column Manufacturer nvarchar(200)
  
  alter table   dbo.MarketDefinitionPacks
  alter column ATC4 nvarchar(10)
  
  alter table   dbo.MarketDefinitionPacks
  alter column NEC4 nvarchar(10)
  
  alter table   dbo.MarketDefinitionPacks
  alter column DataRefreshType nvarchar(20)
  
  alter table   dbo.MarketDefinitionPacks
  alter column StateStatus nvarchar(20)
  
  alter table   dbo.MarketDefinitionPacks
  alter column  Alignment nvarchar(20)
  
   alter table   dbo.MarketDefinitionPacks
  alter column Product  nvarchar(200)
  
   alter table   dbo.MarketDefinitionPacks
  alter column   Molecule nvarchar(3000)
  ----------------------------
  alter table   dbo.MarketDefinitionBaseMaps
  alter column Name  nvarchar(200)
  
   alter table   dbo.MarketDefinitionBaseMaps
  alter column  DataRefreshType  nvarchar(20)
  
  ----------------------------
  alter table   dbo.MarketBases
  alter column Name  nvarchar(200)
  
  alter table   dbo.MarketBases
  alter column  [Description]  nvarchar(200)
  
  alter table   dbo.MarketBases
  alter column  Suffix  nvarchar(30)
  
  alter table   dbo.MarketBases
  alter column  DurationTo  nvarchar(20)
  
  alter table   dbo.MarketBases
  alter column   DurationFrom nvarchar(20)
  
  alter table   dbo.MarketBases
  alter column  GuiId  nvarchar(80)
  
  alter table   dbo.MarketBases
  alter column  BaseType  nvarchar(50)
  
  ----------------------------
   alter table   dbo.BaseFilters
  alter column Name  nvarchar(100)
  
  alter table   dbo.BaseFilters
  alter column   Criteria nvarchar(100)
  
  alter table   dbo.BaseFilters
  alter column   [Values] nvarchar(800)
  ----------------------------
  alter table   dbo.AccessPrivilege
  alter column AccessPrivilegeName  nvarchar(50)
  
  alter table   dbo.[Action]
  alter column  ActionName  nvarchar(300)
  
  ----------------------------
  alter table   dbo.AdditionalFilters
  alter column Name  nvarchar(100)
  
  alter table   dbo.AdditionalFilters
  alter column   Criteria nvarchar(80)
  
  alter table   dbo.AdditionalFilters
  alter column  [Values]  nvarchar(200)
  
  ----------------------------
  alter table   dbo.CADPages
  alter column cadPageTitle  nvarchar(300)
  
  alter table   dbo.CADPages
  alter column  cadPageDescription  nvarchar(1000)
  
  alter table   dbo.CADPages
  alter column  cadPagePharmacyFileUrl  nvarchar(300)
  
  alter table   dbo.CADPages
  alter column  cadPageHospitalFileUrl  nvarchar(300)
  
  alter table   dbo.CADPages
  alter column  cadPageCreatedBy  nvarchar(50)
  
  alter table   dbo.CADPages
  alter column  cadPageModifiedBy  nvarchar(50)
  
  ----------------------------
  alter table   dbo.MonthlyDataSummaries
  alter column monthlyDataSummaryTitle  nvarchar(300)
  
  alter table   dbo.MonthlyDataSummaries
  alter column  monthlyDataSummaryDescription  nvarchar(1000)
  
  alter table   dbo.MonthlyDataSummaries
  alter column  monthlyDataSummaryFileUrl  nvarchar(300)
   
  alter table   dbo.MonthlyDataSummaries
  alter column  monthlyDataSummaryCreatedBy  nvarchar(50)
  
  alter table   dbo.MonthlyDataSummaries
  alter column  monthlyDataSummaryModifiedBy  nvarchar(50)
  
  ----------------------------
  alter table   dbo.MonthlyNewproducts
  alter column   monthlyNewProductTitle nvarchar(300)
  
  alter table   dbo.MonthlyNewproducts
  alter column   monthlyNewProductDescription nvarchar(1000)
  
  alter table   dbo.MonthlyNewproducts
  alter column  monthlyNewProductFileUrl  nvarchar(300)
   
  alter table   dbo.MonthlyNewproducts
  alter column   monthlyNewProductCreatedBy nvarchar(50)
  
  alter table   dbo.MonthlyNewproducts
  alter column  monthlyNewProductModifiedBy  nvarchar(50)
    
  ----------------------------
  alter table   dbo.NewsAlerts
  alter column  newsAlertTitle  nvarchar(300)
  
  alter table   dbo.NewsAlerts
  alter column   newsAlertDescription nvarchar(1000)
  
  alter table   dbo.NewsAlerts
  alter column   newsAlertImageUrl nvarchar(300)
   
  alter table   dbo.NewsAlerts
  alter column   newsAlertCreatedBy nvarchar(50)
  
  alter table   dbo.NewsAlerts
  alter column   newsAlertModifiedBy nvarchar(50)
    ----------------------------
  alter table   dbo.PopularLinks
  alter column  popularLinkTitle  nvarchar(300)
  
  alter table   dbo.PopularLinks
  alter column   popularLinkDescription nvarchar(1000)
    
  alter table   dbo.PopularLinks
  alter column  popularLinkCreatedBy  nvarchar(50)
  
  alter table   dbo.PopularLinks
  alter column  popularLinkModifiedBy  nvarchar(50)
    ----------------------------
  alter table   dbo.Clients
  alter column  [Name]  nvarchar(300)
  
  alter table  dbo.Country
  alter column  [Name]  nvarchar(80)
  
   alter table  dbo.Country
  alter column  ISOCode  nvarchar(30)
  
  alter table dbo.DataType 
  alter column  [Name] nvarchar(80)
  
  alter table  dbo.DeliveryType
  alter column  [Name] nvarchar(80)
  
  alter table  dbo.[File]
  alter column  [Name] nvarchar(80)
    
  alter table  dbo.[FileType]
  alter column  [Name] nvarchar(20)
  
  alter table  dbo.Frequency
  alter column  [Name] nvarchar(300)
  
  alter table  dbo.FrequencyType
  alter column  [Name] nvarchar(50)
  
  alter table  dbo.FrequencyType
  alter column DefaultYears  nvarchar(10)
  
  --------------------------------------
  alter table  dbo.Groups
  alter column Name  nvarchar(200)
  
  alter table  dbo.Groups
  alter column GroupNumber  nvarchar(20)
  
  alter table  dbo.Groups
  alter column  CustomGroupNumber nvarchar(20)
  
  alter table  dbo.Groups
  alter column  ParentGroupNumber nvarchar(20)
  
  alter table  dbo.Groups
  alter column CustomGroupNumberSpace  nvarchar(20)
  
  --------------------------------------
  alter table  dbo.Groups2
  alter column Name  nvarchar(200)
  
  alter table  dbo.Groups2
  alter column GroupNumber  nvarchar(20)
  
  alter table  dbo.Groups2
  alter column  CustomGroupNumber nvarchar(20)
  
   --------------------------------------
  alter table  dbo.Levels
  alter column Name  nvarchar(200)
  
  alter table  dbo.Levels
  alter column  LevelColor nvarchar(20)
  
  alter table  dbo.Levels
  alter column BackgroundColor  nvarchar(20)
  
   ----------------------------
  alter table   dbo.Listings
  alter column  listingTitle  nvarchar(300)
  
  alter table   dbo.Listings
  alter column   listingDescription nvarchar(1000)
  
  alter table   dbo.Listings
  alter column   listingPharmacyFileUrl nvarchar(300)
   
  alter table   dbo.Listings
  alter column   listingHospitalFileUrl nvarchar(50)
  
  alter table   dbo.Listings
  alter column  listingCreatedBy  nvarchar(50)
  
   alter table   dbo.Listings
  alter column   listingModifiedBy nvarchar(50)
  
  --------------------
  alter table   dbo.Restriction
  alter column Name   nvarchar(200)
  
  alter table   dbo.[Role]
  alter column   RoleName nvarchar(80)
  
   --------------------
  alter table   dbo.Section
  alter column SectionName   nvarchar(150)
  
   --------------------
  alter table   dbo.[Service]
  alter column  Name  nvarchar(150)
  
   alter table   dbo.ServiceTerritory
  alter column   TerritoryBase nvarchar(150)
  
   --------------------
  alter table dbo.[Source]
  alter column Name   nvarchar(60)
  --subscription
  alter table dbo.Subscription
  alter column Name   nvarchar(200)
  
  alter table dbo.Subscription
  alter column   Country nvarchar(80)
  
  alter table dbo.Subscription
  alter column  [Service]  nvarchar(60)
  
  alter table dbo.Subscription
  alter column  Data  nvarchar(80)
  
  alter table dbo.Subscription
  alter column [Source]   nvarchar(80)
GO
PRINT N'Altering [dbo].[IRPImportMarketDefinitionMultipleMBAndPack]...';


GO

ALTER PROCEDURE [dbo].[IRPImportMarketDefinitionMultipleMBAndPack] 
	-- Add the parameters for the stored procedure here
	@pDimensionId int 
AS
BEGIN
	SET NOCOUNT ON;

	declare @kount int

	--## STEP 1: INSERT INTO MarketDefinitions
	--CHECK FOR EXISTING MARKET DEFINITION
	select @kount = count(*) from MarketDefinitions where DimensionId = @pDimensionId
	if @kount  > 0
	begin
		-- Delete existing Market Definition if any
		exec [dbo].[IRPDeleteMarketDefinitionFromDimensionID] @pDimensionId
	end 

	select @kount = count(*) from MarketDefinitions where DimensionId = @pDimensionId
	if @kount = 0
	begin
		insert into MarketDefinitions (Name, Description, ClientId, GUIID, DimensionId)
		--select replace(replace(replace(DimensionName,'/',' '), '&', ' '),',',' '), NULL, C.ClientId, NULL, DimensionId
		select DimensionName, NULL, C.ClientId, NULL, DimensionId
		from IRP.Dimension I join IRP.ClientMap C on I.ClientID = C.IRPClientId
		where DimensionID = @pDimensionId and VersionTo > 0

	--select * from MarketDefinitions
	end


	--## STEP 2: INSERT INTO MarketDefinitionBaseMaps
	declare @marketDefinitionId int
	select @marketDefinitionId = Id from MarketDefinitions where DimensionId = @pDimensionId

	select * into #tMarketBases from 
	(
		select a.marketbaseid from IRP.DimensionBaseMap a join marketbases b on a.marketbaseid = b.id where DimensionId = @pDimensionId 
		except 
		select marketbaseid from MarketDefinitionBaseMaps where marketdefinitionid = @marketDefinitionId
	)A

	select @kount = count(*) from #tMarketBases
	if @kount > 0
	begin
		print 'market definition id '
		print @marketDefinitionId
		insert into MarketDefinitionBaseMaps (Name, MarketBaseId, DataRefreshType, MarketDefinitionId)
		select M.Name +' ' + M.Suffix, D.MarketBaseId, 'static', @marketDefinitionId
		from (
			select * from #tMarketBases
		) D join MarketBases M on D.MarketBaseId = M.Id


		--select * from MarketDefinitionBaseMaps

		--## STEP 3: INSERT INTO MarketDefinitionPacks
		declare @marketBaseId int
		declare @marketBaseName nvarchar(200)
		declare @whereClause nvarchar(max)
		declare @unionClause nvarchar(max)
		declare @insertStatement nvarchar(max) 
		set @insertStatement = N'insert into MarketDefinitionPacks (Pack, MarketBase, MarketBaseId, PFC, Manufacturer, ATC4, NEC4, DataRefreshType, MarketDefinitionId, Alignment, Product, Molecule)'

		select * into #loopTable from #tMarketBases 

		declare @pMarketBaseId int
		set @unionClause = ''

		while exists(select * from #loopTable)
		begin
			-------PROCESSING OF QUERY CONSTRUCTION USING UNION FOR MULTIPLE MARKET BASES-------
			select @pMarketBaseId = (select top 1 marketBaseId from #loopTable order by marketBaseId asc)			
			select @marketBaseName = Name + ' ' + Suffix from MarketBases M where Id = @pMarketBaseId

			select @whereClause = ' where ' + 
			case when c.FilterValue = 'Molecule' then c.ColumnName + ' like ' + '(' + left([Values], 1) + '%' + substring([Values], 2, len([Values]) -2) + '%' + right([Values], 1) +')'
			else c.ColumnName + ' in ' + '(' + [Values] +')'  end 
			from basefilters b join [dbo].[CONFIG_ECP_MKT_DEF_FILTERS] c on b.Criteria = c.FilterValue
			where MarketBaseId = @pMarketBaseId
			print(@whereClause)

			set @unionClause = @unionClause	+ ' select Pack_Description, '''+ @marketBaseName +''', ' + cast(@pMarketBaseId as varchar) + ', PFC, ORG_LONG_NAME, ATC4_Code, NEC4_Code, ''static'', ' + cast(@marketDefinitionId as varchar) + ', ''static-left'' 
			, ProductName as Product, M.Description as Molecule from DimProduct_Expanded left join DMMoleculeConcat M on M.FCC = DimProduct_Expanded.FCC' + @whereClause + ' UNION '

			print('Union Clause')
			print(@unionClause)
			--EXEC(@insertStatement+@whereClause)

			delete #loopTable
			where MarketBaseId = @pMarketBaseId
		end


		drop table #loopTable
		declare @finalQuery varchar(max)
		set @finalQuery = left(@insertStatement+@unionClause, len(@insertStatement+@unionClause) - 6)
		print('Final Query: ' + @finalQuery)
	
		if (right(@finalQuery,3) <> 'Mol')
		begin
			EXEC(@finalQuery)
		end
	
		--select * from MarketDefinitionPacks

		--grouping information entry
		--declare @maxLevel int
		--select distinct @maxLevel=max(levelno) from irp.items where dimensionid=@pDimensionId
		--and shortname is not null or shortname<>'' and (number is not null or number<>'') and versionto=32767 
		---

		select  DISTINCT
		CASE WHEN TRY_CONVERT(int, p.item) IS not NULL   
		THEN p.item
		ELSE null  
		END AS FCC
		,p.Name,
		case Charindex(';', g.shortname)
		when 0 then null
		when 1 then null
		else Substring(g.shortname, 1,Charindex(';', g.shortname)-1)
		end as groupname,
		case Charindex(';', g.shortname)
		when 0 then null
		when LEN(g.shortname) then null
		else Substring(g.shortname, Charindex(';', g.shortname)+8, LEN(g.shortname))
		end as factor,
		g.number [groupno]
		into #fcctemp
		from irp.items g
		join irp.items p
		on g.itemid = p.parent
		where g.dimensionid = @pDimensionId
		and p.itemtype = 1
		and p.versionto > 0
		and g.versionto > 0

		update m set Alignment = 'dynamic-right',m.groupname=f.groupname,m.factor=f.factor,m.groupnumber=f.groupno
		from MarketDefinitionPacks m join dimproduct_expanded d on m.pfc=d.pfc join #fcctemp f on d.fcc=f.fcc
		where m.PFC in (select distinct PFC from dimproduct_expanded where FCC in (select distinct FCC from #fcctemp))
		and marketdefinitionid = @marketDefinitionId

	---update groupname null in marketdefinitionpacks

		update marketdefinitionpacks set groupnumber = '' where groupnumber is null
		update marketdefinitionpacks set groupname = '' where groupname is null
		update marketdefinitionpacks set factor = '' where factor is null
	end
	exec  [dbo].[CombineMultipleMarketBasesForMarket] @marketDefinitionId

END



--[dbo].[IRPImportMarketDefinitionMultipleMBAndPack] 4703

--select * from [dbo].[CONFIG_ECP_MKT_DEF_FILTERS] 

--update [CONFIG_ECP_MKT_DEF_FILTERS] set ColumnName = '[M].[Description]' where FilterValue = 'Molecule'
GO
PRINT N'Altering [dbo].[IRPImportPackBaseMarketDefinition]...';


GO



ALTER PROCEDURE [dbo].[IRPImportPackBaseMarketDefinition] 
	-- Add the parameters for the stored procedure here
	@pDimensionId int 
AS
BEGIN
	SET NOCOUNT ON;
	declare @kount int
	--## STEP 1: INSERT INTO MarketDefinitions
	select @kount = count(*) from MarketDefinitions where DimensionId = @pDimensionId 
	if @kount  > 0
	begin
		-- Delete existing Market Definition if any
		exec [dbo].[IRPDeleteMarketDefinitionFromDimensionID] @pDimensionId
	end 

	select @kount = count(*) from MarketDefinitions where DimensionId = @pDimensionId
	if @kount = 0
	begin
		insert into MarketDefinitions (Name, Description, ClientId, GUIID, DimensionId)
		--select replace(replace(replace(DimensionName,'/',' '), '&', ' '),',',' '), NULL, C.ClientId, NULL, DimensionId
		select DimensionName, NULL, C.ClientId, NULL, DimensionId
		from IRP.Dimension I join IRP.ClientMap C on I.ClientID = C.IRPClientId
		where DimensionID = @pDimensionId and VersionTo > 0

	--select * from MarketDefinitions
	end

	--## STEP 2: INSERT INTO MarketDefinitionBaseMaps
	declare @marketDefinitionId int
	select @marketDefinitionId = Id from MarketDefinitions where DimensionId = @pDimensionId

	select * into #tMarketBases2 from 
	(
		select a.marketbaseid from IRP.DimensionBaseMap a join marketbases b on a.marketbaseid = b.id where DimensionId = @pDimensionId 
		except 
		select marketbaseid from MarketDefinitionBaseMaps where marketdefinitionid = @marketDefinitionId
	)A

	select @kount = count(*) from #tMarketBases2
	if @kount > 0
	begin
		insert into MarketDefinitionBaseMaps (Name, MarketBaseId, DataRefreshType, MarketDefinitionId)
		select M.Name + ' ' + M.Suffix , D.MarketBaseId, 'static', @marketDefinitionId
		from IRP.DimensionBaseMap D join MarketBases M on D.MarketBaseId = M.Id
		where DimensionId = @pDimensionId

		--select * from MarketDefinitionBaseMaps

		--## STEP 3: INSERT INTO MarketDefinitionPacks
		declare @marketBaseId int
		declare @marketBaseName nvarchar(200)

		declare @whereClause nvarchar(max)
		declare @unionClause nvarchar(max)
		declare @insertStatement nvarchar(max) 

		select top 1 @marketBaseId=M.Id, @marketBaseName=Name + ' ' + Suffix 
		from MarketBases M join IRP.DimensionBaseMap D on M.Id = D.MarketBaseId
		where D.DimensionId = @pDimensionId

		select  DISTINCT
		CASE WHEN TRY_CONVERT(int, p.item) IS not NULL   
		THEN p.item
		ELSE null  
		END AS FCC
		,p.Name,
		case Charindex(';', g.shortname)
		when 0 then null
		when 1 then null
		else Substring(g.shortname, 1,Charindex(';', g.shortname)-1)
		end as groupname,
		case Charindex(';', g.shortname)
		when 0 then null
		when LEN(g.shortname) then null
		else Substring(g.shortname, Charindex(';', g.shortname)+8, LEN(g.shortname))
		end as factor,
		g.number [groupno]
		into #fcctemp
		from irp.items g
		join irp.items p
		on g.itemid = p.parent
		where g.dimensionid = @pDimensionId
		and p.itemtype = 1
		and p.versionto > 0
		and g.versionto > 0
	
		insert into MarketDefinitionPacks (Pack, MarketBase, MarketBaseId, PFC, Manufacturer, ATC4, NEC4, DataRefreshType, MarketDefinitionId, Alignment, Product, GroupNumber, GroupName, Factor, Molecule)
		select distinct p.Pack_Description, @marketBaseName, cast(@marketBaseId as varchar), p.PFC, p.ORG_LONG_NAME, p.ATC4_Code, p.NEC4_Code, 'static', cast(@marketDefinitionId as varchar), 'dynamic-right', p.[ProductName], f.groupno, f.groupname, f.factor, M.Description
		from DimProduct_Expanded p
		join #fcctemp f	on f.fcc = p.fcc
		left join DMMoleculeConcat M on M.FCC = p.FCC

		--select count(*) from #fcctemp
		--select 'def id:' + cast(@marketDefinitionId as varchar)

	

		-------------FOR STATIC LEFT -----------------
		select distinct ATC4 into #ATC4 from MarketDefinitionPacks where Alignment like '%right%' and MarketDefinitionID=@marketDefinitionId
		print('#ATC4 :')

		set @insertStatement = N'insert into MarketDefinitionPacks (Pack, MarketBase, MarketBaseId, PFC, Manufacturer, ATC4, NEC4, DataRefreshType, MarketDefinitionId, Alignment, Product, Molecule)'

		select * into #loopTable from IRP.DimensionBaseMap where DimensionId = @pDimensionId 

		declare @pMarketBaseId int
		set @unionClause = ''

		while exists(select * from #loopTable)
		begin
			-------PROCESSING OF QUERY CONSTRUCTION USING UNION FOR MULTIPLE MARKET BASES-------
			select @pMarketBaseId = (select top 1 marketBaseId from #loopTable order by marketBaseId asc)			
			select @marketBaseName = Name + ' ' + Suffix from MarketBases M where Id = @pMarketBaseId
			
			IF EXISTS (select distinct Criteria from basefilters where MarketBaseId=@pMarketBaseId and criteria not like 'ATC%')
				BEGIN
					select @whereClause = ' where ATC4_code in (select * from #ATC4) AND  ' + c.ColumnName + ' in ' + '(' + [Values] +')'  
					from basefilters b join [dbo].[CONFIG_ECP_MKT_DEF_FILTERS] c on b.Criteria = c.FilterValue
					where MarketBaseId = @pMarketBaseId
					print('whereClause IF: ' + @whereClause)
				END
			ELSE
				BEGIN
					select @whereClause = ' where ' + c.ColumnName + ' in ' + '(' + [Values] +')'  
					from basefilters b join [dbo].[CONFIG_ECP_MKT_DEF_FILTERS] c on b.Criteria = c.FilterValue
					where MarketBaseId = @pMarketBaseId
					print('whereClause ELSE: ' + @whereClause)
				END 


			set @unionClause = @unionClause	+ ' select Pack_Description, '''+ @marketBaseName +''' MarketBase, ' + cast(@pMarketBaseId as varchar) + ' MarketBaseId, PFC, ORG_LONG_NAME, ATC4_Code, NEC4_Code, ''static''  DataRefreshType, ' + cast(@marketDefinitionId as varchar) + ' MarketDefinitionId, ''static-left'' Alignment 
			, ProductName as Product, M.Description as Molecule from DimProduct_Expanded left join DMMoleculeConcat M on M.FCC = DimProduct_Expanded.FCC' + @whereClause + ' UNION '

			print('Union Clause')
			print(@unionClause)
			--EXEC(@insertStatement+@whereClause)

			delete #loopTable
			where MarketBaseId = @pMarketBaseId
		end


		drop table #loopTable
		declare @finalQuery varchar(max)
		set @unionClause = left(@unionClause, len(@unionClause)-6) 
		set @finalQuery = @insertStatement + 'select * from (' + @unionClause + ')Z where Z.PFC not in (select distinct PFC from dbo.DIMPRODUCT_EXPANDED where FCC in (select distinct FCC from #fcctemp))'
		--set @finalQuery = left(@insertStatement+@finalQuery, len(@insertStatement+@finalQuery) - 4)
		print('Final Query: ' + @finalQuery)

	
		EXEC(@finalQuery)
	
		drop table #fcctemp

		update marketdefinitionpacks set groupnumber = '' where groupnumber is null
		update marketdefinitionpacks set groupname = '' where groupname is null
		update marketdefinitionpacks set factor = '' where factor is null
	end
	exec  [dbo].[CombineMultipleMarketBasesForMarket] @marketDefinitionId

END
GO
PRINT N'Altering [dbo].[IRPImportMarketDefinitionForClient]...';


GO

ALTER PROCEDURE [dbo].[IRPImportMarketDefinitionForClient] 
	-- Add the parameters for the stored procedure here
	@pClientId int,
	@pUser Nvarchar(100) = NULL 
AS
BEGIN
	SET NOCOUNT ON;
	
	declare @dimensionId int
	declare @kount int
	declare @baseid int

	declare @key nvarchar(100)
	--declare @KeyKount int
	select @key = newid()
	--print(@Key)
	
	select distinct a.dimensionid into #tMkt from irp.dimension a
	join IRP.dimensionbasemap b on a.dimensionid=b.dimensionid
	join (select MarketBaseId from ClientMarketBases where clientid = @pClientId) c on c.MarketBaseId = b.MarketBaseId
	join (select * from SubscriptionMarket where SubscriptionId in (select SubscriptionId from dbo.Subscription where clientid = @pClientId)) d on d.MarketBaseId = c.MarketBaseId
	where a.clientid in (select distinct irpclientid from irp.clientmap where clientid =@pClientId)
	--and b.dimensionid not in (select distinct dimensionid from MarketDefinitions)
	and versionto=32767 and a.dimensionname not like '%PROBE Packs Exceptions%' 

	while exists(select * from #tMkt)
	begin
		select @dimensionId = (select top 1 dimensionid from #tMkt order by dimensionId asc)
		
		-- CHECK IF non-pack based market definition
		select @baseid = baseid from irp.dimension where dimensionid = @dimensionId
		if(@baseid <> 4)
		begin
			print ('dimensionid: ')
			print (@dimensionId)
			exec [dbo].[IRPImportMarketDefinition] @dimensionId
				exec [dbo].[IRPImportLogStatus] 'M', @pClientId, @dimensionId, @key, @pUser
		end

		else 
		begin
			--CHECK IF multiple MB pack based market definiton  
			select @kount = kount from
			(
				select distinct A.dimensionid, kount from 
				(
					select distinct Dimensionid, 
					count(Dimensionid) as kount from IRP.dimensionbasemap group by dimensionid having dimensionid = @dimensionId
				)A
				join irp.dimension B on A.dimensionid = B.dimensionid
				where B.versionto > 0 and B.baseid = 4 
			)X

			if(@kount > 1)
			begin
				print ('dimensionid: ')
				print (@dimensionId)	
				exec [dbo].[IRPImportMarketDefinitionMultipleMBAndPack] @dimensionId
					exec [dbo].[IRPImportLogStatus] 'M', @pClientId, @dimensionId, @key, @pUser
			end

			--CHECK IF single MB pack based market definiton 
			if(@kount = 1)
			begin
				print ('dimensionid: ')
				print (@dimensionId)
				exec [dbo].[IRPImportPackBaseMarketDefinition] @dimensionId
					exec [dbo].[IRPImportLogStatus] 'M', @pClientId, @dimensionId, @key, @pUser
			end

		end

		delete #tMkt where dimensionid = @dimensionId

	end
	drop table #tMkt

	exec [dbo].[CombineMultipleMarketBasesForAll]


	--Update delivery Territory Table
	exec IRPImportDeliveryMarketAndTerritory

	--Show latest import result---
	select a.ClientId, c.name ClientName, a.DimensionId, m.DimensionName MarketDefinition, Status, TimeOfImport, UserName from dbo.IRPImportLog a 
	join clients c on c.id = a.clientid
	join irp.dimension m on m.dimensionid = a.dimensionid
	where [Key] = @key and DimType = 'M' and m.VersionTo > 0


END
--exec [IRPImportMarketDefinitionForClient] 59



-------------------------------------------------------------
GO
PRINT N'Altering [dbo].[IRPImportDeliverablesIAM]...';


GO
ALTER procedure [dbo].[IRPImportDeliverablesIAM]
( @ClientNo int)
As
BEGIN
--Declare @ClientNo int
	--set @ClientNo=138
	DECLARE @RowsToProcess  int,@RP int
	DECLARE @CurrentRow     int,@CR int

	DECLARE @RptNo  int,@ClientId  int,@ClientName varchar(500),@bkt_Sel varchar(100),@cat_Sel varchar(100),@RptId int,@RptName varchar(500)
	DECLARE @Value int,@writerParamId int,@WriterId int
	DECLARE @FreqType int,@FreqId int, @Period varchar(50), @Service varchar(100),@DataType varchar(100), @Source varchar(100),@DeliveryType varchar(100),@ReportWriterCode varchar(50)
	
	DECLARE @Deliverables TABLE (RowID int not null primary key identity(1,1), clientid int,ClientName varchar(100), 
	FreqType int,Frequency int, Period varchar(100), [Service] varchar(100),DataType varchar(100), Source varchar(100),ReportWriter varchar(50),country varchar(10),deliveryType varchar(100),reportId varchar(100)
	 )
	set @DeliveryType='IAM'

	DECLARE @table1 TABLE (RowID int not null primary key identity(1,1), clientno int, ReportID int,ReportNo int, ReportName varchar(500),WriterID int  ) 
	--Get Client Id
	 --Select @ClientId = ClientID, @ClientName = ClientName from IRP.Client where ClientNo=@ClientNo and VersionTo=32767
	 --Select @ClientId = irpClientId, @ClientName = Name from dbo.Clients where irpClientNo=@ClientNo 
	 
Select  @ClientId =irpclientid, @ClientName =Name from dbo.Clients where id in (
select clientID from irp.ClientMap where IRPClientNo = @ClientNo )
	 Print @ClientId
	 Print @ClientName
	INSERT into @table1 (clientno,ReportID,ReportNo,ReportName,WriterID) 
	SELECT  ClientID,ReportID,ReportNo,ReportName,WriterID FROM IRP.Report where ClientID = @ClientId and VersionTo=32767 and ReportNo <> 0 


	SET @RowsToProcess=@@ROWCOUNT

	SET @CurrentRow=0
	WHILE @CurrentRow<@RowsToProcess
	BEGIN
		SET @CurrentRow=@CurrentRow+1
		SELECT @RptId=ReportID, @RptName = ReportName,@WriterId= writerid FROM @table1 WHERE RowID=@CurrentRow
			
			--Report writer
			select @ReportWriterCode = WriterCode from IRP.Writer where writerid=@WriterId
			--print @WriterId + @ReportWriterCode
			-- frequency
			set @Value=-999
			select @Value=Value, @writerParamId = WriterParameterID from IRP.ReportParameter where reportid = @RptId  and VersionTo=32767 and Code='Delivery'
			set @FreqType = 0
			set @FreqId =0
			if @Value = 0 
				begin
				set @FreqType = 1
				set @FreqId =1
				end
			else if @Value= 1 or @Value= 2 or @Value= 3
				begin 
				set @FreqType = 2  
				if @Value= 1 set @FreqId =4
				if @Value= 2 set @FreqId =3
				if @Value= 3 set @FreqId =2
				end
			else if @Value= 22 or @Value= 23 or @Value= 24 or  @Value= 25
				begin
				set @FreqType = 3
				if @Value= 22 set @FreqId =8
				if @Value= 23 set @FreqId =7
				if @Value= 24 set @FreqId =6
				if @Value= 25 set @FreqId =5
				end
			else if @Value= 4 or @Value= 5 or @Value= 6 or @Value= 7 or @Value= 8 or @Value= 9
				begin
				set @FreqType = 4
				if @Value= 4 set @FreqId =14
				if @Value= 5 set @FreqId =13
				if @Value= 6 set @FreqId =12
				if @Value= 7 set @FreqId =11
				if @Value= 8 set @FreqId =10
				if @Value= 9 set @FreqId =9
				end
			else if @Value= 10 or @Value= 11 or @Value= 12 or @Value= 13 or @Value= 14 or @Value= 15 or @Value= 16 or @Value= 17 or @Value= 18 or @Value= 19 or @Value= 20 or @Value= 21
				begin
				set @FreqType = 5
				if @Value= 10 set @FreqId =26
				if @Value= 11 set @FreqId =25
				if @Value= 12 set @FreqId =24
				if @Value= 13 set @FreqId =23
				if @Value= 14 set @FreqId =22
				if @Value= 15 set @FreqId =21
				if @Value= 16 set @FreqId =20
				if @Value= 17 set @FreqId =19
				if @Value= 18 set @FreqId =18
				if @Value= 19 set @FreqId =17
				if @Value= 20 set @FreqId =16
				if @Value= 21 set @FreqId =15
				end
			else 
				begin
				set @FreqType = 6
				set @FreqId =27
				end
			-- Source
			Set @source ='Sell In'
			----
			--set @Value=0
			--select @Value=Value, @writerParamId = WriterParameterID from dbo.ReportParameter where reportid = @RptId  and VersionTo=32767 and Code='ProbePack'
			--select @Service= DimensionName from dbo.Dimension where dimensiontype= 2 and DimensionID = @Value
			-- Service
			set @Value=0
			select @Service=Name from IRP.ReportParameter where reportid = @RptId  and VersionTo=32767 and Code='ProbePack'
			--select @Service= DimensionName from dbo.Dimension where dimensiontype= 2 and DimensionID = @Value
			if @Service = 'NO PROBE'
				set @Service = 'Profits'
			else if @Service = 'PROBE Packs Manufacturer' or @Service ='PROBE Packs Exceptions' or @Service = 'PROBE Pack Manufacturer'
			BEGIN

				Declare @PFCDifference int
				set @PFCDifference = -1

				select @PFCDifference

				select @PFCDifference = Count(pfc) from (
				(select c.ClientName, rp.ReportID, p.PFC from irp.ReportParameter rp
				join irp.Report r on r.ReportID = rp.ReportID
				join irp.Client c on c.ClientID = r.ClientID
				join irp.Dimension d on d.DimensionID = rp.Value
				join irp.Items i on i.DimensionID = d.DimensionID
				join DIMProduct_Expanded p on i.Item = p.Org_Abbr
				where c.ClientID = @clientid and
				c.VersionTo = 32767 and r.VersionTo = 32767 and rp.VersionTo = 32767  and d.VersionTo = 32767 and i.VersionTo = 32767
				and (code = 'DimProd')
				and d.BaseID = 16
				and i.Item is not null
				UNION
				select c.ClientName, rp.ReportID, p.PFC from irp.ReportParameter rp
				join irp.Report r on r.ReportID = rp.ReportID
				join irp.Client c on c.ClientID = r.ClientID
				join irp.Dimension d on d.DimensionID = rp.Value
				join irp.Items i on i.DimensionID = d.DimensionID
				join DIMProduct_Expanded p on i.Item = p.ATC4_Code
				where c.ClientID = @clientid and
				c.VersionTo = 32767 and r.VersionTo = 32767 and rp.VersionTo = 32767  and d.VersionTo = 32767 and i.VersionTo = 32767
				and (code = 'DimProd')
				and d.BaseID = 5
				and i.Item is not null
				UNION
				select c.ClientName, rp.ReportID, p.PFC from irp.ReportParameter rp
				join irp.Report r on r.ReportID = rp.ReportID
				join irp.Client c on c.ClientID = r.ClientID
				join irp.Dimension d on d.DimensionID = rp.Value
				join irp.Items i on i.DimensionID = d.DimensionID
				join DIMProduct_Expanded p on i.Item = convert(varchar, p.fcc)
				where c.ClientID = @clientid and
				c.VersionTo = 32767 and r.VersionTo = 32767 and rp.VersionTo = 32767  and d.VersionTo = 32767 and i.VersionTo = 32767
				and (code = 'DimProd')
				and d.BaseID = 4
				and i.Item is not null
				)
				EXCEPT
				(
				--probe pack mfr
				select c.ClientName, rp.ReportID, p.PFC from irp.ReportParameter rp
				join irp.Report r on r.ReportID = rp.ReportID
				join irp.Client c on c.ClientID = r.ClientID
				join irp.Dimension d on d.DimensionID = rp.Value
				join irp.Items i on i.DimensionID = d.DimensionID
				join DIMProduct_Expanded p on i.Item = p.Org_Abbr
				where c.ClientID = @clientid and
				c.VersionTo = 32767 and r.VersionTo = 32767 and rp.VersionTo = 32767  and d.VersionTo = 32767 and i.VersionTo = 32767
				and (rp.code = 'ProbePack')
				and d.BaseID = 16
				and i.Item is not null
				UNION
				--probe pack exceptions
				select c.ClientName, rp.ReportID, p.PFC from irp.ReportParameter rp
				join irp.Report r on r.ReportID = rp.ReportID
				join irp.Client c on c.ClientID = r.ClientID
				join irp.Dimension d on d.DimensionID = rp.Value
				join irp.Items i on i.DimensionID = d.DimensionID
				join DIMProduct_Expanded p on i.Item = convert(varchar, p.fcc)
				where c.ClientID = @clientid and
				c.VersionTo = 32767 and r.VersionTo = 32767 and rp.VersionTo = 32767  and d.VersionTo = 32767 and i.VersionTo = 32767
				and (code = 'ProbePack')
				and d.BaseID = 4
				and i.Item is not null
				)) packs
				join irp.Report r on packs.ReportID = r.reportid
				group by r.ReportId, ClientName, r.ReportName
				order by ClientName

				select @pfcdifference
				
				if (@PFCDifference > 0) 
					SET @Service = 'PROFITS + PROBE'
				ELSE 
					set @Service = 'PROBE'

			END
			----else
			----	set @Service = 'Probe'
			----
			--set @Value=0
			--select @Value=Value, @writerParamId = WriterParameterID from IRP.ReportParameter where reportid = @RptId  and VersionTo=32767 and Code='DimChannel'
			--select @DataType= DimensionName from IRP.Dimension where dimensiontype= 4 and DimensionID = @Value
			--set @DataType =  LEFT(@DataType, CHARINDEX('Channel', @DataType) - 1)
			--set @DataType =  replace(@DataType,'Combined',' Retail + Hospital')

			if exists (select distinct(t.outletCategory) 
			from irp.ReportParameter r
			join irp.Items i on i.DimensionID = r.Value and i.item is not null and i.VersionTo = 32767
			join irp.OutletMaster o on o.entity_type = i.item
			join irp.outlettype t on t.outlettype = o.out_type and t.OutletCategory = 'R'
			where r.ReportID = @RptId and r.VersionTo = 32767 and r.Code = 'DimChannel')
			begin
				set @DataType = 'Retail'
			end

			if exists (select distinct(t.outletCategory) 
			from irp.ReportParameter r
			join irp.Items i on i.DimensionID = r.Value and i.item is not null and i.VersionTo = 32767
			join irp.OutletMaster o on o.entity_type = i.item
			join irp.outlettype t on t.outlettype = o.out_type and t.OutletCategory = 'H'
			where r.ReportID = @RptId and r.VersionTo = 32767 and r.Code = 'DimChannel')
			begin
				if (len(@DataType) >0) BEGIN  SET @DataType = CONCAT (@DataType, ' + ', 'Hospital' ) END
				ELSE BEGIN set @DataType = 'Hospital' END
				
			end

			if exists (select distinct(t.outletCategory) 
				from irp.ReportParameter r
			join irp.Items i on i.DimensionID = r.Value and i.item is not null and i.VersionTo = 32767
			join irp.OutletMaster o on o.entity_type = i.item
			join irp.outlettype t on t.outlettype = o.out_type and t.OutletCategory = 'O'
			where r.ReportID = @RptId and r.VersionTo = 32767 and r.Code = 'DimChannel')
			begin
				if (len(@DataType) >0) BEGIN  SET @DataType = CONCAT (@DataType, ' + ', 'Other' ) END
				ELSE BEGIN set @DataType = 'Other' END
			end
			
			--Period
			set @Value=0
			select @Value=Value, @writerParamId = WriterParameterID from IRP.ReportParameter where reportid = @RptId  and VersionTo=32767 and Code='DimPeri'
			DECLARE @string varchar(100),@start int,@end int,@len int
			select @string = DimensionName from IRP.Dimension where dimensiontype= 3 and DimensionID = @Value
			
			set @string = replace(@string, ' ' , '')
			set @len = len(@string)
			set @start = PATINDEX('%[0-9]%',@string)
			set @end = PATINDEX('%[^0-9]%',substring(@string, @start, @len))-1
			print substring(@string, @start, @end)
			if left(SUBSTRING(@string,PATINDEX('%[0-9]%',@string)+2,5),5) = 'month'
			begin 
				SET @Period = cast(cast(substring(@string, @start, @end) as int)/12 as varchar) + ' Years'
			end
			else
			begin
				select @Period= substring(@string, @start, @end) + ' ' + SUBSTRING(@string,PATINDEX('%[0-9]%',@string)+2,5)
			end
			
			
		
		--insert into @Deliverables(clientid,ClientName,FreqType,Frequency, Period, [Service],DataType,Source,ReportWriter,country,deliveryType )
			--values (@ClientId,@ClientName, @FreqType,@FreqId,@Period,@Service,@DataType,@Source,@ReportWriterCode,'AUS',@DeliveryType)

			insert into @Deliverables(clientid,ClientName,FreqType,Frequency, Period, [Service],DataType,Source,ReportWriter,country,deliveryType,reportId )
			values (@ClientId,@ClientName, @FreqType,@FreqId,@Period,@Service,@DataType,@Source,@ReportWriterCode,'AUS',@DeliveryType,@RptId)
		

	END	

	insert into dbo.IRG_Deliverables_IAM
	select * from @Deliverables

	select * from IRG_Deliverables_IAM
-- Insert records into subscription & deliverables from IRG_Deliverables_IAM table
	
	
	execute dbo.IRPProcessDeliverablesIAM
	
	delete from dbo.IRG_Deliverables_IAM where Clientid=@ClientId


END
GO
PRINT N'Altering [dbo].[IRPImportDeliverablesNonIAM]...';


GO

--exec IRPImportDeliverablesNonIAM 044
ALTER procedure [dbo].[IRPImportDeliverablesNonIAM]
( @ClientNo int)
As
BEGIN

	DECLARE @RowsToProcess  int,@RP int
	DECLARE @CurrentRow     int,@CR int

	DECLARE @ClientId  int,@ClientName varchar(500),@bkt_Sel varchar(100),@cat_Sel varchar(100),@RptNo int,@RptName varchar(500)
	
	DECLARE @Lvl_total char(8)

	DECLARE @Value int,@writerParamId int,@WriterId int
	DECLARE @FreqType int,@FreqId int, @Period varchar(50), @Service varchar(100),@DataType varchar(100), @Source varchar(100),@DeliveryType varchar(100),@ReportWriterCode varchar(50),
	@XREFClient int

	DECLARE @Deliverables TABLE (RowID int not null primary key identity(1,1), Clientid int,ClientName varchar(100), BKT_SEL varchar(100),CAT_SEL varchar(100),
	FreqType int,Frequency int, Period varchar(100), [Service] varchar(100),DataType varchar(100), Source varchar(100),ReportWriter varchar(50),Country varchar(10),DeliveryType varchar(100),
	 RPT_NO int, XREF_Client int, report_name varchar(500),  lvl_total char(8))  
	--Kimberley Clark - 412,AZ - 044,NicePak - 017,P&G - 481

	--set @ClientNo =044
	set @DeliveryType='FlatFile'
	--Get Client Id
	 --Select @ClientId = ClientId, @ClientName = ClientName from IRP.Client where ClientNo=@ClientNo and VersionTo=32767
	   /*  This  below change is done to accomadate the client Merging done in Everest */
		Select  @ClientId =irpclientid, @ClientName =Name from dbo.Clients where id in (
		select clientID from irp.ClientMap where IRPClientNo = @ClientNo )
	 
	DECLARE @table1 TABLE (RowID int not null primary key identity(1,1), clientNo int,rptNo int, bkt_sel varchar(100),cat_sel varchar(100),XREF_Client int,rptSelection varchar(500),report_name varchar(500), lvl_total char(8) )  
	INSERT into @table1 (clientNo,rptNo, bkt_sel, cat_sel, XREF_Client,rptSelection,report_name, lvl_total)
	select  CLD.CLIENT_NO, CLD.RPT_NO, BKT_SEL, CAT_SEL, XREF_CLIENT,RPT_SELECTION, report_name,lvl_total from IRP.CLD 
	inner join IRP.RD on CLD.CLIENT_NO = RD.CLIENT_NO and CLD.RPT_NO = RD.RPT_NO
	where CLD.CLIENT_NO=@ClientNo and RD.RPT_SELECTION not in ('ID','IA','IB','IW')

	SET @RowsToProcess=@@ROWCOUNT
	--select * from @table1
	SET @CurrentRow=0
	WHILE @CurrentRow<@RowsToProcess
	BEGIN
		SET @CurrentRow=@CurrentRow+1
		SELECT  @RptNo =rptNo,  @RptName=report_name, @bkt_Sel = BKT_SEL,@cat_Sel= cat_sel, @ReportWriterCode = rptSelection, @XREFClient=XREF_Client, @Lvl_total = lvl_total
		FROM @table1 WHERE RowID=@CurrentRow
			
			--Report writer
			--select * from IRP.CLD where CLIENT_NO = 44 and RPT_SELECTION not in ('ID','IA','IB','IW')
			-- Frequency
			set @FreqType=1 -- monthly
			set @FreqId = 1 
			--Source
			Set @source ='Sell In'
			
			
			--Period
			if @bkt_Sel = 'F1M1'  or @bkt_Sel = 'H1M1' or @bkt_Sel = 'OA1Y'
			set @Period = '1 Year'
			else if @bkt_Sel = 'FLT1'  or @bkt_Sel = 'FLT2' or @bkt_Sel = 'H2M1' or @bkt_Sel = 'H2W1' or @bkt_Sel = 'OA2Y' or @bkt_Sel = 'RXF2' or @bkt_Sel = 'T1RA' or @bkt_Sel = 'T5UN'
			set @Period = '2 Years'
			else if @bkt_Sel = 'F3M1'  or @bkt_Sel = 'F3M2' or @bkt_Sel = 'F3M3' or @bkt_Sel = 'H3M1'
			set @Period = '3 Years'
			else if @bkt_Sel = 'F5M1'  or @bkt_Sel = 'F5M2' or @bkt_Sel = 'F5M3' or @bkt_Sel = 'H5M1' or @bkt_Sel = 'H5M3'
			set @Period = '5 Years'
			
			--select * from dbo.CLIENTEXCEPTIONS where ClientNo=44
			--select * from dbo.ClientMfr where ClientNo=44

			--service
			if (@ReportWriterCode in ('AD', 'C9', 'C6', 'C5' ))
			BEGIN
			Declare @PFCDifference int

			set @PFCDifference = -1

							select @PFCDifference = Count(PFC) from (
			select convert(varchar, p.PFC) PFC from irp.Dimension d
			join irp.Client c on d.VersionTo = 32767 and c.VersionTo = 32767 and c.ClientID = d.ClientID
			join irp.cld Cld on c.ClientNo = cld.XREF_CLIENT
			join irp.rd rd on rd.CLIENT_NO = cld.CLIENT_NO and rd.RPT_NO = cld.RPT_NO and d.DimensionName = rd.REPORT_NAME
			--items
			join irp.Items i on i.DimensionID = d.DimensionID and i.VersionTo = 32767 and i.Item is not null 
			join DIMProduct_Expanded p on i.item = convert(varchar, p.fcc)
			where rd.RPT_NO = @RptNo and rd.CLIENT_NO = @ClientNo
			INTERSECT
			(
			select convert(varchar, p.PFC) PFC from irp.rd rd
			join irp.Client c on c.VersionTo = 32767 and rd.CLIENT_NO = c.ClientNo 
			join irp.cld Cld on c.ClientNo = cld.XREF_CLIENT and rd.RPT_NO = cld.RPT_NO
			--mfr
			join irp.clientmfr m on m.ClientNo =c.ClientNo
			join DIMProduct_Expanded p on m.mfrno = p.Org_code
			where rd.RPT_NO = @RptNo and rd.CLIENT_NO = @ClientNo
			union
			select convert(varchar, ce.Pack) PFC from irp.rd rd
			join irp.Client c on c.VersionTo = 32767 and rd.CLIENT_NO = c.ClientNo 
			join irp.cld Cld on c.ClientNo = cld.XREF_CLIENT and rd.RPT_NO = cld.RPT_NO
			--exceptions
			join irp.CLIENTEXCEPTIONS ce on ce.ClientNo = c.ClientNo
			where rd.RPT_NO = @RptNo and rd.CLIENT_NO = @ClientNo
			)
			) packs


			IF (@PFCDifference=0) set @Service = 'PROFITS'
			ELSE
			BEGIN
			--probe or profits+probe
							set @PFCDifference = -1

							select @PFCDifference = Count(PFC) from (
			select convert(varchar, p.PFC) PFC from irp.Dimension d
			join irp.Client c on d.VersionTo = 32767 and c.VersionTo = 32767 and c.ClientID = d.ClientID
			join irp.cld Cld on c.ClientNo = cld.XREF_CLIENT
			join irp.rd rd on rd.CLIENT_NO = cld.CLIENT_NO and rd.RPT_NO = cld.RPT_NO and d.DimensionName = rd.REPORT_NAME
			--items
			join irp.Items i on i.DimensionID = d.DimensionID and i.VersionTo = 32767 and i.Item is not null 
			join DIMProduct_Expanded p on i.item = convert(varchar, p.fcc)
			where rd.RPT_NO = @RptNo and rd.CLIENT_NO = @ClientNo
			EXCEPT
			(
			select convert(varchar, p.PFC) PFC from irp.rd rd
			join irp.Client c on c.VersionTo = 32767 and rd.CLIENT_NO = c.ClientNo 
			join irp.cld Cld on c.ClientNo = cld.XREF_CLIENT and rd.RPT_NO = cld.RPT_NO
			--mfr
			join irp.clientmfr m on m.ClientNo =c.ClientNo
			join DIMProduct_Expanded p on m.mfrno = p.Org_code
			where rd.RPT_NO = @RptNo and rd.CLIENT_NO = @ClientNo
			union
			select convert(varchar, ce.Pack) PFC from irp.rd rd
			join irp.Client c on c.VersionTo = 32767 and rd.CLIENT_NO = c.ClientNo 
			join irp.cld Cld on c.ClientNo = cld.XREF_CLIENT and rd.RPT_NO = cld.RPT_NO
			--exceptions
			join irp.CLIENTEXCEPTIONS ce on ce.ClientNo = c.ClientNo
			where rd.RPT_NO = @RptNo and rd.CLIENT_NO = @ClientNo
			)
			) packs

			if (@PFCDifference > 0) 
								SET @Service = 'PROFITS+PROBE'
							ELSE 
								set @Service = 'PROBE'

			END
			END

			--datatype
			if exists (select * from IRG_CAT_SEL where Cat = @cat_Sel and DataType = 'Retail')
			begin
				set @DataType = 'Retail'
			end

			if exists (select * from IRG_CAT_SEL where Cat = @cat_Sel and DataType = 'Hospital')
			begin
				if (len(@DataType) >0) BEGIN  SET @DataType = CONCAT (@DataType, ' + ', 'Hospital' ) END
				ELSE BEGIN set @DataType = 'Hospital' END
				
			end

			if exists (select * from IRG_CAT_SEL where Cat = @cat_Sel and DataType = 'Other')
			begin
				if (len(@DataType) >0) BEGIN  SET @DataType = CONCAT (@DataType, ' + ', 'Other' ) END
				ELSE BEGIN set @DataType = 'Other' END
			end

		
		insert into @Deliverables(clientid,ClientName, cat_sel, FreqType,Frequency, Period, [Service],DataType,Source,ReportWriter,country,deliveryType,RPT_NO, XREF_Client, report_name, lvl_total )
			values (@ClientId,@ClientName, @cat_Sel, @FreqType,@FreqId,@Period,@Service,@DataType,@Source,@ReportWriterCode,'AUS',@DeliveryType,@RptNo,@XREFClient, @rptname, @Lvl_total)
		

	END
--select * from @Deliverables
insert into dbo.IRG_Deliverables_NonIAM
	select * from @Deliverables
-- Insert records into subscription & deliverables from IRG_Deliverables_IAM table
	execute dbo.IRPProcessDeliverablesNonIAM
	
	delete from dbo.IRG_Deliverables_NonIAM where Clientid=@ClientId
END
GO
PRINT N'Altering [dbo].[IRPImportTerritoryDefinitionForClient]...';


GO


ALTER PROCEDURE [dbo].[IRPImportTerritoryDefinitionForClient] 
	-- Add the parameters for the stored procedure here
	@pClientId int,
	@pUser Nvarchar(100) = NULL 
AS
BEGIN
	SET NOCOUNT ON;
	--disabling auto increment
	--SET IDENTITY_INSERT Territories ON
	--SET IDENTITY_INSERT Levels ON
	--SET IDENTITY_INSERT Groups ON
	
	declare @dimensionId int
	declare @refDimensionId int
	declare @parentClientId int
	declare @refClientId int

	declare @Tkount int
	declare @Lkount int
	declare @Gkount int
	declare @Okount int

	declare @RefKount int

	declare @key nvarchar(100)
	select @key = newid()
	--print(@Key)

	--IMPORT NON-REF TERRITORIES
	select distinct dimensionid into #tDim 
	from irp.dimension
	where clientid in (select distinct irpclientid from irp.clientmap where clientid in (@pClientId))
	and dimensionid=refdimensionid and baseid in (1,2,11,12)
	and dimensionid not in (select distinct dimensionid from territories where dimensionid is not null)
	and versionto=32767 

	while exists(select * from #tDim)
	begin
		select @dimensionId = (select top 1 dimensionid from #tDim order by dimensionId asc)
		exec [dbo].[IRPImportTerritoryDefinition] @dimensionId
			exec [dbo].[IRPImportLogStatus] 'T', @pClientId, @dimensionId, @key, @pUser

		delete #tDim where dimensionid = @dimensionId

	end
	drop table #tDim

	--IMPORT REF TERRITORIES

	select distinct dimensionId, refdimensionid into #tDim2 from irp.dimension
	where clientid in (select distinct irpclientid from irp.clientmap where clientid in (@pClientId))
	and dimensionid<>refdimensionid and baseid in (1,2,11,12)
	and versionto=32767 and dimensionId not in
	(select distinct dimensionid from territories where dimensionid is not null)

	while exists(select * from #tDim2)
	begin
		select @refDimensionId = (select top 1 refdimensionid from #tDim2 order by dimensionId asc)
		select @dimensionId = (select top 1 dimensionid from #tDim2 order by dimensionId asc)
		
		select @RefKount = count(*) from territories where dimensionid = @refDimensionId

		if (@RefKount > 0)
		begin
			exec [dbo].[IRPImportDuplicateTerritoryDefinition] @dimensionId
				exec [dbo].[IRPImportLogStatus] 'T', @pClientId, @dimensionId, @key, @pUser
		end
		else
		begin
			--CHECK IF CLIENT EXISTS FOR REFERENCE PARENT
			select distinct @parentClientId = clientid from irp.dimension where dimensionid= @refDimensionId
			and versionto=32767 and clientid not in(select distinct irpclientid from irp.clientmap)
		
			if(@parentClientId <> '' or @parentClientId is not null) -- this means - parent client NOT exists
			begin
				insert into clients
				select clientname as Name,0 as IsMyClient,null as DivisionOf, clientid as IRPClientId, clientno as IRPClientNo
				from irp.client 
				where clientid = @parentClientId
				and versionto=32767

				insert into irp.clientmap
				select a.id as clientid,b.clientid as irpclientid, b.clientno as clientno
				from clients a join	IRP.client b on a.name=b.clientname
				where b.versionto=32767
				and a.id not in (select distinct clientid from IRP.clientMap)
				and b.clientid=@parentClientId
			end
			
			exec [dbo].[IRPImportTerritoryDefinition] @refDimensionId
				select @refClientId = client_id from territories where dimensionid = @refDimensionId
				exec [dbo].[IRPImportLogStatus] 'T', @refClientId, @refDimensionId, @key, @pUser
			exec [dbo].[IRPImportDuplicateTerritoryDefinition] @dimensionId
				exec [dbo].[IRPImportLogStatus] 'T', @pClientId, @dimensionId, @key, @pUser
			
		end
		
		delete #tDim2 where dimensionid = @dimensionId
	end
	drop table #tDim2

	--enabling auto increment
	SET IDENTITY_INSERT Territories OFF
	SET IDENTITY_INSERT Levels OFF
	SET IDENTITY_INSERT Groups OFF


	--Update delivery Territory Table
	exec IRPImportDeliveryMarketAndTerritory

	--Show latest import result---
	select a.ClientId, c.name ClientName, a.DimensionId, t.dimensionname as TerritoryDefinition, Status, TimeOfImport, UserName from dbo.IRPImportLog a 
	join clients c on c.id = a.clientid
	join IRP.dimension t on t.dimensionid = a.dimensionid
	where [Key] = @key and DimType = 'T' and t.VersionTo > 0


END

--exec [IRPImportTerritoryDefinitionForClient] 59
GO
PRINT N'Altering [dbo].[vwDeliverables].[MS_DiagramPane1]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_DiagramPane1', @value = N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[55] 4[3] 2[24] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "d"
            Begin Extent = 
               Top = 7
               Left = 48
               Bottom = 168
               Right = 255
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "s"
            Begin Extent = 
               Top = 2
               Left = 349
               Bottom = 163
               Right = 560
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "c"
            Begin Extent = 
               Top = 7
               Left = 562
               Bottom = 168
               Right = 756
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "cn"
            Begin Extent = 
               Top = 7
               Left = 804
               Bottom = 146
               Right = 998
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "dty"
            Begin Extent = 
               Top = 7
               Left = 1046
               Bottom = 124
               Right = 1240
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "svc"
            Begin Extent = 
               Top = 7
               Left = 1288
               Bottom = 124
               Right = 1482
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "st"
            Begin Extent = 
               Top = 136
               Left = 1057
               Bottom = 253
               Right = 1268
            End
            DisplayFlags = 280
            TopColumn = 0
         ', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'vwDeliverables';


GO
PRINT N'Altering [dbo].[vwDeliverables].[MS_DiagramPane2]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_DiagramPane2', @value = N'End
         Begin Table = "src"
            Begin Extent = 
               Top = 126
               Left = 1305
               Bottom = 243
               Right = 1499
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "rw"
            Begin Extent = 
               Top = 371
               Left = 1264
               Bottom = 532
               Right = 1458
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "fr"
            Begin Extent = 
               Top = 340
               Left = 9
               Bottom = 479
               Right = 216
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "ft"
            Begin Extent = 
               Top = 379
               Left = 593
               Bottom = 518
               Right = 800
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "pr"
            Begin Extent = 
               Top = 384
               Left = 914
               Bottom = 523
               Right = 1108
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "dt"
            Begin Extent = 
               Top = 370
               Left = 287
               Bottom = 487
               Right = 481
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "cmap"
            Begin Extent = 
               Top = 147
               Left = 804
               Bottom = 286
               Right = 998
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "rpt"
            Begin Extent = 
               Top = 168
               Left = 48
               Bottom = 285
               Right = 242
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1176
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1356
         SortOrder = 1416
         GroupBy = 1350
         Filter = 1356
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'vwDeliverables';


GO
PRINT N'Creating [dbo].[FK_Extraction_Job].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'FK_Extraction_Job', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'ExtractionJob', @level2type = N'CONSTRAINT', @level2name = N'FK_Extraction_Job';


GO
PRINT N'Creating [dbo].[vwGroupView].[MS_DiagramPane1]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPane1', @value = N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "a"
            Begin Extent = 
               Top = 7
               Left = 48
               Bottom = 168
               Right = 242
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "b"
            Begin Extent = 
               Top = 7
               Left = 290
               Bottom = 168
               Right = 510
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "c"
            Begin Extent = 
               Top = 7
               Left = 558
               Bottom = 168
               Right = 778
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'vwGroupView';


GO
PRINT N'Creating [dbo].[vwGroupView].[MS_DiagramPaneCount]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPaneCount', @value = 1, @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'vwGroupView';


GO
PRINT N'Refreshing [dbo].[z_WebpageSecurity]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[z_WebpageSecurity]';


GO
PRINT N'Refreshing [dbo].[GetPacksFromMarketBaseMap]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GetPacksFromMarketBaseMap]';


GO
PRINT N'Refreshing [dbo].[BuildQueryForExclusionMarketBaseMap]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[BuildQueryForExclusionMarketBaseMap]';


GO
PRINT N'Refreshing [dbo].[DeleteMarketDefinition]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[DeleteMarketDefinition]';


GO
PRINT N'Refreshing [dbo].[DeleteMarketDefinitionBaseMap]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[DeleteMarketDefinitionBaseMap]';


GO
PRINT N'Refreshing [dbo].[UnsubscribeMarketBase]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[UnsubscribeMarketBase]';


GO
PRINT N'Refreshing [dbo].[BuildQueryForExclusionMarketDef]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[BuildQueryForExclusionMarketDef]';


GO
PRINT N'Refreshing [dbo].[BuildQueryForNewDataLoad]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[BuildQueryForNewDataLoad]';


GO
PRINT N'Refreshing [dbo].[BuildQueryForExclusion]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[BuildQueryForExclusion]';


GO
PRINT N'Refreshing [dbo].[BuildQueryForDelta]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[BuildQueryForDelta]';


GO
PRINT N'Refreshing [dbo].[DeleteMarketBase]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[DeleteMarketBase]';


GO
PRINT N'Refreshing [dbo].[GetClientMarketBase]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GetClientMarketBase]';


GO
PRINT N'Refreshing [dbo].[GetClientMarketBaseDetails]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GetClientMarketBaseDetails]';


GO
PRINT N'Refreshing [dbo].[GetPacksFromClientMarketBase]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GetPacksFromClientMarketBase]';


GO
PRINT N'Refreshing [dbo].[IRPImportMarketDefinition2]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[IRPImportMarketDefinition2]';


GO
PRINT N'Refreshing [dbo].[prGetMarketBase]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[prGetMarketBase]';


GO
PRINT N'Refreshing [dbo].[procBuildQueryFromMarketBase]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[procBuildQueryFromMarketBase]';


GO
PRINT N'Refreshing [dbo].[DBScript_InitTables]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[DBScript_InitTables]';


GO
PRINT N'Refreshing [dbo].[GetLandingPageContents]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GetLandingPageContents]';


GO
PRINT N'Refreshing [dbo].[GetLandingPageContents_bk]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GetLandingPageContents_bk]';


GO
PRINT N'Refreshing [dbo].[GenerateMarketDefinitionsReport]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GenerateMarketDefinitionsReport]';


GO
PRINT N'Refreshing [dbo].[GetMarketBaseForMarketDef]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GetMarketBaseForMarketDef]';


GO
PRINT N'Refreshing [dbo].[z_QC]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[z_QC]';


GO
PRINT N'Refreshing [dbo].[InsertTerritoryIdGroupTable]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[InsertTerritoryIdGroupTable]';


GO
PRINT N'Refreshing [dbo].[IRPDeleteGroupsLevelsBricks]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[IRPDeleteGroupsLevelsBricks]';


GO
PRINT N'Refreshing [dbo].[IRPImportDuplicateTerritoryDefinition]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[IRPImportDuplicateTerritoryDefinition]';


GO
PRINT N'Refreshing [dbo].[IRPImportTerritoryCustomGroupNumber]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[IRPImportTerritoryCustomGroupNumber]';


GO
PRINT N'Refreshing [dbo].[IRPImportTerritoryDefinition]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[IRPImportTerritoryDefinition]';


GO
PRINT N'Refreshing [SERVICE].[CREATE_CT_LVL1]...';


GO
EXECUTE sp_refreshsqlmodule N'[SERVICE].[CREATE_CT_LVL1]';


GO
PRINT N'Refreshing [SERVICE].[CREATE_CT_LVL2]...';


GO
EXECUTE sp_refreshsqlmodule N'[SERVICE].[CREATE_CT_LVL2]';


GO
PRINT N'Refreshing [SERVICE].[CREATE_CT_LVL3]...';


GO
EXECUTE sp_refreshsqlmodule N'[SERVICE].[CREATE_CT_LVL3]';


GO
PRINT N'Refreshing [SERVICE].[CREATE_CT_LVL4]...';


GO
EXECUTE sp_refreshsqlmodule N'[SERVICE].[CREATE_CT_LVL4]';


GO
PRINT N'Refreshing [SERVICE].[CREATE_CT_LVL5]...';


GO
EXECUTE sp_refreshsqlmodule N'[SERVICE].[CREATE_CT_LVL5]';


GO
PRINT N'Refreshing [SERVICE].[CREATE_CT_LVL6]...';


GO
EXECUTE sp_refreshsqlmodule N'[SERVICE].[CREATE_CT_LVL6]';


GO
PRINT N'Refreshing [SERVICE].[CREATE_CT_LVL7]...';


GO
EXECUTE sp_refreshsqlmodule N'[SERVICE].[CREATE_CT_LVL7]';


GO
PRINT N'Refreshing [SERVICE].[CREATE_CT_LVL8]...';


GO
EXECUTE sp_refreshsqlmodule N'[SERVICE].[CREATE_CT_LVL8]';


GO
PRINT N'Refreshing [dbo].[UpdateCustomGroupNumberForAllTerritories]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[UpdateCustomGroupNumberForAllTerritories]';


GO
PRINT N'Refreshing [SERVICE].[CREATE_AU9_CLIENT_TERR]...';


GO
EXECUTE sp_refreshsqlmodule N'[SERVICE].[CREATE_AU9_CLIENT_TERR]';


GO
PRINT N'Refreshing [dbo].[CREATE_TERRITORY_OUTPUT_2]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[CREATE_TERRITORY_OUTPUT_2]';


GO
PRINT N'Refreshing [dbo].[SP_LevelTerritory]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[SP_LevelTerritory]';


GO
PRINT N'Refreshing [SERVICE].[CREATE_AU9_CLIENT_TERR_TYP]...';


GO
EXECUTE sp_refreshsqlmodule N'[SERVICE].[CREATE_AU9_CLIENT_TERR_TYP]';


GO
PRINT N'Refreshing [dbo].[CREATE_TERRITORY_OUTPUT_1]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[CREATE_TERRITORY_OUTPUT_1]';


GO
PRINT N'Refreshing [SERVICE].[CREATE_TERRITORY_OUTPUT_1]...';


GO
EXECUTE sp_refreshsqlmodule N'[SERVICE].[CREATE_TERRITORY_OUTPUT_1]';


GO
PRINT N'Refreshing [dbo].[ProcessPacksFromMarketBaseMap]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[ProcessPacksFromMarketBaseMap]';


GO
PRINT N'Refreshing [dbo].[RemoveExpiredMarketBases]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[RemoveExpiredMarketBases]';


GO
PRINT N'Refreshing [dbo].[GetEffectedMarketDefName]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GetEffectedMarketDefName]';


GO
PRINT N'Refreshing [dbo].[UpdateDataRefreshType]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[UpdateDataRefreshType]';


GO
PRINT N'Refreshing [dbo].[UpdateMarketBaseId]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[UpdateMarketBaseId]';


GO
PRINT N'Refreshing [dbo].[UpdateMarketDefinitionId]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[UpdateMarketDefinitionId]';


GO
PRINT N'Refreshing [dbo].[CombineMultipleMarketBasesForAll]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[CombineMultipleMarketBasesForAll]';


GO
PRINT N'Refreshing [dbo].[CombineMultipleMarketBasesForMarket]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[CombineMultipleMarketBasesForMarket]';


GO
PRINT N'Refreshing [dbo].[z_QC_1]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[z_QC_1]';


GO
PRINT N'Refreshing [SERVICE].[CREATE_AU9_CLIENT_MKT_PACK_CLIENT_SPECIFIC]...';


GO
EXECUTE sp_refreshsqlmodule N'[SERVICE].[CREATE_AU9_CLIENT_MKT_PACK_CLIENT_SPECIFIC]';


GO
PRINT N'Refreshing [dbo].[CheckUserLogin]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[CheckUserLogin]';


GO
PRINT N'Refreshing [dbo].[CreateUser]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[CreateUser]';


GO
PRINT N'Refreshing [dbo].[CreateUserFromList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[CreateUserFromList]';


GO
PRINT N'Refreshing [dbo].[CreateUserRolefromList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[CreateUserRolefromList]';


GO
PRINT N'Refreshing [dbo].[CopyMarketBase]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[CopyMarketBase]';


GO
PRINT N'Refreshing [dbo].[GenerateQCForDataRefreshTerritory]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GenerateQCForDataRefreshTerritory]';


GO
PRINT N'Refreshing [dbo].[GetAllOutlets]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GetAllOutlets]';


GO
PRINT N'Refreshing [dbo].[GetUpdatedOutlets]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GetUpdatedOutlets]';


GO
PRINT N'Refreshing [dbo].[ProcessTerritoryForDelta]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[ProcessTerritoryForDelta]';


GO
PRINT N'Refreshing [dbo].[GENERATE_DIM_PROD]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GENERATE_DIM_PROD]';


GO
PRINT N'Refreshing [SERVICE].[CREATE_TERRITORY_OUTPUT]...';


GO
EXECUTE sp_refreshsqlmodule N'[SERVICE].[CREATE_TERRITORY_OUTPUT]';


GO
PRINT N'Refreshing [dbo].[ProcessAllMarketDefinitionsForDelta]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[ProcessAllMarketDefinitionsForDelta]';


GO
PRINT N'Refreshing [dbo].[ProcessDelta]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[ProcessDelta]';


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[RoleAction] WITH CHECK CHECK CONSTRAINT [FK__RoleActio__Acces__634EBE90];

ALTER TABLE [dbo].[Action] WITH CHECK CHECK CONSTRAINT [FK__Action__ModuleID__43D61337];

ALTER TABLE [dbo].[RoleAction] WITH CHECK CHECK CONSTRAINT [FK__RoleActio__Actio__6442E2C9];

ALTER TABLE [dbo].[AdditionalFilters] WITH CHECK CHECK CONSTRAINT [FK_dbo.AdditionalFilters_dbo.MarketDefinitionBaseMaps_MarketDefinitionBaseMapId];

ALTER TABLE [dbo].[Subscription] WITH CHECK CHECK CONSTRAINT [FK__Subscript__Clien__662B2B3B];

ALTER TABLE [dbo].[ClientMFR] WITH CHECK CHECK CONSTRAINT [FK__ClientMFR__Clien__46B27FE2];

ALTER TABLE [dbo].[ClientPackException] WITH CHECK CHECK CONSTRAINT [FK__ClientPac__Clien__47A6A41B];

ALTER TABLE [dbo].[ClientRelease] WITH CHECK CHECK CONSTRAINT [FK__ClientRel__Clien__489AC854];

ALTER TABLE [dbo].[UserClient] WITH CHECK CHECK CONSTRAINT [FK__UserClien__Clien__719CDDE7];

ALTER TABLE [dbo].[DeliveryClient] WITH CHECK CHECK CONSTRAINT [FK__DeliveryC__Clien__4E53A1AA];

ALTER TABLE [dbo].[MarketDefinitions] WITH CHECK CHECK CONSTRAINT [FK_dbo.MarketDefinitions_dbo.Clients_ClientId];

ALTER TABLE [dbo].[Subscription] WITH CHECK CHECK CONSTRAINT [FK__Subscript__Count__671F4F74];

ALTER TABLE [dbo].[Subscription] WITH CHECK CHECK CONSTRAINT [FK__Subscript__DataT__681373AD];

ALTER TABLE [dbo].[ReportWriter] WITH CHECK CHECK CONSTRAINT [FK__ReportWri__Deliv__607251E5];

ALTER TABLE [dbo].[Deliverables] WITH CHECK CHECK CONSTRAINT [FK__Deliverab__Deliv__498EEC8D];

ALTER TABLE [dbo].[ReportWriter] WITH CHECK CHECK CONSTRAINT [FK__ReportWri__FileI__6166761E];

ALTER TABLE [dbo].[ReportWriter] WITH CHECK CHECK CONSTRAINT [FK__ReportWri__FileT__625A9A57];

ALTER TABLE [dbo].[Frequency] WITH CHECK CHECK CONSTRAINT [FK__Frequency__Frequ__55F4C372];

ALTER TABLE [dbo].[Deliverables] WITH CHECK CHECK CONSTRAINT [FK__Deliverab__Frequ__4A8310C6];

ALTER TABLE [dbo].[Territories] WITH CHECK CHECK CONSTRAINT [FK_dbo.Territories_dbo.Groups_RootGroup_id];

ALTER TABLE [dbo].[Groups] WITH CHECK CHECK CONSTRAINT [FK_dbo.Groups_dbo.Groups_Parent_Id];

ALTER TABLE [dbo].[Levels] WITH CHECK CHECK CONSTRAINT [FK_dbo.Levels_dbo.Territories_TerritoryId];

ALTER TABLE [dbo].[Territories] WITH CHECK CHECK CONSTRAINT [FK_dbo.Territories_dbo.Levels_RootLevel_Id];

ALTER TABLE [dbo].[PackMarketBases] WITH CHECK CHECK CONSTRAINT [FK__PackMarke__Marke__5F7E2DAC];

ALTER TABLE [dbo].[SubscriptionMarket] WITH CHECK CHECK CONSTRAINT [FK__Subscript__Marke__6BE40491];

ALTER TABLE [dbo].[MarketDefinitionBaseMaps] WITH CHECK CHECK CONSTRAINT [FK_dbo.MarketDefinitionBaseMaps_dbo.MarketBases_MarketBaseId];

ALTER TABLE [dbo].[MarketDefinitionBaseMaps] WITH CHECK CHECK CONSTRAINT [FK_dbo.MarketDefinitionBaseMaps_dbo.MarketDefinitions_MarketDefinitionId];

ALTER TABLE [dbo].[MarketDefinitionPacks] WITH CHECK CHECK CONSTRAINT [FK_dbo.MarketDefinitionPacks_dbo.MarketDefinitions_MarketDefinitionId];

ALTER TABLE [dbo].[DeliveryMarket] WITH CHECK CHECK CONSTRAINT [FK__DeliveryM__Marke__51300E55];

ALTER TABLE [dbo].[ReportSection] WITH CHECK CHECK CONSTRAINT [FK_ReportSection_UserType];

ALTER TABLE [dbo].[RoleAction] WITH CHECK CHECK CONSTRAINT [FK__RoleActio__RoleI__65370702];

ALTER TABLE [dbo].[UserRole] WITH CHECK CHECK CONSTRAINT [FK__UserRole__RoleId__73852659];

ALTER TABLE [dbo].[Module] WITH CHECK CHECK CONSTRAINT [fk_section_module];

ALTER TABLE [dbo].[Subscription] WITH CHECK CHECK CONSTRAINT [FK__Subscript__Servi__690797E6];

ALTER TABLE [dbo].[Subscription] WITH CHECK CHECK CONSTRAINT [FK__Subscript__Servi__69FBBC1F];

ALTER TABLE [dbo].[Subscription] WITH CHECK CHECK CONSTRAINT [FK__Subscript__Sourc__6AEFE058];

ALTER TABLE [dbo].[SubscriptionMarket] WITH CHECK CHECK CONSTRAINT [FK__Subscript__Subsc__6CD828CA];

ALTER TABLE [dbo].[Deliverables] WITH CHECK CHECK CONSTRAINT [FK__Deliverab__Subsc__4D5F7D71];

ALTER TABLE [dbo].[OutletBrickAllocations_old] WITH CHECK CHECK CONSTRAINT [FK_dbo.OutletBrickAllocations_dbo.Territories_TerritoryId];

ALTER TABLE [dbo].[Territories] WITH CHECK CHECK CONSTRAINT [FK_Territories_Territories];

ALTER TABLE [dbo].[DeliveryTerritory] WITH CHECK CHECK CONSTRAINT [FK__DeliveryT__Terri__45BE5BA9];

ALTER TABLE [dbo].[OutletBrickAllocations] WITH CHECK CHECK CONSTRAINT [FK_dbo.OutletBrickAllocations1_dbo.Territories_TerritoryId];

ALTER TABLE [copy].[Subscription] WITH CHECK CHECK CONSTRAINT [FK__Subscript__Clien__662B2B3B];

ALTER TABLE [copy].[Subscription] WITH CHECK CHECK CONSTRAINT [FK__Subscript__Count__671F4F74];

ALTER TABLE [copy].[Subscription] WITH CHECK CHECK CONSTRAINT [FK__Subscript__DataT__681373AD];

ALTER TABLE [copy].[Subscription] WITH CHECK CHECK CONSTRAINT [FK__Subscript__Servi__690797E6];

ALTER TABLE [copy].[Subscription] WITH CHECK CHECK CONSTRAINT [FK__Subscript__Servi__69FBBC1F];

ALTER TABLE [copy].[Subscription] WITH CHECK CHECK CONSTRAINT [FK__Subscript__Sourc__6AEFE058];

ALTER TABLE [dbo].[ExtractionJob] WITH CHECK CHECK CONSTRAINT [FK_Extraction_Job];

ALTER TABLE [dbo].[ExtractionJob] WITH CHECK CHECK CONSTRAINT [FK_ExtractionJob_ExtractionJobStatus];

ALTER TABLE [dbo].[MarketDefBaseMap_History] WITH CHECK CHECK CONSTRAINT [FK_MarketDefBaseMap_History_MarketDefinitions_History];

ALTER TABLE [dbo].[MarketDefPack_History] WITH CHECK CHECK CONSTRAINT [FK_MarketDefPack_History_MarketDefinitions_History];


GO
PRINT N'Update complete.';


GO
